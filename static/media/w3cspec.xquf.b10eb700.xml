<!--XSLT Processor: Saxonica SAXON HE 9.6.0.7--><!--{assemble-update} XSLT Processor: Saxonica SAXON HE 9.6.0.7--><spec xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" id="spec-top" w3c-doctype="wgnote"><header><title>XQuery Update Facility 3.0</title><w3c-designation>NOTE-xquery-update-30</w3c-designation><w3c-doctype>W3C Working Group Note</w3c-doctype><pubdate><day>24</day><month>January</month><year>2017</year></pubdate><publoc>
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/TR/2017/NOTE-xquery-update-30-20170124/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://www.w3.org/TR/2017/NOTE-xquery-update-30-20170124/</loc>
</publoc><altlocs><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/TR/2017/NOTE-xquery-update-30-20170124/xquery-update-30.xml" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XML</loc><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/TR/2017/NOTE-xquery-update-30-20170124/xquery-update-30-diff.html" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Recent revisions (HTML)</loc></altlocs><latestloc>
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/TR/xquery-update-30/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://www.w3.org/TR/xquery-update-30/</loc>
</latestloc><prevlocs>
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/TR/2015/WD-xquery-update-30-20150219/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/>
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/TR/2013/WD-xquery-update-30-20130108/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/>
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/TR/2011/WD-xquery-update-30-20111213/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/>
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/TR/2011/REC-xquery-update-10-20110317/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/>
</prevlocs><authlist><author><name><phrase><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://john.snelson.org.uk" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">John Snelson</loc></phrase></name><affiliation>MarkLogic Corporation</affiliation><email xmlns:xlink="http://www.w3.org/1999/xlink" href="mailto:john.snelson@marklogic.com" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">john.snelson@marklogic.com</email></author><author><name>Jim Melton</name><affiliation>Oracle</affiliation><email xmlns:xlink="http://www.w3.org/1999/xlink" href="mailto:jim.melton@oracle.com" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">jim.melton@oracle.com</email></author></authlist><abstract><p>This document defines an update facility that extends the XML Query language, XQuery. 
The XQuery Update Facility 3.0 provides expressions that can be used to make persistent changes
to instances of the XQuery and XPath Data Model 3.0.</p></abstract><!--* Common status section for QT specs.
    * Use is currently not required, but it simplifies things.
    * 
    * Revisions:
    * 2007-01-15 : CMSMcQ : made file, to simplify publication of Rec.
    * 2008-02-15 : JimMelton : cloned from MSM's REC-only material
                     to generalize for all stages
    *--><status id="status"><!-- ************************************************************************** --><!-- * All Status sections must start with the standard boilerplate paragraph * --><!-- *   This entity is defined in status-entities.dtd                        * --><!-- ************************************************************************** --><p><emph>This section describes the status of this
         document at the time of its publication.
         Other documents may supersede this document.
         A list of current W3C publications and the latest
         revision of this technical report can be found in the
         <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/TR/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">W3C technical reports index</loc>
         at https://www.w3.org/TR/.</emph></p><p>This document is governed by the
         <loc xmlns:xlink="http://www.w3.org/1999/xlink" id="w3c_process_revision" href="https://www.w3.org/2015/Process-20150901/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">1 September 2015 W3C Process Document</loc>. </p><!-- ************************************************************************** --><!-- * QT publishes suites of documents, which must be described in the       * --><!--     Status section of each document within such a suite.                 * --><!-- *   This entity is defined in the host document.                         * --><!-- ************************************************************************** --><!-- ************************************************************************** --><!-- * There is a lot of detailed customization based on the document stage   * --><!-- *   This entity is defined in the host document.                         * --><!-- ************************************************************************** --><p>This is a <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/2015/Process-20150901/#Note" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Working Group Note</loc> as described in the <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/2015/Process-20150901/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Process Document</loc>. 
It was developed by the W3C <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/XML/Query/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XML Query Working Group</loc>,
which is part of the <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/XML/Activity" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XML Activity</loc>.
</p><!-- ************************************************************************** --><!-- * CR documents must cite features at risk                                * --><!-- *   This entity is defined in the host document.                         * --><!-- ************************************************************************** --><!-- ************************************************************************** --><!-- * Every Status section must have a customized paragraph                  * --><!-- *   This entity is defined completely in the host document.              * --><!-- ************************************************************************** --><p>This is a Working Group Note of XQuery Update Facility 3.0. 
         There are no substantive changes from the previous Working Draft.
         The reason for publishing this Note is to provide the XQuery Update grammar fully integrated with the XQuery 3.0 grammar.
         </p><!-- ************************************************************************** --><!-- * CR docs should, and PR docs must, have a pointer to an implementation  * --><!-- *   report.  We also want to point to the test suite.                    * --><!-- *   This entity is defined in the host document.                         * --><!-- ************************************************************************** --><!-- ************************************************************************** --><!-- * The Status section should point to a changelog                         * --><!-- *   This entity is defined in the host document.                         * --><!-- ************************************************************************** --><p>This document incorporates changes made against the previous publication
  of the Working Draft.
  Changes to this document since the previous publication of the Working Draft
  are detailed in <specref ref="id-revision-log"/>.</p><!-- ************************************************************************** --><!-- * The Status section must tell readers where to send comments            * --><!-- *   This entity is defined in status-entities.dtd                        * --><!-- ************************************************************************** --><p>Please report errors in this document using W3C's
         <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/Bugs/Public/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">public Bugzilla system</loc>
         (instructions can be found at
         <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/XML/2005/04/qt-bugzilla" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://www.w3.org/XML/2005/04/qt-bugzilla</loc>).
         If access to that system is not feasible, you may send your comments
         to the W3C XSLT/XPath/XQuery public comments mailing list,
         <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="mailto:public-qt-comments@w3.org" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">public-qt-comments@w3.org</loc>.
         It will be very helpful if you include the string 
         “[UPD30]”
         in the subject line of your report, whether made in Bugzilla or in email.
         Please use multiple Bugzilla entries (or, if necessary, multiple email messages)
         if you have more than one comment to make.
         Archives of the comments and responses are available at
         <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://lists.w3.org/Archives/Public/public-qt-comments/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://lists.w3.org/Archives/Public/public-qt-comments/</loc>. </p><!-- ************************************************************************** --><!-- Status sections must state the stability (not stable, or REC) of the document --><!-- *   This entity is defined in the host document.                         * --><!-- ************************************************************************** --><p>Publication as a <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/2015/Process-20150901/#Note" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Working Group Note</loc>
does not imply endorsement by the W3C Membership. 
This is a draft document and may be updated, replaced or obsoleted
by other documents at any time. 
It is inappropriate to cite this document as other than work in progress.</p><!-- ************************************************************************** --><!-- * Finally, all Status sections must end with the appropriate IPR para    * --><!-- *   This entity is defined in status-entities.dtd                        * --><!-- ************************************************************************** --><p>This document was produced by a group operating under the
  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/Consortium/Patent-Policy-20040205/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">5 February 2004
  W3C Patent Policy</loc>.
  W3C maintains a 
  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/2004/01/pp-impl/18797/status#disclosures" rel="disclosure" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">public list of any patent disclosures</loc>
  made in connection with the deliverables of the group; 
  that page also includes instructions for disclosing a patent.
  An individual who has actual knowledge of a patent 
  which the individual believes contains
  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/Consortium/Patent-Policy-20040205/#def-essential" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Essential Claim(s)</loc>
  must disclose the information in accordance with
  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/Consortium/Patent-Policy-20040205/#sec-Disclosure" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">
  section 6 of the W3C Patent Policy</loc>. </p></status><langusage><language id="EN">English</language></langusage><revisiondesc><p/></revisiondesc></header><body><div1 id="introduction"><head>Introduction</head><p>
This document defines the syntax and semantics of an extension 
to <bibref ref="xquery-30"/> called the XQuery Update Facility 3.0.
This language extension is designed to meet the
requirements for updating instances of the
<bibref ref="xpath-datamodel-30"/>, as defined in <bibref ref="xquery-update-30-requirements-use-cases"/>.
</p><p>
The XQuery Update Facility 3.0 provides facilities to perform any or all
of the following operations on an
<termref def="dt-xdm-instance">XDM instance</termref>:
</p><ulist><item><p>Insertion of a node.</p></item><item><p>Deletion of a node.</p></item><item><p>Modification of a node by changing
some of its properties while preserving its <termref def="dt-node-identity">node identity</termref>.</p></item><item><p>Creation of a modified copy of a node with a new <termref def="dt-node-identity">node identity</termref>.</p></item></ulist><p>
Additionally, this document defines an XML syntax for the XQuery Update Facility 3.0. 
The most recent versions of the two XQueryX XML Schemas and the
XQueryX XSLT stylesheet for the XQuery Update Facility 3.0 are available at


<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/2015/02/xquery-update-30/xquery-update-30-xqueryx.xsd" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/2015/02/xquery-update-30/xquery-update-30-xqueryx.xsd</loc>,
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/2015/02/xquery-update-30/xquery-update-30-xqueryx-redef.xsd" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/2015/02/xquery-update-30/xquery-update-30-xqueryx-redef.xsd</loc>,
and <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/2015/02/xquery-update-30/xquery-update-30-xqueryx.xsl" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/2015/02/xquery-update-30/xquery-update-30-xqueryx.xsl</loc>,

respectively. 
</p><div2 id="id-terminology"><head>Terminology</head><p>
<termdef term="XQuery 3.0" id="dt-xquery-30">Within this document,
the term <term>XQuery 3.0</term> refers to the language specified by <bibref ref="xquery-30"/>.</termdef>
<termdef term="data model" id="dt-data-model-30">The term <term>data model</term> refers to
the data model specified by <bibref ref="xpath-datamodel-30"/>.</termdef>
<termdef term="XDM instance" id="dt-xdm-instance">The term <term>XDM instance</term>
denotes an unconstrained sequence of zero or more nodes and/or atomic values
as defined by the <termref def="dt-data-model-30">data model</termref>.</termdef>
<termdef term="node identity" id="dt-node-identity">The term <term>node identity</term>
denotes the unique identity that is a property of every node in an
<termref def="dt-xdm-instance">XDM instance</termref>
(see <xspecref spec="DM30" ref="node-identity"/>.)</termdef>
</p><p>
As described in <xspecref spec="DM30" ref="qnames-and-notations"/>,
names in XQuery are qualified names (QNames) that consist of an
optional namespace prefix, a local name, and an optional namespace URI. 
<termdef term="implied namespace binding" id="dt-implied-namespace-binding">The
<term>implied namespace binding</term> of a QName is the association of its namespace prefix
(or absence thereof) with its namespace URI (or absence thereof).</termdef>
<termdef term="conflict" id="dt-conflict">Two namespace bindings are said to
<term>conflict</term> if their namespace prefixes (or absence thereof) are
the same but their namespace URI's (or absence thereof) are different.</termdef>
Update operations that result in conflicting namespace bindings generally raise errors,
as described in this document.

However, if the namespace prefix of an attribute is absent, it is in
no namespace, and its implied namespace binding is not added to the namespace bindings of its parent element. Therefore, an update operation can create such an attribute in an element even though its implied namespace binding conflicts with a namespace binding in the "namespaces" property of the element.
</p><p>
In this document, examples and material labeled as <quote>Note</quote> are provided for
explanatory purposes and are not normative.
</p></div2></div1><div1 id="id-processing-model"><head>Extensions to the Processing Model</head><p>
    Expressions in XQuery Update Facility 3.0 can return a <termref def="dt-pending-update-list">pending update list</termref> in
    addition to an <termref def="dt-xdm-instance">XDM instance</termref>,
    which can result in modifications being made to the state of existing nodes.
    This specification defines the semantics of updates to an <termref def="dt-xdm-instance">XDM instance</termref>.
    Propagation of these updates to an underlying persistent store (if any)
    is beyond the scope of this specification.
  </p><div2 id="id-pending-update-lists"><head>Pending Update Lists</head><p>
      <termdef id="dt-pending-update-list" term="pending update list">
        A <term>pending update list</term> is an unordered collection of
        <termref def="dt-update-primitive">update primitives</termref>, which represent node state changes that
        have not yet been applied.
      </termdef>
      The term "result" used in
      <xspecref spec="XQ30" ref="id-errors-and-opt"/> includes both the
      <termref def="dt-xdm-instance">XDM instance</termref> and the
      <termref def="dt-pending-update-list">pending update list</termref> returned by an expression.
    </p><p>
      XQuery Update Facility 3.0 relaxes many of the constraints placed on the position of
      <termref def="dt-updating-expression">updating expressions</termref> in
      <bibref ref="xquery-update-10"/> with the goal of allowing expressions to return
      both a non-empty <termref def="dt-pending-update-list">pending update list</termref>
      and a non-empty <termref def="dt-xdm-instance">XDM instance</termref>. Existing
      expressions are extended with new rules to determine the category and resulting
      <termref def="dt-pending-update-list">pending update list</termref> when they are
      executed.
    </p></div2><div2 id="id-updating-expressions"><head>Updating Expressions</head><p>
      XQuery Update Facility 3.0 introduces a new category of expression, called an
      <termref def="dt-updating-expression">updating expression</termref>. Unlike expressions defined
      in <bibref ref="xquery-30"/>, updating expressions can potentially result in the
      modification of the state of an existing node.

      <termdef term="updating expression" id="dt-updating-expression">
        An <term>updating expression</term> is an expression that can return a non-empty
        <termref def="dt-pending-update-list">pending update list</termref>. This includes 
        <termref def="dt-basic-updating-expression">basic updating expressions</termref>, static
        function calls to an <termref def="dt-updating-function">updating function</termref>, or any
        expression that directly contains an <termref def="dt-updating-expression">updating expression</termref>
        (other than the modify expression of a copy modify or transform with expression).
      </termdef>
      <termdef term="simple expression" id="dt-simple-expression">
        A <term>simple expression</term> is
        any XQuery expression that is not an <termref def="dt-updating-expression">updating expression</termref>.
      </termdef>
    </p><p>
      The classification of each expression into one of the above categories is performed by static analysis,
      according to rules specified in this document for each type of expression.
    </p><p>
      <termdef term="basic updating expression" id="dt-basic-updating-expression">
        Five new kinds of expressions named <term>basic updating expression</term> are introduced,
        including insert, delete, replace, rename, and dynamic updating
        function invocation expressions. <term>Basic updating expression</term> are always classified as
        <termref def="dt-updating-expression">updating expressions</termref>.
      </termdef>
      In addition two new kinds of expressions named transform with, and copy modify expressions can
      apply pending update lists to copies of nodes. These expressions are usually classified as 
      <termref def="dt-simple-expression">simple expressions</termref> rather than updating expressions.
    </p></div2><div2 id="id-updating-functions"><head>Updating Functions</head><p>
    <termdef term="updating function" id="dt-updating-function">
      An <term>updating function</term> is a <xtermref spec="DM30" ref="dt-function-item">function</xtermref>
      which can return a non-empty <termref def="dt-pending-update-list">pending update list</termref> when called.
    </termdef>
    <termdef term="simple function" id="dt-simple-function">
      If a function is not an <termref def="dt-updating-function">updating function</termref>,
      then it is a <term>simple function</term>.
    </termdef>
  </p><div3 id="id-declare-updating-function"><head>Declaring an Updating Function</head><scrap headstyle="show"><head/><prod num="26" id="doc-xquery30-AnnotatedDecl"><lhs>AnnotatedDecl</lhs><rhs>"declare"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-CompatibilityAnnotation" xlink:type="simple">CompatibilityAnnotation</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-Annotation" xlink:type="simple">Annotation</nt>)*  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-VarDecl" xlink:type="simple">VarDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-FunctionDecl" xlink:type="simple">FunctionDecl</nt>)</rhs></prod><prod num="27" id="doc-xquery30-CompatibilityAnnotation"><lhs>CompatibilityAnnotation</lhs><rhs>"updating"</rhs></prod><prod num="28" id="doc-xquery30-Annotation"><lhs>Annotation</lhs><rhs>"%"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EQName" xlink:type="simple">EQName</nt>  ("("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Literal" xlink:type="simple">Literal</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Literal" xlink:type="simple">Literal</nt>)*  ")")?</rhs></prod><prod num="167" id="noid_d3e444.doc-xquery30-InlineFunctionExpr"><lhs>InlineFunctionExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-Annotation" xlink:type="simple">Annotation</nt>*  "function"  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ParamList" xlink:type="simple">ParamList</nt>?  ")"  ("as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SequenceType" xlink:type="simple">SequenceType</nt>)?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-FunctionBody" xlink:type="simple">FunctionBody</nt></rhs></prod></scrap><p>
      XQuery Update Facility 3.0 defines the <code>%updating</code> annotation which can be used to declare an <termref def="dt-updating-function">updating function</termref>. The bare keyword <code>updating</code> is
      also allowed on a function declared in the prolog for backwards compatibility with XQuery Update 1.0, and behaves
      exactly as if the <code>%updating</code> annotation was specified instead.
    </p><p>
      For completeness, the <code>%simple</code> annotation is also defined. This can be used to explicitly label
      a <termref def="dt-simple-function">simple function</termref>. A <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-FunctionDecl" xlink:type="simple">FunctionDecl</nt>
      without an <code>%updating</code> or <code>%simple</code> annotation is also considerd a
      <termref def="dt-simple-function">simple function</termref>.
    </p><p>
      If an <code>%updating</code> or <code>%simple</code> annotation is used on a <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-VarDecl" xlink:type="simple">VarDecl</nt>
      a static error is raised <errorref code="0032" class="ST"/>.
      It is a static error to use more than one <code>%updating</code> or <code>%simple</code> annotation in a given annotation set <errorref code="0033" class="ST"/>.
    </p></div3><div3 id="id-match-updating-function"><head>Testing for an Updating Function</head><scrap headstyle="show"><head/><prod num="193" id="doc-xquery30-FunctionTest"><lhs>FunctionTest</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-Annotation" xlink:type="simple">Annotation</nt>*  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-AnyFunctionTest" xlink:type="simple">AnyFunctionTest</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TypedFunctionTest" xlink:type="simple">TypedFunctionTest</nt>)</rhs></prod><prod num="194" id="doc-xquery30-AnyFunctionTest"><lhs>AnyFunctionTest</lhs><rhs>"function"  "("  "*"  ")"</rhs></prod><prod num="195" id="doc-xquery30-TypedFunctionTest"><lhs>TypedFunctionTest</lhs><rhs>"function"  "("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SequenceType" xlink:type="simple">SequenceType</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SequenceType" xlink:type="simple">SequenceType</nt>)*)?  ")"  "as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SequenceType" xlink:type="simple">SequenceType</nt></rhs></prod></scrap><p>
      <termdef term="updating function assertion" id="dt-updating-function-assertion">
        An <term>updating function assertion</term> is a
        <xtermref spec="XQ30" ref="dt-function-assertion">function assertion</xtermref>
        that can be used to control how a <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-FunctionTest" xlink:type="simple">FunctionTest</nt>
        matches <termref def="dt-updating-function">updating functions</termref>.
      </termdef>
      <termref def="dt-updating-function-assertion">Updating function assertions</termref>
      can be added to either allow, prohibit, or require an
      <termref def="dt-updating-function">updating function</termref> that
      matches the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-FunctionTest" xlink:type="simple">FunctionTest</nt>.
      The <termref def="dt-updating-function-assertion">updating function assertions</termref>
      defined are as follows:
    </p><table border="1" summary="Function Assertions for Matching Updating Functions"><tbody><tr><th rowspan="1" colspan="1">Function Assertion</th><th rowspan="1" colspan="1">Matching Behaviour</th><th rowspan="1" colspan="1">Default?</th></tr><tr><td rowspan="1" colspan="1"><code>%simple</code>, or <code>%updating("prohibited")</code></td><td rowspan="1" colspan="1">Matches only <termref def="dt-simple-function">simple functions</termref></td><td rowspan="1" colspan="1">true</td></tr><tr><td rowspan="1" colspan="1"><code>%updating</code>, or <code>%updating("allowed")</code></td><td rowspan="1" colspan="1">Matches both <termref def="dt-simple-function">simple functions</termref> and <termref def="dt-updating-function">updating functions</termref></td><td rowspan="1" colspan="1">false</td></tr><tr><td rowspan="1" colspan="1"><code>%updating("required")</code></td><td rowspan="1" colspan="1">Matches only <termref def="dt-updating-function">updating functions</termref></td><td rowspan="1" colspan="1">false</td></tr></tbody></table><p>
      A <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-FunctionTest" xlink:type="simple">FunctionTest</nt> without an
      <termref def="dt-updating-function-assertion">updating function assertion</termref>
      only matches <term>simple functions</term> as it does in unextended XQuery 3.0.
    </p><p>
      It is a static error to use more than one
      <termref def="dt-updating-function-assertion">updating function assertion</termref>
      in the <xtermref spec="XQ30" ref="dt-function-assertion">function assertion</xtermref> set
      of a <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-FunctionTest" xlink:type="simple">FunctionTest</nt> <errorref code="0034" class="ST"/>.
    </p></div3></div2><div2 id="id-update-operations-pre"><head>Update Operations</head><p>
      XQuery Update Facility 3.0 also defines a set of <termref def="dt-update-operation">update operations</termref>.
      <termdef term="update operation" id="dt-update-operation">
        <term>Update operations</term> are used in defining the semantics of XQuery updates, but are not directly available to users. Update operations are defined in <specref ref="id-update-operations"/>.
      </termdef>
      Update operations fall into the following categories:
    </p><olist><item><p>
          <termdef term="update primitive" id="dt-update-primitive">
            <term>Update primitives</term> are the components of <termref def="dt-pending-update-list">pending update lists</termref>. Each <term>update primitive</term> represents a node state change that has not yet been applied.
          </termdef>
          <termdef term="target node" id="dt-target-node">
            The first argument of an update primitive, called its <term>target node</term>, is the principal node to be affected by the update primitive.
          </termdef>
          Update primitives are held on <termref def="dt-pending-update-list">pending update lists</termref> until they are made effective by a <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-apply-updates" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:applyUpdates</loc> operation.
        </p></item><item><p>
          <termdef term="update routine" id="dt-update-routine">
            <term>Update routines</term> are sequences of actions that are used in the definition of XQuery
            semantics but do not appear on <termref def="dt-pending-update-list">pending update lists</termref>.
          </termdef>
          <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-apply-updates" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:applyUpdates</loc> is an example of an update routine.
        </p></item></olist></div2><div2 id="id-applying-pending-updates"><head>Applying Pending Updates</head><p>
      If the outermost expression in a query returns a non-empty
      <termref def="dt-pending-update-list">pending update list</termref>,
      <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-apply-updates" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:applyUpdates</loc> is implicitly invoked, supplying as arguments
      (a) the <termref def="dt-pending-update-list">pending update list</termref>,
      and (b) the value of the
      <termref def="dt-revalidation-mode">revalidation mode</termref>
      in the static context of the main module. This invocation of
      <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-apply-updates" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:applyUpdates</loc> may raise an error
      (see <specref ref="id-upd-apply-updates"/> for possible error codes.)
    </p><p>
      <termdef id="dt-snapshot" term="snapshot">
        A <term>snapshot</term> is a scope within which expressions are evaluated
        with respect to a fixed <termref def="dt-xdm-instance">XDM instance</termref> and updates are held
        pending.
      </termdef>
      A snapshot is terminated by invocation of the <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-apply-updates" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:applyUpdates</loc>
      operation. XQuery Update Facility 3.0 defines an entire query as one snapshot.
    </p></div2><div2 id="id-revalidation"><head>Revalidation</head><p>
      In general, <termref def="dt-updating-expression">updating expressions</termref> cause a loss of type
      information from nodes that are affected by the update. Type information for these nodes may be recovered
      by a revalidation process at the end of the <termref def="dt-snapshot">snapshot</termref>.
      Revalidation is defined by the <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-revalidate" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:revalidate</loc>
      <termref def="dt-update-routine">update routine</termref>. More information about type loss during
      update operations can be found in <specref ref="id-update-primitives"/>, as well as
      <specref ref="id-upd-remove-type"/>.
    </p></div2></div1><div1 id="id-static-context-extensions"><head>Extensions to the Static Context</head><p>
    The following definitions are added to the XQuery static context
    (documented in <xspecref ref="static_context" spec="XQ30"/>):
  </p><div2 id="id-revalidation-mode"><head>Revalidation Mode</head><p>
      <termdef term="revalidation mode" id="dt-revalidation-mode">
        <term>Revalidation mode</term>, which may be <code>strict</code>, <code>lax</code>, or <code>skip</code>,
        is a component of the static context that controls the behavior of the
        <code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-revalidate" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:revalidate</loc></code> operation.
      </termdef>
    </p><p>
      Support for each of the three revalidation modes is implementation-defined;
      however, an implementation must support at least one of the three revalidation
      modes. If a <specref ref="id-revalidation-declaration"/> specifies a revalidation
      mode that is not supported by the current implementation, a static error is
      raised <errorref code="0026" class="ST"/>.
    </p><p>
      The table of static context components <xspecref ref="id-xq-static-context-components" spec="XQ30"/>
      is augmented with the following new row:
    </p><ulist><item><p>Component: Revalidation mode</p></item><item><p>Default initial value: <code>lax</code>.</p></item><item><p>Can be overwritten or augmented by an implementation: Overwritable (implementation defined.)</p></item><item><p>Can be overwritten or augmented by prolog: Overwritable using a prolog declaration.</p></item><item><p>Can be overwritten or augmented by expressions: No.</p></item><item><p>Consistency rules: Must be <code>strict</code>, <code>lax</code>, or <code>skip</code>.</p></item></ulist></div2></div1><div1 id="id-prolog-extensions"><head>Extensions to the Prolog</head><div2 id="id-revalidation-declaration"><head>Revalidation Declaration</head><scrap headstyle="show"><head/><prod num="8" id="doc-xquery30-Setter"><lhs>Setter</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-BoundarySpaceDecl" xlink:type="simple">BoundarySpaceDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-DefaultCollationDecl" xlink:type="simple">DefaultCollationDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-BaseURIDecl" xlink:type="simple">BaseURIDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ConstructionDecl" xlink:type="simple">ConstructionDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-OrderingModeDecl" xlink:type="simple">OrderingModeDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EmptyOrderDecl" xlink:type="simple">EmptyOrderDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-RevalidationDecl" xlink:type="simple">RevalidationDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-CopyNamespacesDecl" xlink:type="simple">CopyNamespacesDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-DecimalFormatDecl" xlink:type="simple">DecimalFormatDecl</nt></rhs></prod><prod num="198" id="doc-xquery30-RevalidationDecl"><lhs>RevalidationDecl</lhs><rhs>"declare"  "revalidation"  ("strict"  |  "lax"  |  "skip")</rhs></prod></scrap><p>The Prolog is extended by adding a new kind of <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-Setter" xlink:type="simple">Setter</nt>
called a revalidation declaration. 
<termdef term="revalidation declaration" id="dt-revalidation-decl">A <term>revalidation declaration</term>
sets the <termref def="dt-revalidation-mode">revalidation mode</termref> in the static context of the module,
overriding any implementation-defined default.</termdef>
If a Prolog contains more than one revalidation declaration,
a static error is raised <errorref code="0003" class="ST"/>. 
<termref def="dt-revalidation-mode">Revalidation mode</termref> controls the process by which type information
is recovered for an updated document, as described in <specref ref="id-upd-revalidate"/></p></div2><div2 id="id-function-declaration"><head>Function Declaration</head><scrap headstyle="show"><head/><prod num="26" id="noid_d3e894.doc-xquery30-AnnotatedDecl"><lhs>AnnotatedDecl</lhs><rhs>"declare"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-CompatibilityAnnotation" xlink:type="simple">CompatibilityAnnotation</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-Annotation" xlink:type="simple">Annotation</nt>)*  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-VarDecl" xlink:type="simple">VarDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-FunctionDecl" xlink:type="simple">FunctionDecl</nt>)</rhs></prod><prod num="33" id="doc-xquery30-FunctionDecl"><lhs>FunctionDecl</lhs><rhs>"function"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EQName" xlink:type="simple">EQName</nt>  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ParamList" xlink:type="simple">ParamList</nt>?  ")"  ("as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SequenceType" xlink:type="simple">SequenceType</nt>)?  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-FunctionBody" xlink:type="simple">FunctionBody</nt>  |  "external")</rhs></prod><prod num="36" id="doc-xquery30-FunctionBody"><lhs>FunctionBody</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EnclosedExpr" xlink:type="simple">EnclosedExpr</nt></rhs></prod></scrap><p>
    Functions can be declared as <termref def="dt-updating-function">updating functions</termref> using the
    <code>%updating</code> annotation, or the equivalent backwards-compatible bare keyword <code>updating</code>.
    The built-in function <code>fn:put</code> is also specified as an
    <termref def="dt-updating-function">updating function</termref>.
    If a function is not declared with the <code>%updating</code> annotation, or if it is
    declared with the <code>%simple</code> annotation it is a
    <termref def="dt-simple-function">simple function</termref>.
  </p><glist><gitem><label>Category Rules:</label><def><ulist><item><p>
            If a <termref def="dt-simple-function">simple function</termref> is not declared as
            <code>external</code>, its <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-FunctionBody" xlink:type="simple">FunctionBody</nt> must be a
            <termref def="dt-simple-expression">simple expression</termref> <errorref code="0001" class="ST"/>.
          </p></item><item><p>
            If a <termref def="dt-simple-function">simple function</termref> is declared as
            <code>external</code>, evaluation of the external function must not return a non-empty
            <termref def="dt-pending-update-list">pending update list</termref>; otherwise a dynamic error
            is raised <errorref code="0018" class="DY"/>.
          </p></item><item><p>
            An <termref def="dt-updating-function">updating function</termref> may have a
            <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-FunctionBody" xlink:type="simple">FunctionBody</nt> of any category.
          </p></item></ulist></def></gitem><gitem><label>Additional Semantics:</label><def><p>
          XQuery Update Facility 3.0 allows an <termref def="dt-updating-function">updating function</termref> to return both
          a non-empty <termref def="dt-pending-update-list">pending update list</termref> and a non-empty
          <termref def="dt-xdm-instance">XDM instance</termref>.
        </p><p>
          If the result of an <termref def="dt-updating-function">updating function</termref>
          does not match its declared return type (after applying function conversion rules
          as specified in <xspecref spec="XQ" ref="id-function-calls">
          <?xm-replace_text {xspecref}?></xspecref>), a type error is raised <xerrorref spec="XQ" code="0004" class="TY"/>. 
          The default return type of an <termref def="dt-updating-function">updating function</termref>
          is <code>item()*</code>.
        </p><p>
          The means by which an external function returns an <termref def="dt-xdm-instance">XDM instance</termref>
          or a <termref def="dt-pending-update-list">pending update list</termref> is implementation-defined.
        </p></def></gitem><gitem><label>Example:</label><def><ulist><item><p>This function takes an element, a QName, and an atomic value. If the given element has an attribute with the given QName, the function updates the attribute with the given value; otherwise it inserts a new attribute with the given name and value.</p><eg xml:space="preserve">declare %updating function 
   upsert($e as element(), 
          $an as xs:QName, 
          $av as xs:anyAtomicType) 
   {
   let $ea := $e/attribute()[fn:node-name(.) = $an]
   return
      if (fn:empty($ea))
      then insert node attribute {$an} {$av} into $e
      else replace value of node $ea with $av
   }</eg></item></ulist></def></gitem></glist></div2><div2 id="id-variable-declaration"><head>Variable Declaration</head><scrap headstyle="show"><head/><prod num="26" id="noid_d3e1028.doc-xquery30-AnnotatedDecl"><lhs>AnnotatedDecl</lhs><rhs>"declare"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-CompatibilityAnnotation" xlink:type="simple">CompatibilityAnnotation</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-Annotation" xlink:type="simple">Annotation</nt>)*  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-VarDecl" xlink:type="simple">VarDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-FunctionDecl" xlink:type="simple">FunctionDecl</nt>)</rhs></prod><prod num="29" id="doc-xquery30-VarDecl"><lhs>VarDecl</lhs><rhs>"variable"  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarName" xlink:type="simple">VarName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  ((":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-VarValue" xlink:type="simple">VarValue</nt>)  |  ("external"  (":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-VarDefaultValue" xlink:type="simple">VarDefaultValue</nt>)?))</rhs></prod><prod num="30" id="doc-xquery30-VarValue"><lhs>VarValue</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="31" id="doc-xquery30-VarDefaultValue"><lhs>VarDefaultValue</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod></scrap><glist><gitem><label>Category Rules:</label><def><ulist><item><p>
            The <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-VarValue" xlink:type="simple">VarValue</nt> or <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-VarDefaultValue" xlink:type="simple">VarDefaultValue</nt>
            of a variable declaration must be a <termref def="dt-simple-expression">simple expression</termref>
            <errorref code="0001" class="ST"/>.
          </p></item></ulist></def></gitem></glist></div2><div2 id="id-context-item-declaration"><head>Context Item Declaration</head><scrap headstyle="show"><head/><prod num="32" id="doc-xquery30-ContextItemDecl"><lhs>ContextItemDecl</lhs><rhs>"declare"  "context"  "item"  ("as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ItemType" xlink:type="simple">ItemType</nt>)?  ((":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-VarValue" xlink:type="simple">VarValue</nt>)  |  ("external"  (":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-VarDefaultValue" xlink:type="simple">VarDefaultValue</nt>)?))</rhs></prod><prod num="30" id="noid_d3e1058.doc-xquery30-VarValue"><lhs>VarValue</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="31" id="noid_d3e1059.doc-xquery30-VarDefaultValue"><lhs>VarDefaultValue</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod></scrap><glist><gitem><label>Category Rules:</label><def><ulist><item><p>
            The <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-VarValue" xlink:type="simple">VarValue</nt> or <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-VarDefaultValue" xlink:type="simple">VarDefaultValue</nt>
            of a context item declaration must be a <termref def="dt-simple-expression">simple expression</termref>
            <errorref code="0001" class="ST"/>.
          </p></item></ulist></def></gitem></glist></div2></div1><div1 id="id-new-expressions"><head>New Kinds of Expressions</head><scrap headstyle="show"><head/><prod num="41" id="doc-xquery30-ExprSingle"><lhs>ExprSingle</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-FLWORExpr" xlink:type="simple">FLWORExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-QuantifiedExpr" xlink:type="simple">QuantifiedExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-SwitchExpr" xlink:type="simple">SwitchExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TypeswitchExpr" xlink:type="simple">TypeswitchExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-IfExpr" xlink:type="simple">IfExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TryCatchExpr" xlink:type="simple">TryCatchExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-InsertExpr" xlink:type="simple">InsertExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-DeleteExpr" xlink:type="simple">DeleteExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-RenameExpr" xlink:type="simple">RenameExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ReplaceExpr" xlink:type="simple">ReplaceExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-UpdatingFunctionCall" xlink:type="simple">UpdatingFunctionCall</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-CopyModifyExpr" xlink:type="simple">CopyModifyExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-OrExpr" xlink:type="simple">OrExpr</nt></rhs></prod><prod num="108" id="doc-xquery30-SimpleMapExpr"><lhs>SimpleMapExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-PathExpr" xlink:type="simple">PathExpr</nt>  ("!"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-PathExpr" xlink:type="simple">PathExpr</nt>)*</rhs></prod></scrap><p>
  XQuery Update Facility 3.0 adds eight new kinds of expressions. The syntax and semantics of these expressions
  are described in the following sections.
</p><div2 id="id-insert"><head>Insert</head><scrap headstyle="show"><head/><prod num="200" id="doc-xquery30-InsertExpr"><lhs>InsertExpr</lhs><rhs>"insert"  ("node"  |  "nodes")  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-SourceExpr" xlink:type="simple">SourceExpr</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-InsertExprTargetChoice" xlink:type="simple">InsertExprTargetChoice</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TargetExpr" xlink:type="simple">TargetExpr</nt></rhs></prod><prod num="199" id="doc-xquery30-InsertExprTargetChoice"><lhs>InsertExprTargetChoice</lhs><rhs>(("as"  ("first"  |  "last"))?  "into")<br/>|  "after"<br/>|  "before"</rhs></prod><prod num="204" id="doc-xquery30-SourceExpr"><lhs>SourceExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="205" id="doc-xquery30-TargetExpr"><lhs>TargetExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod></scrap><p>An insert expression inserts copies of zero or more nodes into a 
designated position with respect to a target node. The keywords <code>node</code> and <code>nodes</code> may be used interchangeably, regardless of how many nodes are actually inserted. The position of the inserted nodes is determined as follows:</p><ulist><item><p>If <code>before</code> (or <code>after</code>) is specified:</p><ulist><item><p>The inserted nodes become the preceding (or following) siblings of the 
target node.</p></item><item><p>If multiple nodes are inserted by a single insert expression, the nodes 
remain adjacent and their order preserves the node ordering of the source expression.</p></item><item><p>If multiple groups of nodes are inserted by multiple insert expressions 
in the same <termref def="dt-snapshot">snapshot</termref>, adjacency and ordering of nodes within each group is 
preserved but ordering among the groups is implementation-dependent.
</p></item></ulist></item><item><p>If <code>as first into</code> (or <code>as last into</code>) is specified:</p><ulist><item><p>The inserted nodes become the first (or last) children of the target 
node.</p></item><item><p>If multiple nodes are inserted by a single insert expression, the nodes 
remain adjacent and their order preserves the node ordering of the source expression.</p></item><item><p>If multiple groups of nodes are inserted by multiple insert expressions 
in the same <termref def="dt-snapshot">snapshot</termref>, adjacency and ordering of nodes within each group is 
preserved but ordering among the groups is implementation-dependent.</p></item></ulist></item><item><p>If <code>into</code> is specified without <code>as first</code> or <code>as last</code>:</p><ulist><item><p>The inserted nodes become children of the target node.</p></item><item><p>If multiple nodes are inserted by a single insert expression, their 
order preserves the node ordering of the source expression.</p></item><item><p>The positions of the inserted nodes are chosen so as not to  interfere with the intended 
position of nodes that are inserted with the specification <code>before</code>, <code>after</code>, 
<code>as first into</code>, or <code>as last into</code>. For example, If node B is inserted "after node A", 
no other node will be inserted between nodes A and B unless it is also 
inserted "after node A".</p></item><item><p>Subject to the above constraints, the positions of the inserted nodes 
among the children of the target node are implementation-dependent.</p></item></ulist></item></ulist><glist><gitem><label>Category Rules:</label><def><ulist><item><p>
            An insert expression is an <termref def="dt-updating-expression">updating expression</termref>.
          </p></item><item><p>
            The <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-SourceExpr" xlink:type="simple">SourceExpr</nt> and <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TargetExpr" xlink:type="simple">TargetExpr</nt> can be
            expressions of any category.
          </p></item></ulist></def></gitem><gitem><label>Semantics:</label><def><olist><item><p><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-SourceExpr" xlink:type="simple">SourceExpr</nt> is evaluated as though it were an enclosed 
expression in an element constructor (see Rule 1e in <xspecref spec="XQ30" ref="id-content"/>). The result of this step is either an error or a 
sequence of nodes to be inserted, called the <term>insertion sequence</term>. If the insertion sequence contains a document node, the document node is replaced in the insertion sequence by its children. If the insertion sequence contains an attribute node following a node that is not an attribute node, a type error is raised <errorref code="0004" class="TY"/>. Let <code>$alist</code> be the sequence of attribute nodes in the insertion sequence. Let <code>$clist</code> be the remainder of the insertion sequence, in its original order.</p><note><p>Either <code>$alist</code> or <code>$clist</code> or both may be empty.</p></note></item><item><p><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TargetExpr" xlink:type="simple">TargetExpr</nt> is evaluated and checked as follows:</p><olist><item><p>If the result is an empty sequence, <errorref code="0027" class="DY"/> is raised.</p></item><item><p>If any form of <code>into</code> is specified, 
the result must be a single element or document node; any other non-empty result raises a type error <errorref code="0005" class="TY"/>.</p></item><item><p>If <code>before</code> or <code>after</code> 
is specified, the result must be a single element, text, comment, or processing instruction node; any other non-empty result raises a type error  <errorref code="0006" class="TY"/>.</p></item><item><p>If <code>before</code> or <code>after</code> 
is specified, the node returned by the target expression must have a non-empty <code>parent</code> property <errorref code="0029" class="DY"/>.</p></item></olist><p>  Let 
<code>$target</code> be the  node returned by the target expression.</p></item><item><p>If <code>$alist</code> is not empty and any form of <code>into</code> is specified, the following checks are performed:</p><olist><item><p><code>$target</code> must be an element node <errorref code="0022" class="TY"/>.</p></item><item><p>No attribute node in <code>$alist</code> may have a QName whose <termref def="dt-implied-namespace-binding">implied namespace binding</termref> <termref def="dt-conflict">conflicts</termref> with a namespace binding in the "namespaces" property of <code>$target</code> <errorref code="0023" class="DY"/>.</p></item><item><p>Multiple attribute nodes in <code>$alist</code> may not have QNames whose <termref def="dt-implied-namespace-binding">implied namespace bindings</termref> <termref def="dt-conflict">conflict</termref> with each other <errorref code="0024" class="DY"/>.</p></item></olist></item><item><p>If <code>$alist</code> is not empty and <code>before</code> or <code>after</code> is specified, the following checks are performed:</p><olist><item><p> <code>parent($target)</code> must be an element node <errorref code="0030" class="DY"/>.</p></item><item><p>No attribute node in <code>$alist</code> may have a QName whose <termref def="dt-implied-namespace-binding">implied namespace binding</termref> <termref def="dt-conflict">conflicts</termref> with a namespace binding in the "namespaces" property of <code>parent($target)</code> <errorref code="0023" class="DY"/>.</p></item><item><p>Multiple attribute nodes in <code>$alist</code> may not have QNames whose <termref def="dt-implied-namespace-binding">implied namespace bindings</termref> <termref def="dt-conflict">conflict</termref> with each other <errorref code="0024" class="DY"/>.</p></item></olist></item><item><p>
  The result of the insert expression is an empty <termref def="dt-xdm-instance">XDM instance</termref>
  and a <termref def="dt-pending-update-list">pending update list</termref> constructed
  
  by merging the <termref def="dt-pending-update-list">pending update lists</termref> returned
  by the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-SourceExpr" xlink:type="simple">SourceExpr</nt> and <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TargetExpr" xlink:type="simple">TargetExpr</nt> with the following
  <termref def="dt-update-primitive">update primitives</termref>
  using <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-merge-updates" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:mergeUpdates</loc>:
</p><olist><item><p>If <code>as first into</code> is specified, the <termref def="dt-pending-update-list">pending update list</termref> includes the following <termref def="dt-update-primitive">update primitives</termref>:</p><olist><item><p>If <code>$alist</code> is not empty, <code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-insert-attributes" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:insertAttributes</loc>($target, $alist)</code></p></item><item><p>If <code>$clist</code> is not empty, <code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-insert-into-as-first" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:insertIntoAsFirst</loc>($target, $clist)</code></p></item></olist></item><item><p>If <code>as last into</code> is specified, the <termref def="dt-pending-update-list">pending update list</termref> includes the following <termref def="dt-update-primitive">update primitives</termref>:</p><olist><item><p>If <code>$alist</code> is not empty, <code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-insert-attributes" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:insertAttributes</loc>($target, $alist)</code></p></item><item><p>If <code>$clist</code> is not empty, <code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-insert-into-as-last" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:insertIntoAsLast($target, $clist)</loc></code></p></item></olist></item><item><p>If <code>into</code> is specified with neither <code>as first</code> nor <code>as last</code>, the <termref def="dt-pending-update-list">pending update list</termref> includes the following <termref def="dt-update-primitive">update primitives</termref>:</p><olist><item><p>If <code>$alist</code> is not empty, <code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-insert-attributes" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:insertAttributes</loc>($target, $alist)</code></p></item><item><p>If <code>$clist</code> is not empty, <code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-insert-into" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:insertInto</loc>($target, $clist)</code></p></item></olist></item><item><p>If <code>before</code> is specified, let <code>$parent</code> be the parent node of <code>$target</code>. The <termref def="dt-pending-update-list">pending update list</termref> includes the following <termref def="dt-update-primitive">update primitives</termref>:</p><olist><item><p>If <code>$alist</code> is not empty, <code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-insert-attributes" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:insertAttributes</loc>($parent, $alist)</code></p></item><item><p>If <code>$clist</code> is not empty, <code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-insert-before" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:insertBefore($target, $clist)</loc></code></p></item></olist></item><item><p>If <code>after</code> is specified, let <code>$parent</code> be the parent node of <code>$target</code>. The <termref def="dt-pending-update-list">pending update list</termref> includes the following <termref def="dt-update-primitive">update primitives</termref>:</p><olist><item><p>If <code>$alist</code> is not empty, <code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-insert-attributes" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:insertAttributes</loc>($parent, $alist)</code></p></item><item><p>If <code>$clist</code> is not empty, <code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-insert-after" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:insertAfter</loc>($target, $clist)</code></p></item></olist></item></olist></item></olist></def></gitem><gitem><label>Examples:</label><def><ulist><item><p>Insert a <code>year</code> element after the publisher of the first book.</p><eg xml:space="preserve">insert node &lt;year&gt;2005&lt;/year&gt;
    after fn:doc("bib.xml")/books/book[1]/publisher</eg></item><item><p>Navigating by means of several bound variables, insert a new police report into the list of police reports for a particular accident.</p><eg xml:space="preserve">insert node $new-police-report
   as last into fn:doc("insurance.xml")/policies
      /policy[id = $pid]
      /driver[license = $license]
      /accident[date = $accdate]
      /police-reports</eg></item></ulist></def></gitem></glist></div2><div2 id="id-delete"><head>Delete</head><scrap headstyle="show"><head/><prod num="201" id="doc-xquery30-DeleteExpr"><lhs>DeleteExpr</lhs><rhs>"delete"  ("node"  |  "nodes")  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TargetExpr" xlink:type="simple">TargetExpr</nt></rhs></prod><prod num="205" id="noid_d3e1625.doc-xquery30-TargetExpr"><lhs>TargetExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod></scrap><p>A delete expression deletes zero or more nodes from an <termref def="dt-xdm-instance">XDM instance</termref>. 
The keywords <code>node</code> and <code>nodes</code> may be used interchangeably, regardless of how many nodes are actually deleted.</p><glist><gitem><label>Category Rules:</label><def><ulist><item><p>
            A delete expression is an <termref def="dt-updating-expression">updating expression</termref>.
          </p></item><item><p>
            The <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TargetExpr" xlink:type="simple">TargetExpr</nt> can be an expression of any category.
          </p></item></ulist></def></gitem><gitem><label>Semantics:</label><def><olist><item><p><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TargetExpr" xlink:type="simple">TargetExpr</nt> is evaluated. The result must be a 
sequence of zero or more nodes; otherwise a type error is raised <errorref code="0007" class="TY"/>. 
Let <code>$tlist</code> be the list of nodes returned by 
the target expression.</p></item><item><p>If any node in <code>$tlist</code> has no parent, 
it is removed from <code>$tlist</code> (and is thus ignored in the following step).
</p></item><item><p>A new <termref def="dt-pending-update-list">pending update list</termref> is created. For each node 
<code>$tnode</code> in <code>$tlist</code>, the following
<termref def="dt-update-primitive">update primitive</termref> is appended to the pending update list:
<code>upd:delete($tnode)</code>. The resulting pending update list
is merged with the <termref def="dt-pending-update-list">pending update list</termref> returned
by the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TargetExpr" xlink:type="simple">TargetExpr</nt> using <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-merge-updates" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:mergeUpdates</loc>, and

together with an empty <termref def="dt-xdm-instance">XDM instance</termref> forms the result of the delete expression.</p></item></olist></def></gitem><gitem><label>Examples:</label><def><ulist><item><p>Delete the last author of the first book in a given bibliography.</p><eg xml:space="preserve">delete node fn:doc("bib.xml")/books/book[1]/author[last()]</eg></item><item><p>Delete all email messages that are more than 365 days old.</p><eg xml:space="preserve">delete nodes /email/message
     [fn:currentDate() - date &gt; xs:dayTimeDuration("P365D")]</eg></item></ulist></def></gitem></glist><notes><ulist><item><p>Since node deletions do not become effective until the end of a <termref def="dt-snapshot">snapshot</termref>, they have no effect on variable bindings or on the set of available documents or collections within the current query.</p></item><item><p>The semantics of a delete expression are defined in terms of their effect on an  <termref def="dt-xdm-instance">XDM instance</termref>: the deleted nodes are detached from their parents after completion of the current query. The effects of a delete expression on persistent storage are beyond the scope of this specification.</p></item></ulist></notes></div2><div2 id="id-replace"><head>Replace</head><scrap headstyle="show"><head/><prod num="202" id="doc-xquery30-ReplaceExpr"><lhs>ReplaceExpr</lhs><rhs>"replace"  ("value"  "of")?  "node"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TargetExpr" xlink:type="simple">TargetExpr</nt>  "with"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="205" id="noid_d3e1748.doc-xquery30-TargetExpr"><lhs>TargetExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod></scrap><p>A replace expression has two forms, depending on whether <code>value of</code> is specified.</p><div3 id="id-replacing-node"><head>Replacing a Node</head><p>If <code>value of</code> is not specified, a replace expression 
 replaces one node with a new sequence of zero or more nodes. The replacement nodes occupy the position in the node hierarchy that was formerly occupied by the node that was replaced. For this reason, an attribute node can be replaced only by zero or more attribute nodes, and an element, text, comment, or processing instruction node can be replaced only by zero or more element, text, comment, or processing instruction nodes.</p><glist><gitem><label>Category Rules:</label><def><ulist><item><p>
            A replace expression without <code>value of</code> specified is an <termref def="dt-updating-expression">updating expression</termref>. 
          </p></item><item><p>
            The <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TargetExpr" xlink:type="simple">TargetExpr</nt> and expression following the keyword <code>with</code> can be
            expressions of any category.
          </p></item></ulist></def></gitem><gitem><label>Semantics:</label><def><olist><item><p>The expression following the keyword <code>with</code> is evaluated as though it were an enclosed 
expression in an element constructor (see Rule 1e in <xspecref spec="XQ30" ref="id-content"/>). Let <code>$rlist</code> be the node sequence that results from this evaluation. If <code>$rlist</code> contains a document node, the document node is replaced in <code>$rlist</code> by its children.</p></item><item><p><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TargetExpr" xlink:type="simple">TargetExpr</nt> is evaluated and checked as follows:</p><olist><item><p>If the result is an empty sequence, <errorref code="0027" class="DY"/> is raised.</p></item><item><p>If the result is non-empty and does not consist of a single element, attribute, text, comment, or processing instruction node, <errorref code="0008" class="TY"/> is raised.</p></item><item><p>If the result consists of a node whose parent property is empty, <errorref code="0009" class="DY"/> is raised.</p></item></olist><p>  Let 
<code>$target</code> be the  node returned by the target expression, and let <code>$parent</code> be its parent node.</p></item><item><p>If <code>$target</code> is an element, text, comment, or processing 
instruction node, then <code>$rlist</code> must consist exclusively of zero or more element, text, comment, or processing instruction nodes <errorref code="0010" class="TY"/>.</p></item><item><p>If <code>$target</code> is an attribute node, then:</p><olist><item><p> <code>$rlist</code> must consist exclusively of zero or more attribute nodes <errorref code="0011" class="TY"/>.</p></item><item><p>No attribute node in <code>$rlist</code> may have a QName whose <termref def="dt-implied-namespace-binding">implied namespace binding</termref> <termref def="dt-conflict">conflicts</termref> with a namespace binding in the "namespaces" property of <code>$parent</code> <errorref code="0023" class="DY"/>.</p></item><item><p>Multiple attribute nodes in <code>$rlist</code> may not have QNames whose <termref def="dt-implied-namespace-binding">implied namespace bindings</termref> <termref def="dt-conflict">conflict</termref> with each other <errorref code="0024" class="DY"/>.</p></item></olist></item><item><p>
  The result of the replace expression is an empty <termref def="dt-xdm-instance">XDM instance</termref>
  and a <termref def="dt-pending-update-list">pending update list</termref>

  

  constructed
  by merging the <termref def="dt-pending-update-list">pending update lists</termref> returned
  by the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TargetExpr" xlink:type="simple">TargetExpr</nt> and the expression following the keyword <code>with</code>
  with the following <termref def="dt-update-primitive">update primitives</termref>
  using <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-merge-updates" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:mergeUpdates</loc>:
  <code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-replacenode" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:replaceNode</loc>($target, $rlist)</code>
</p></item></olist></def></gitem><gitem><label>Example:</label><def><p>Replace the publisher of the first book with the publisher of the second book.</p><eg xml:space="preserve">replace node fn:doc("bib.xml")/books/book[1]/publisher
with fn:doc("bib.xml")/books/book[2]/publisher</eg></def></gitem></glist></div3><div3 id="id-replacing-node-value"><head>Replacing the Value of a Node</head><p>If <code>value of</code> is specified, 
a replace expression is used to modify the value of a node while preserving 
its <termref def="dt-node-identity">node identity</termref>.</p><glist><gitem><label>Category Rules:</label><def><ulist><item><p>
            A replace expression with <code>value of</code> specified is an <termref def="dt-updating-expression">updating expression</termref>. 
          </p></item><item><p>
            The <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TargetExpr" xlink:type="simple">TargetExpr</nt> and expression following the keyword <code>with</code> can be
            expressions of any category.
          </p></item></ulist></def></gitem><gitem><label>Semantics:</label><def><olist><item><p>The expression following the keyword <code>with</code> is evaluated as though it were the content 
expression of a text node constructor (see  Section 3.7.3.4 of 
<bibref ref="xquery-30"/>.) The result of this step, in the absence of errors, is 
either a single text node or an empty sequence. Let <code>$text</code> be the result of this step. 
</p></item><item><p><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TargetExpr" xlink:type="simple">TargetExpr</nt> is evaluated and checked as follows:</p><olist><item><p>If the result is an empty sequence, <errorref code="0027" class="DY"/> is raised.</p></item><item><p>If the result is non-empty and does not consist of a single element, attribute, text, comment, or processing instruction node, <errorref code="0008" class="TY"/> is raised.</p></item></olist><p>  Let 
<code>$target</code> be the  node returned by the target expression.</p></item><item><p>
    If <code>$target</code> is an element node, the result of the replace 
    expression is an empty <termref def="dt-xdm-instance">XDM instance</termref> and a
    <termref def="dt-pending-update-list">pending update list</termref>

    

    constructed
    by merging the <termref def="dt-pending-update-list">pending update lists</termref> returned
    by the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TargetExpr" xlink:type="simple">TargetExpr</nt> and the expression following the keyword <code>with</code>
    with the following <termref def="dt-update-primitive">update primitives</termref>
    using <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-merge-updates" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:mergeUpdates</loc>:
    <code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-replace-element-content" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:replaceElementContent</loc>($target, $text)</code>
  </p></item><item><p>If <code>$target</code> is an attribute, text, comment, or processing 
instruction node, let <code>$string</code> be the string value of the text node 
constructed in Step 1. If Step 1 did not construct 
a text node, let <code>$string</code> be a zero-length string.

Then:</p><olist><item><p>If <code>$target</code> is a comment node, and <code>$string</code> contains two adjacent hyphens or ends with a hyphen, a dynamic error is raised <errorref code="0072" class="DY"/>.</p></item><item><p>If <code>$target</code> is a processing instruction node, and <code>$string</code> contains the substring "<code>?&gt;</code>", a dynamic error is raised <errorref code="0026" class="DY"/>.</p></item><item><p>
  In the absence of errors, the result of a replace expression is an empty
  <termref def="dt-xdm-instance">XDM instance</termref> and a
  <termref def="dt-pending-update-list">pending update list</termref>

  

  constructed
  by merging the <termref def="dt-pending-update-list">pending update lists</termref> returned
  by the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TargetExpr" xlink:type="simple">TargetExpr</nt> and the expression following the keyword <code>with</code>
  with the following <termref def="dt-update-primitive">update primitives</termref>
  using <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-merge-updates" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:mergeUpdates</loc>:
  <code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-replace-value" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:replaceValue</loc>($target, $string)</code>.
</p></item></olist></item></olist></def></gitem><gitem><label>Examples:</label><def><p>Increase the price of the first book by ten percent.</p><eg xml:space="preserve">replace value of node fn:doc("bib.xml")/books/book[1]/price
with fn:doc("bib.xml")/books/book[1]/price * 1.1</eg></def></gitem></glist></div3></div2><div2 id="id-rename"><head>Rename</head><scrap headstyle="show"><head/><prod num="203" id="doc-xquery30-RenameExpr"><lhs>RenameExpr</lhs><rhs>"rename"  "node"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TargetExpr" xlink:type="simple">TargetExpr</nt>  "as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-NewNameExpr" xlink:type="simple">NewNameExpr</nt></rhs></prod><prod num="205" id="noid_d3e2138.doc-xquery30-TargetExpr"><lhs>TargetExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="206" id="doc-xquery30-NewNameExpr"><lhs>NewNameExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod></scrap><p>A rename expression replaces the <code>name</code> property of a <termref def="dt-data-model-30">data model</termref> node with a 
new QName.</p><glist><gitem><label>Category Rules:</label><def><ulist><item><p>
            A rename expression is an <termref def="dt-updating-expression">updating expression</termref>. 
          </p></item><item><p>
            The <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-NewNameExpr" xlink:type="simple">NewNameExpr</nt> and <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TargetExpr" xlink:type="simple">TargetExpr</nt> can be
            expressions of any category.
          </p></item></ulist></def></gitem><gitem><label>Semantics:</label><def><olist><item><p><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TargetExpr" xlink:type="simple">TargetExpr</nt> is evaluated and checked as follows:</p><olist><item><p>If the result is an empty sequence, <errorref code="0027" class="DY"/> is raised.</p></item><item><p>If the result is non-empty and does not consist of a single element, attribute, or processing instruction node, <errorref code="0012" class="TY"/> is raised.</p></item></olist><p>  Let 
<code>$target</code> be the  node returned by the target expression.</p></item><item><p><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-NewNameExpr" xlink:type="simple">NewNameExpr</nt> is processed as follows:</p><olist><item><p>If <code>$target</code> is an element node, let <code>$QName</code> be the result of evaluating
<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-NewNameExpr" xlink:type="simple">NewNameExpr</nt> as though it were the name expression of a computed element
constructor  (see <xspecref spec="XQ30" ref="id-computedElements"/>). If the namespace binding of <code>$QName</code>
conflicts with any namespace binding in the <code>namespaces</code> property of <code>$target</code>, a
dynamic error is raised <errorref code="0023" class="DY"/>.</p></item><item><p>If <code>$target</code> is an attribute node, let <code>$QName</code> be the result of evaluating
<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-NewNameExpr" xlink:type="simple">NewNameExpr</nt> as though it were the name expression of a computed attribute
constructor (see <xspecref spec="XQ30" ref="id-computedAttributes"/>). If <code>$QName</code> has a non-absent namespace URI, and if the namespace binding of <code>$QName</code>
conflicts with any namespace binding in the <code>namespaces</code> property of the parent
(if any) of <code>$target</code>, a dynamic error is raised <errorref code="0023" class="DY"/>.</p></item><item><p>If <code>$target</code> is a processing instruction node, let <code>$NCName</code> be the result of
evaluating <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-NewNameExpr" xlink:type="simple">NewNameExpr</nt> as though it were the name expression of a computed
processing instruction constructor (see <xspecref spec="XQ30" ref="id-computed-pis"/>), and let <code>$QName</code> be
defined as <code>fn:QName((), $NCName)</code>.</p></item></olist></item><item><p>
    The result of the rename expression is an empty <termref def="dt-xdm-instance">XDM instance</termref> and a <termref def="dt-pending-update-list">pending update list</termref> 

    

    constructed
    by merging the <termref def="dt-pending-update-list">pending update lists</termref> returned
    by the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-NewNameExpr" xlink:type="simple">NewNameExpr</nt> and <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TargetExpr" xlink:type="simple">TargetExpr</nt>
    with the following <termref def="dt-update-primitive">update primitives</termref>
    using <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-merge-updates" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:mergeUpdates</loc>:
    <code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-rename" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:rename</loc>($target, $QName)</code>.
  </p></item></olist></def></gitem><gitem><label>Examples:</label><def><ulist><item><p>Rename the first <code>author</code> element of the first book to <code>principal-author</code>.</p><eg xml:space="preserve">rename node fn:doc("bib.xml")/books/book[1]/author[1]
as "principal-author"</eg></item><item><p>Rename the first <code>author</code> element of the first book to the QName that is the value of the variable <code>$newname</code>.</p><eg xml:space="preserve">rename node fn:doc("bib.xml")/books/book[1]/author[1]
as $newname</eg></item></ulist></def></gitem></glist><note><p>The effects of a rename expression are limited to its target node. Attributes and descendants of the target node are not affected. If a global change of names or namespaces is intended, some form of explicit iteration must be used. The following example illustrates such a global change. The example operates on the node bound to variable <code>$root</code> and all its attributes and descendants, changing all QNames with the prefix <code>abc</code> to have a new prefix <code>xyz</code> and a new namespace URI <code>http://xyz/ns</code>.
<eg xml:space="preserve">for $node in $root//abc:*
let $localName := fn:local-name($node),
    $newQName := fn:concat("xyz:", $localName)
return (
   rename node $node as fn:QName("http://xyz/ns", $newQName),
   for $attr in $node/@abc:*
   let $attrLocalName := fn:local-name($attr),
       $attrNewQName := fn:concat("xyz:", $attrLocalName)
   return
      rename node $attr as fn:QName("http://xyz/ns", $attrNewQName)
)</eg></p></note></div2><div2 id="id-dynamic-updating-function-invocation"><head>Dynamic Updating Function Invocation</head><scrap headstyle="show"><head/><prod num="207" id="doc-xquery30-UpdatingFunctionCall"><lhs>UpdatingFunctionCall</lhs><rhs>"invoke"  "updating"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-PrimaryExpr" xlink:type="simple">PrimaryExpr</nt>  "("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt>)*)?  ")"</rhs></prod></scrap><p>
    A dynamic updating function call dynamically invokes an
    <termref def="dt-updating-function">updating function</termref>.
    A dynamic updating function call is constrained by the grammar so that it cannot be
    a <xtermref spec="XQ30" ref="dt-partial-function-application"/>.
  </p><glist><gitem><label>Category Rules:</label><def><ulist><item><p>
            A dynamic updating function call is an <termref def="dt-updating-expression">updating expression</termref>.
          </p></item><item><p>
            The PrimaryExpr and any <xtermref spec="XQ30" ref="dt-arg-expr">argument expressions</xtermref> can be expressions of any category.
          </p></item></ulist></def></gitem><gitem><label>Semantics:</label><def><p>
          A dynamic updating function call is evaluated like a dynamic function invocation,
          as specified in <xspecref spec="XQ30" ref="id-dynamic-function-invocation"/>.
          However unlike <specref ref="id-dynamic-function-invocation"/>
          it can invoke either an <termref def="dt-updating-function">updating function</termref>
          or a <termref def="dt-simple-function">simple function</termref>,
          and could therefore potentially return a non-empty
          <termref def="dt-pending-update-list">pending update list</termref>.
        </p><p>
          The result of the dynamic updating function call is the
          <termref def="dt-xdm-instance">XDM instance</termref> returned by the function invoked, as
          well as a <termref def="dt-pending-update-list">pending update list</termref> 
          constructed
          by merging the <termref def="dt-pending-update-list">pending update lists</termref> returned
          by the PrimaryExpr and any <xtermref spec="XQ30" ref="dt-arg-expr">argument expressions</xtermref>,
          with the <termref def="dt-pending-update-list">pending update list</termref> returned by the function
          invoked using <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-merge-updates" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:mergeUpdates</loc>.
        </p></def></gitem><gitem><label>Example:</label><def><ulist><item><p>Dynamically call the <code>fn:put()</code> function.</p><eg xml:space="preserve">let $f := fn:put#2
return invoke updating $f(&lt;newnode/&gt;,"newnode.xml")</eg></item></ulist></def></gitem></glist></div2><div2 id="id-copy-modify"><head>Copy Modify</head><scrap headstyle="show"><head/><prod num="208" id="doc-xquery30-CopyModifyExpr"><lhs>CopyModifyExpr</lhs><rhs>"copy"  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarName" xlink:type="simple">VarName</nt>  ":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt>  (","  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarName" xlink:type="simple">VarName</nt>  ":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt>)*  "modify"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt>  "return"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod></scrap><p>
  A copy modify expression can be used to create modified copies of existing nodes in an
  <termref def="dt-xdm-instance">XDM instance</termref>. Each node created by a copy modify expression has a
  new <termref def="dt-node-identity">node identity</termref>. The result of a copy modify expression is
  an <termref def="dt-xdm-instance">XDM instance</termref> that may include both nodes that were created by
  the copy modify expression and other, previously existing nodes.
</p><p>
  A copy modify expression consists of three clauses, denoted by the keywords <code>copy</code>, <code>modify</code>, and <code>return</code>.
</p><glist><gitem><label>Category Rules:</label><def><ulist><item><p>
            If all of the copy modify expression's <code>copy</code> and <code>return</code> clauses have operand
            expressions that are <termref def="dt-simple-expression">simple expressions</termref>,
            then the copy modify expression is a <termref def="dt-simple-expression">simple expression</termref>.
          </p></item><item><p>
            If any of the copy modify expression's <code>copy</code> or <code>return</code> clauses have operand
            expressions that are <termref def="dt-updating-expression">updating expressions</termref>,
            then the copy modify expression is a <termref def="dt-updating-expression">updating expression</termref>.
          </p></item><item><p>
            The operand expressions of any of the clauses of a copy modify expression can be expressions
            of any category.
          </p></item></ulist></def></gitem><gitem><label>Semantics:</label><def><olist><item><p>The <code>copy</code> clause contains one or more variable bindings, each of which consists of a variable name and an expression called the <term>source expression</term>. Each variable binding is processed as follows:</p><olist><item><p>The result of evaluating the source expression must be a single node <errorref code="0013" class="TY"/>. Let <code>$node</code> be this single node.</p></item><item><p>A new copy is made of <code>$node</code> and all nodes that have <code>$node</code> as an ancestor,
collectively referred to as <term>copied nodes</term>. Each copied node receives a new node
identity. The <code>parent</code>, <code>children</code>, and <code>attributes</code> properties of the copied nodes
are set so as to preserve their inter-node relationships. 

The parent property of the copy of <code>$node</code> is set
to empty.

Other properties of the copied nodes are determined as follows:</p><olist><item><p>
    For a copied document node, the <code>document-uri</code> property is set to empty.
  </p></item><item><p>For a copied element node, the <code>type-name</code> property is set to <code>xs:untyped</code>,
and the <code>nilled</code>, <code>is-id</code>, and <code>is-idrefs</code> properties are set to <code>false</code>.</p></item><item><p>For a copied attribute node, the <code>type-name</code> property is set to
<code>xs:untypedAtomic</code> and the <code>is-idrefs</code> property is set to <code>false</code>. The <code>is-id</code> property
is set to <code>true</code> if the qualified name of the attribute node is <code>xml:id</code>; otherwise
it is set to <code>false</code>.</p></item><item><p>The <code>string-value</code> of each copied element and attribute node remains
unchanged, and its typed value becomes equal to its string value as an instance
of <code>xs:untypedAtomic</code>.</p><note><p>Implementations that store only the typed value of a
node are required at this point to convert the typed value to a string form.</p></note></item><item><p>If <code>copy-namespaces mode</code> in the static context specifies <code>preserve</code>, all in-scope-namespaces of the original element are
retained in the new copy. If <code>copy-namespaces</code> mode specifies <code>no-preserve</code>, the new copy retains only those in-scope namespaces of the original element that are used in the names of the element and its
     attributes.</p></item><item><p>All other properties of the copied nodes are preserved.</p></item></olist></item><item><p>The variable name is bound to the top-level copied node generated in the
previous step. The scope of this variable binding includes all subexpressions
of the containing copy modify expression that appear after the variable binding
clause, including the source expressions of later variable bindings, but it
does not include the source expression to which the current variable name is
bound.</p></item></olist></item><item><p>
    The expression in the <code>modify</code> clause is evaluated, resulting in a
    <termref def="dt-pending-update-list">pending update list</termref> (denoted <code>$pul</code>)
    and an <termref def="dt-xdm-instance">XDM instance</termref>. The
    <termref def="dt-xdm-instance">XDM instance</termref> is discarded, and does not form part
    of the result of the copy modify expression.
  </p><p>
    If the <termref def="dt-target-node">target node</termref> of any
    <termref def="dt-update-primitive">update primitive</termref> in <code>$pul</code> is a node that
    was not newly created in Step 1, a dynamic error is raised <errorref code="0014" class="DY"/>.
    If <code>$pul</code> contains a <code>upd:put</code>
    <termref def="dt-update-primitive">update primitive</termref>, a dynamic error is raised
    <errorref code="0037" class="DY"/>.
  </p></item><item><p>Let <code>$revalidation-mode</code> be the value of
the revalidation mode in the static context of
the library or main module containing
the copy modify expression, and <code>$inherit-namespaces</code> be the
value of inherit-namespaces in the static context of the copy modify
expression.

The following <termref def="dt-update-operation">update operation</termref> is invoked: <code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-apply-updates" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:applyUpdates</loc>($pul, $revalidation-mode, $inherit-namespaces)</code>. The effect of this operation is to make the updates specified in the <code>modify</code> clause effective on the copied nodes.</p><note><p>In the event of incompatible updates, the <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-apply-updates" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:applyUpdates</loc> operation may raise an error, as described in <specref ref="id-upd-apply-updates"/>.</p></note></item><item><p>
    The <code>return</code> clause is evaluated, resulting in a
    <termref def="dt-pending-update-list">pending update list</termref>
    and an <termref def="dt-xdm-instance">XDM instance</termref>.
    The result of the copy modify expression is the 
    <termref def="dt-xdm-instance">XDM instance</termref> returned, as well as a 
    <termref def="dt-pending-update-list">pending update list</termref> constructed by
    merging the <termref def="dt-pending-update-list">pending update lists</termref> returned
    by any of the copy modify expression's <code>copy</code> or <code>return</code> clause operand
    expressions using <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-merge-updates" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:mergeUpdates</loc>.
    During evaluation of the <code>return</code> clause, changes applied to copied nodes by the preceding
    step are visible.
  </p></item></olist></def></gitem><gitem><label>Examples:</label><def><ulist><item><p>Return a sequence consisting of all <code>employee</code> elements that have Java as a skill, excluding their <code>salary</code> child-elements:</p><eg xml:space="preserve">for $e in //employee[skill = "Java"]
return 
   copy $je := $e
   modify delete node $je/salary
   return $je</eg></item><item><p>The following example copies a node, modifies the copy, and returns both the original node and the modified copy:</p><eg xml:space="preserve">let $oldx := /a/b/x
return
   copy $newx := $oldx
   modify (rename node $newx as "newx", 
           replace value of node $newx with $newx * 2)
   return ($oldx, $newx)
</eg><note><p>No persistent changes to the underlying data result from this example.</p></note></item></ulist></def></gitem></glist></div2><div2 id="id-transform-with"><head>Transform With</head><scrap headstyle="show"><head/><prod num="97" id="doc-xquery30-TransformWithExpr"><lhs>TransformWithExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-UnaryExpr" xlink:type="simple">UnaryExpr</nt> ( "transform"  "with"  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-Expr" xlink:type="simple">Expr</nt>?  "}" )?</rhs></prod></scrap><!-- TBD Is the precedence correct? - jpcs --><p>
            The <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TransformWithExpr" xlink:type="simple">TransformWithExpr</nt> is a convenient short hand for the common
            use case of wanting to apply updates to a copy of a single node. If <emph>N</emph> and <emph>U</emph> are arbitrary
            expressions, and <code>$v</code> is a variable name that is otherwise unused in <emph>U</emph>, then the
            following <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TransformWithExpr" xlink:type="simple">TransformWithExpr</nt>:
          </p><eg xml:space="preserve"><emph>N</emph> transform with { <emph>U</emph> }</eg><p>
            is equivalent to the following longer form <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-CopyModifyExpr" xlink:type="simple">CopyModifyExpr</nt>:
          </p><eg xml:space="preserve">copy $v := <emph>N</emph>
modify $v!(<emph>U</emph>)
return $v</eg></div2><div2 id="id-compatibility"><head>Compatibility of Updating Expressions</head><p>The rules defining compatibility of <termref def="dt-updating-expression">updating expressions</termref> within a <termref def="dt-snapshot">snapshot</termref> are defined in <specref ref="id-upd-apply-updates"/>.</p><note><p>The effect of these rules is as follows:</p><olist><item><p>If any node is affected by more than one <code>rename</code> expression within a  <termref def="dt-snapshot">snapshot</termref>, a dynamic error is raised <errorref code="0015" class="DY"/>.</p></item><item><p>If any node is affected by more than one <code>replace</code> expression (without <code>value of</code> being specified) within a  <termref def="dt-snapshot">snapshot</termref>, a dynamic error is raised <errorref code="0016" class="DY"/>.</p></item><item><p>If any node is affected by more than one <code>replace value of</code> expression within a  <termref def="dt-snapshot">snapshot</termref>, a dynamic error is raised <errorref code="0017" class="DY"/>.</p></item><item><p>If multiple calls to <code>fn:put</code> operate on the same URI in the same <termref def="dt-snapshot">snapshot</termref>, a dynamic error is raised <errorref code="0031" class="DY"/>.</p></item><item><p>Within a given <termref def="dt-snapshot">snapshot</termref>, if an element node <code>E</code> is the target of a <code>replace value of</code> expression, and the children of <code>E</code> are also modified by other expressions, the final children of <code>E</code> are determined by the <code>replace value of</code> expression. For example:</p><ulist><item><p>Suppose that <code>$A</code> is bound to an element node that has a child element named <code>B</code>. Suppose that the following expressions are evaluated in the same <termref def="dt-snapshot">snapshot</termref>:</p><eg xml:space="preserve">replace node $A/B with &lt;C&gt;Hello&lt;/C&gt;,
replace value of node $A with &lt;D&gt;Goodbye&lt;/D&gt;</eg><p>The expressions on the left and right side of the comma can be evaluated in any order. No error is raised. At the end of the <termref def="dt-snapshot">snapshot</termref>, the children of <code>$A</code> will consist of a single text node with the content <code>"Goodbye"</code>.</p></item></ulist></item></olist></note></div2></div1><div1 id="id-new-functions"><head>New Functions</head><p>XQuery Update Facility 3.0 provides extensions to XQuery built-in function library, as specified in this
  section.</p><div2 id="id-func-put"><head>fn:put</head><example role="signature"><proto name="fn:put" isSpecial="yes" return-type="empty-sequence()" returnEmptyOk="no" returnSeq="no" prefix="fn" returnVaries="no" isSchema="no" isDatatype="no" isOp="no"><arg name="node" type="node()" emptyOk="no"/><arg name="uri" type="xs:string" emptyOk="no"/></proto><p>
<proto name="fn:put" isSpecial="yes" return-type="empty-sequence()" returnEmptyOk="no" returnSeq="no" prefix="fn" returnVaries="no" isSchema="no" isDatatype="no" isOp="no"><arg name="node" type="node()" emptyOk="no"/><arg name="uri" type="xs:string" emptyOk="no"/><arg name="params" type="element(output:serialization-parameters)" emptyOk="yes"/></proto>
</p></example><p>The <code>fn:put</code> function stores a document or element to the location specified by <code>$uri</code>.
This function is normally invoked to create a resource on an external storage system such as a file system or a
database.</p><p>The external effects of <code>fn:put</code> are implementation-defined,
since they occur outside the domain of XQuery. The intent is that, if <code>fn:put</code> is invoked on a document node and no error is raised, a
subsequent query can access the stored document by invoking <code>fn:doc</code> with the same URI.</p><p>
The <code>$params</code> argument is used to identify a set of serialization parameters.
These are supplied in the form of an <code>output:serialization-parameters</code> element,
having the format described in <xspecref spec="SER30" ref="serparams-in-xdm-instance"/>.
The two-argument version of this function, or the three argument version with the
empty sequence as the third argument, are equivalent to passing an
<code>output:serialization-parameters</code> element with no child elements.
</p><glist><gitem><label>Category Rules:</label><def><p>
          <code>fn:put</code> is an updating function.
        </p></def></gitem><gitem><label>Semantics:</label><def><olist><item><p>If <code>$node</code> is not a document node or an element node, and the implementation does not support <code>fn:put</code> on the given node kind, a dynamic error is
raised <errorref code="0001" class="UP"/>.</p></item><item><p>If
<code>$uri</code> is not a valid lexical representation of the <code>xs:anyURI</code> type, a dynamic error is
raised <errorref code="0002" class="UP"/>. If <code>$uri</code> is a relative URI reference, it is resolved
relative to the value of the base URI property in the static
context.</p></item><item><p>
An implementation that serializes <code>$node</code> during storage <termref def="must">MUST</termref> use the
serialization parameters to determine how serialization is performed. In this case, the implementation
should raise a dynamic error if setting the serialization parameters produces a serialization error
or if an invalid parameter value is detected. An implementation may ignore the <code>$params</code>
argument (because it does not perform serialization) but must not raise an error because serialization
parameters are specified.
</p></item><item><p>The result of a call to <code>fn:put</code> is an empty <termref def="dt-xdm-instance">XDM instance</termref> and a <termref def="dt-pending-update-list">pending update list</termref> 
containing the following <termref def="dt-update-primitive">update primitive</termref>: 
<code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-put" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:put</loc>($node,$uri,$params)</code>.</p></item></olist></def></gitem></glist><notes><ulist><item><p>The results of <code>fn:put</code> do not become effective until after completion of the current <termref def="dt-snapshot">snapshot</termref>. The <code>fn:put</code> function has no effect on the set of available documents or collections seen by the current <termref def="dt-snapshot">snapshot</termref>.</p></item><item><p>If a node that is an operand of <code>fn:put</code> is affected by updating expressions in the current <termref def="dt-snapshot">snapshot</termref>, the <code>fn:put</code> function operates on the node after these updating expressions are made effective. As a result, after completion of the current <termref def="dt-snapshot">snapshot</termref>, the effects of updates to <code>$node</code> can be seen via <code>$uri</code>. (For details on application of updates, see <specref ref="id-upd-apply-updates"/>.)</p></item><item><p>If multiple calls to <code>fn:put</code> in the same <termref def="dt-snapshot">snapshot</termref> operate on the same URI (after any necessary resolution of relative URIs), a dynamic error <errorref code="0031" class="DY"/> is raised. The dynamic error is raised by an expression at some level of the query that contains more than one call to <code>fn:put</code>. For a normative description of this error, see <specref ref="id-upd-merge-updates"/> and <specref ref="id-upd-apply-updates"/>.</p></item></ulist></notes></div2></div1><div1 id="id-extensions-to-existing"><head>Extensions to Existing Expressions</head><p>XQuery Update Facility 3.0 provides extensions to the semantics of several existing kinds of XQuery expressions, as specified in this section.</p><div2 id="id-flwor-expr"><head>FLWOR Expression</head><scrap headstyle="show"><head/><prod num="42" id="doc-xquery30-FLWORExpr"><lhs>FLWORExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-InitialClause" xlink:type="simple">InitialClause</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-IntermediateClause" xlink:type="simple">IntermediateClause</nt>*  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ReturnClause" xlink:type="simple">ReturnClause</nt></rhs></prod><prod num="43" id="doc-xquery30-InitialClause"><lhs>InitialClause</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ForClause" xlink:type="simple">ForClause</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-LetClause" xlink:type="simple">LetClause</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-WindowClause" xlink:type="simple">WindowClause</nt></rhs></prod><prod num="44" id="doc-xquery30-IntermediateClause"><lhs>IntermediateClause</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-InitialClause" xlink:type="simple">InitialClause</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-WhereClause" xlink:type="simple">WhereClause</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-GroupByClause" xlink:type="simple">GroupByClause</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-OrderByClause" xlink:type="simple">OrderByClause</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-CountClause" xlink:type="simple">CountClause</nt></rhs></prod><prod num="45" id="doc-xquery30-ForClause"><lhs>ForClause</lhs><rhs>"for"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ForBinding" xlink:type="simple">ForBinding</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ForBinding" xlink:type="simple">ForBinding</nt>)*</rhs></prod><prod num="46" id="doc-xquery30-ForBinding"><lhs>ForBinding</lhs><rhs>"$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarName" xlink:type="simple">VarName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-AllowingEmpty" xlink:type="simple">AllowingEmpty</nt>?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-PositionalVar" xlink:type="simple">PositionalVar</nt>?  "in"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="47" id="doc-xquery30-AllowingEmpty"><lhs>AllowingEmpty</lhs><rhs>"allowing"  "empty"</rhs></prod><prod num="48" id="doc-xquery30-PositionalVar"><lhs>PositionalVar</lhs><rhs>"at"  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarName" xlink:type="simple">VarName</nt></rhs></prod><prod num="49" id="doc-xquery30-LetClause"><lhs>LetClause</lhs><rhs>"let"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-LetBinding" xlink:type="simple">LetBinding</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-LetBinding" xlink:type="simple">LetBinding</nt>)*</rhs></prod><prod num="50" id="doc-xquery30-LetBinding"><lhs>LetBinding</lhs><rhs>"$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarName" xlink:type="simple">VarName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  ":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="51" id="doc-xquery30-WindowClause"><lhs>WindowClause</lhs><rhs>"for"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TumblingWindowClause" xlink:type="simple">TumblingWindowClause</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-SlidingWindowClause" xlink:type="simple">SlidingWindowClause</nt>)</rhs></prod><prod num="52" id="doc-xquery30-TumblingWindowClause"><lhs>TumblingWindowClause</lhs><rhs>"tumbling"  "window"  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarName" xlink:type="simple">VarName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  "in"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-WindowStartCondition" xlink:type="simple">WindowStartCondition</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-WindowEndCondition" xlink:type="simple">WindowEndCondition</nt>?</rhs></prod><prod num="53" id="doc-xquery30-SlidingWindowClause"><lhs>SlidingWindowClause</lhs><rhs>"sliding"  "window"  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarName" xlink:type="simple">VarName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  "in"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-WindowStartCondition" xlink:type="simple">WindowStartCondition</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-WindowEndCondition" xlink:type="simple">WindowEndCondition</nt></rhs></prod><prod num="54" id="doc-xquery30-WindowStartCondition"><lhs>WindowStartCondition</lhs><rhs>"start"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-WindowVars" xlink:type="simple">WindowVars</nt>  "when"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="55" id="doc-xquery30-WindowEndCondition"><lhs>WindowEndCondition</lhs><rhs>"only"?  "end"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-WindowVars" xlink:type="simple">WindowVars</nt>  "when"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="56" id="doc-xquery30-WindowVars"><lhs>WindowVars</lhs><rhs>("$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-CurrentItem" xlink:type="simple">CurrentItem</nt>)?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-PositionalVar" xlink:type="simple">PositionalVar</nt>?  ("previous"  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-PreviousItem" xlink:type="simple">PreviousItem</nt>)?  ("next"  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-NextItem" xlink:type="simple">NextItem</nt>)?</rhs></prod><prod num="57" id="doc-xquery30-CurrentItem"><lhs>CurrentItem</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EQName" xlink:type="simple">EQName</nt></rhs></prod><prod num="58" id="doc-xquery30-PreviousItem"><lhs>PreviousItem</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EQName" xlink:type="simple">EQName</nt></rhs></prod><prod num="59" id="doc-xquery30-NextItem"><lhs>NextItem</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EQName" xlink:type="simple">EQName</nt></rhs></prod><prod num="60" id="doc-xquery30-CountClause"><lhs>CountClause</lhs><rhs>"count"  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarName" xlink:type="simple">VarName</nt></rhs></prod><prod num="61" id="doc-xquery30-WhereClause"><lhs>WhereClause</lhs><rhs>"where"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="62" id="doc-xquery30-GroupByClause"><lhs>GroupByClause</lhs><rhs>"group"  "by"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-GroupingSpecList" xlink:type="simple">GroupingSpecList</nt></rhs></prod><prod num="63" id="doc-xquery30-GroupingSpecList"><lhs>GroupingSpecList</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-GroupingSpec" xlink:type="simple">GroupingSpec</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-GroupingSpec" xlink:type="simple">GroupingSpec</nt>)*</rhs></prod><prod num="64" id="doc-xquery30-GroupingSpec"><lhs>GroupingSpec</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-GroupingVariable" xlink:type="simple">GroupingVariable</nt>  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  ":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt>)?  ("collation"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-URILiteral" xlink:type="simple">URILiteral</nt>)?</rhs></prod><prod num="66" id="doc-xquery30-OrderByClause"><lhs>OrderByClause</lhs><rhs>(("order"  "by")  |  ("stable"  "order"  "by"))  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-OrderSpecList" xlink:type="simple">OrderSpecList</nt></rhs></prod><prod num="67" id="doc-xquery30-OrderSpecList"><lhs>OrderSpecList</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-OrderSpec" xlink:type="simple">OrderSpec</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-OrderSpec" xlink:type="simple">OrderSpec</nt>)*</rhs></prod><prod num="68" id="doc-xquery30-OrderSpec"><lhs>OrderSpec</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-OrderModifier" xlink:type="simple">OrderModifier</nt></rhs></prod><prod num="69" id="doc-xquery30-OrderModifier"><lhs>OrderModifier</lhs><rhs>("ascending"  |  "descending")?  ("empty"  ("greatest"  |  "least"))?  ("collation"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-URILiteral" xlink:type="simple">URILiteral</nt>)?</rhs></prod><prod num="70" id="doc-xquery30-ReturnClause"><lhs>ReturnClause</lhs><rhs>"return"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod></scrap><p>The syntax of the FLWOR expression is not changed.</p><glist><gitem><label>Category Rules:</label><def><ulist><item><p>
            The category of the FLWOR expression is the same as the category of the expression in its
            <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ReturnClause" xlink:type="simple">ReturnClause</nt>.
          </p></item><item><p>
            If any
            <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ForClause" xlink:type="simple">ForClause</nt>,
            <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-LetClause" xlink:type="simple">LetClause</nt>,
            <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-WindowClause" xlink:type="simple">WindowClause</nt>,
            <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-WhereClause" xlink:type="simple">WhereClause</nt>,
            <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-GroupByClause" xlink:type="simple">GroupByClause</nt>, or
            <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-OrderByClause" xlink:type="simple">OrderByClause</nt>
            has operand expressions that are
            an <termref def="dt-updating-expression">updating expression</termref>, an error
            is raised <errorref code="0001" class="ST"/>.
          </p></item><item><p>
            The <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ReturnClause" xlink:type="simple">ReturnClause</nt> may contain any category of expression.
          </p></item></ulist></def></gitem><gitem><label>Additional Semantics:</label><def><olist><item><p>
        The semantics of all clauses other than the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ReturnClause" xlink:type="simple">ReturnClause</nt> are as specified in
        <xspecref spec="XQ30" ref="id-flwor-expressions"/>.
        These clauses generate a stream of tuples of bound variables.
      </p></item><item><p>
        The result of the FLWOR expression is the concatenation of the
        <termref def="dt-xdm-instance">XDM instances</termref> and
        <termref def="dt-pending-update-list">pending update lists</termref> returned by
        evaluating the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ReturnClause" xlink:type="simple">ReturnClause</nt> on each tuple generated by the previous step.
        <termref def="dt-pending-update-list">Pending update lists</termref> are concatenated by the
        <code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-merge-updates" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:mergeUpdates</loc></code> operation.
      </p><note><p>
          In the event of incompatible updates, the <code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-merge-updates" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:mergeUpdates</loc></code> operation may raise an error,
          as described in <specref ref="id-upd-merge-updates"/>.
        </p></note></item></olist></def></gitem><gitem><label>Example:</label><def><ulist><item><p>Update an inventory of parts according to a set of changes provided in the bound variable <code>$changes</code>. Both <code>/inventory</code> and <code>$changes</code> contain a set of <code>part</code> elements, each with a <code>partno</code> and a <code>quantity</code>.</p><eg xml:space="preserve">for $p in /inventory/part
let $deltap := $changes/part[partno eq $p/partno]
return 
    replace value of node $p/quantity
    with $p/quantity + $deltap/quantity</eg></item></ulist></def></gitem></glist></div2><div2 id="id-typeswitch-expr"><head>Typeswitch Expression</head><scrap headstyle="show"><head/><prod num="75" id="doc-xquery30-TypeswitchExpr"><lhs>TypeswitchExpr</lhs><rhs>"typeswitch"  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-Expr" xlink:type="simple">Expr</nt>  ")"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-CaseClause" xlink:type="simple">CaseClause</nt>+  "default"  ("$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarName" xlink:type="simple">VarName</nt>)?  "return"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="76" id="doc-xquery30-CaseClause"><lhs>CaseClause</lhs><rhs>"case"  ("$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarName" xlink:type="simple">VarName</nt>  "as")?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-SequenceTypeUnion" xlink:type="simple">SequenceTypeUnion</nt>  "return"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="77" id="doc-xquery30-SequenceTypeUnion"><lhs>SequenceTypeUnion</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SequenceType" xlink:type="simple">SequenceType</nt>  ("|"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SequenceType" xlink:type="simple">SequenceType</nt>)*</rhs></prod></scrap><p>
  The syntax of the typeswitch expression is not changed.
  The return expressions in the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-CaseClause" xlink:type="simple">CaseClauses</nt> and <code>default</code> clause are called
  <term>branches</term>, and the expression in parentheses after the keyword <code>typeswitch</code> is called
  the <term>test</term>.
</p><glist><gitem><label>Category Rules:</label><def><ulist><item><p>
            If all <term>branches</term> of the typeswitch expression are
            <termref def="dt-simple-expression">simple expressions</termref>, then the typeswitch
            expression is a <termref def="dt-simple-expression">simple expression</termref>.
          </p></item><item><p>
            If any <term>branch</term> of the typeswitch expression is an
            <termref def="dt-updating-expression">updating expression</termref>, then the typeswitch
            expression is an <termref def="dt-updating-expression">updating expression</termref>.
          </p></item><item><p>
            If <term>test</term> is
            an <termref def="dt-updating-expression">updating expression</termref>, an error
            is raised <errorref code="0001" class="ST"/>.
          </p></item><item><p>
            The <term>branches</term> of a typeswitch expression can be expressions of any category.
          </p></item></ulist></def></gitem><gitem><label>Additional Semantics:</label><def><p>
          Selection of the effective case and binding of variables are performed as specified in
          <xspecref spec="XQ30" ref="id-typeswitch"/>. The expression in the <code>return</code>
          clause of the effective case (or default) is then evaluated, resulting in
          
          
            an <termref def="dt-xdm-instance">XDM instance</termref> and
            <termref def="dt-pending-update-list">pending update list</termref>, which serves as the result of
            the typeswitch expression.
          
        </p></def></gitem></glist></div2><div2 id="id-switch-expr"><head>Switch Expression</head><scrap headstyle="show"><head/><prod num="72" id="doc-xquery30-SwitchExpr"><lhs>SwitchExpr</lhs><rhs>"switch"  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-Expr" xlink:type="simple">Expr</nt>  ")"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-SwitchCaseClause" xlink:type="simple">SwitchCaseClause</nt>+  "default"  "return"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="73" id="doc-xquery30-SwitchCaseClause"><lhs>SwitchCaseClause</lhs><rhs>("case"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-SwitchCaseOperand" xlink:type="simple">SwitchCaseOperand</nt>)+  "return"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="74" id="doc-xquery30-SwitchCaseOperand"><lhs>SwitchCaseOperand</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod></scrap><p>
  The syntax of the switch expression is not changed.
  The return expressions in the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-CaseClause" xlink:type="simple">CaseClauses</nt> and <code>default</code> clause are called
  <term>branches</term>, and the expression in parentheses after the keyword <code>switch</code> is called
  the <term>test</term>.
</p><glist><gitem><label>Category Rules:</label><def><ulist><item><p>
            If all <term>branches</term> of the switch expression are
            <termref def="dt-simple-expression">simple expressions</termref>, then the typeswitch
            expression is a <termref def="dt-simple-expression">simple expression</termref>.
          </p></item><item><p>
            If any <term>branch</term> of the switch expression is an
            <termref def="dt-updating-expression">updating expression</termref>, then the switch
            expression is an <termref def="dt-updating-expression">updating expression</termref>.
          </p></item><item><p>
            If <term>test</term> or a <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-SwitchCaseOperand" xlink:type="simple">SwitchCaseOperand</nt> is
            an <termref def="dt-updating-expression">updating expression</termref>, an error
            is raised <errorref code="0001" class="ST"/>.
          </p></item><item><p>
            The <term>branches</term> of a switch expression can be expressions of any category.
          </p></item></ulist></def></gitem><gitem><label>Additional Semantics:</label><def><p>
          Selection of the effective case is
          performed as specified in <xspecref spec="XQ30" ref="id-switch"/>. The expression in the <code>return</code>
          clause of the effective case (or default) is then evaluated, resulting in
          
          
            an <termref def="dt-xdm-instance">XDM instance</termref> and
            <termref def="dt-pending-update-list">pending update list</termref>, which serves as the result of
            the switch expression.
          
        </p></def></gitem></glist></div2><div2 id="id-conditional-expr"><head>Conditional Expression</head><scrap headstyle="show"><head/><prod num="78" id="doc-xquery30-IfExpr"><lhs>IfExpr</lhs><rhs>"if"  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-Expr" xlink:type="simple">Expr</nt>  ")"  "then"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt>  "else"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod></scrap><p>
  The syntax of conditional expression is not changed.
  The operands of the <code>then</code> and <code>else</code> clauses are called
  <term>branches</term>, and the expression in parentheses after the keyword <code>if</code> is called
  the <term>test</term>.
</p><glist><gitem><label>Category Rules:</label><def><ulist><item><p>
            If all <term>branches</term> of the conditional expression are
            <termref def="dt-simple-expression">simple expressions</termref>, then the conditional
            expression is a <termref def="dt-simple-expression">simple expression</termref>.
          </p></item><item><p>
            If any <term>branch</term> of the conditional expression is an
            <termref def="dt-updating-expression">updating expression</termref>, then the conditional
            expression is an <termref def="dt-updating-expression">updating expression</termref>.
          </p></item><item><p>
            If <term>test</term> is
            an <termref def="dt-updating-expression">updating expression</termref>, an error
            is raised <errorref code="0001" class="ST"/>.
          </p></item><item><p>
            The <term>branches</term> of a conditional expression can be expressions of any category.
          </p></item></ulist></def></gitem><gitem><label>Additional Semantics:</label><def><p>
          Selection of the effective branch performed as specified in <xspecref spec="XQ30" ref="id-conditionals"/>.
          The result of the conditional expression is the 
          
          
            <termref def="dt-xdm-instance">XDM instance</termref> and
            <termref def="dt-pending-update-list">pending update list</termref>
            returned by the selected branch.
          
        </p></def></gitem><gitem><label>Example:</label><def><ulist><item><p>If the element bound to variable <code>$e</code> has a <code>last-updated</code> attribute, update its value to the current date; otherwise insert such an attribute.</p><eg xml:space="preserve">if ($e/@last-updated)
then replace value of node 
        $e/last-updated with fn:currentDate()
else insert node 
        attribute last-updated {fn:currentDate()} into $e</eg></item></ulist></def></gitem></glist></div2><div2 id="id-try-catch"><head>Try/Catch Expression</head><scrap headstyle="show"><head/><prod num="79" id="doc-xquery30-TryCatchExpr"><lhs>TryCatchExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TryClause" xlink:type="simple">TryClause</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-CatchClause" xlink:type="simple">CatchClause</nt>+</rhs></prod><prod num="80" id="doc-xquery30-TryClause"><lhs>TryClause</lhs><rhs>"try"  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TryTargetExpr" xlink:type="simple">TryTargetExpr</nt>  "}"</rhs></prod><prod num="81" id="doc-xquery30-TryTargetExpr"><lhs>TryTargetExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-Expr" xlink:type="simple">Expr</nt></rhs></prod><prod num="82" id="doc-xquery30-CatchClause"><lhs>CatchClause</lhs><rhs>"catch"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-CatchErrorList" xlink:type="simple">CatchErrorList</nt>  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-Expr" xlink:type="simple">Expr</nt>  "}"</rhs></prod><prod num="83" id="doc-xquery30-CatchErrorList"><lhs>CatchErrorList</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-NameTest" xlink:type="simple">NameTest</nt>  ("|"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-NameTest" xlink:type="simple">NameTest</nt>)*</rhs></prod></scrap><glist><gitem><label>Category Rules:</label><def><ulist><item><p>
            If the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TryTargetExpr" xlink:type="simple">TryTargetExpr</nt> and all of the catch expressions are
            <termref def="dt-simple-expression">simple expressions</termref>, then the try/catch
            expression is a <termref def="dt-simple-expression">simple expression</termref>.
          </p></item><item><p>
            If the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TryTargetExpr" xlink:type="simple">TryTargetExpr</nt> or one of the catch expressions is an
            <termref def="dt-updating-expression">updating expression</termref>, then the conditional
            expression is an <termref def="dt-updating-expression">updating expression</termref>.
          </p></item><item><p>
            If the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TryTargetExpr" xlink:type="simple">TryTargetExpr</nt> and all of the catch expressions can be
            expressions of any category.
          </p></item></ulist></def></gitem><gitem><label>Additional Semantics:</label><def><p>
          The <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TryTargetExpr" xlink:type="simple">TryTargetExpr</nt> is evaluated, resulting in a 
          <termref def="dt-pending-update-list">pending update list</termref> or raising an error.
          
          If a <termref def="dt-pending-update-list">pending update list</termref> is returned, it
          is checked for compatibility using <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-compatibility-check" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:compatibilityCheck</loc>,
          which may also raise an error.
          
          If an error has not been raised, the result of the try/catch expression is the
          <termref def="dt-xdm-instance">XDM instance</termref> and
          <termref def="dt-pending-update-list">pending update list</termref> returned by it.
          However if it raises an error the result of the try/catch expression is the
          <termref def="dt-xdm-instance">XDM instance</termref> and
          <termref def="dt-pending-update-list">pending update list</termref> returned
          by executing the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-CatchClause" xlink:type="simple">CatchClause</nt> matching the error, as defined
          in <xspecref spec="XQ30" ref="id-try-catch"/>.
        </p></def></gitem></glist><note><p>
      Since the <termref def="dt-pending-update-list">pending update list</termref> is considered
      part of the result of an expression, an error raised while executing the 
      <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TryTargetExpr" xlink:type="simple">TryTargetExpr</nt> results in no update operations being returned from the
      execution of that expression.
    </p></note></div2><div2 id="id-comma-expr"><head>Comma Expression</head><scrap headstyle="show"><head/><prod num="40" id="doc-xquery30-Expr"><lhs>Expr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt>)*</rhs></prod></scrap><p>
  The comma expressions is composed of one or more expressions concatenated by the comma operator, as described in <xspecref spec="XQ30" ref="construct_seq"/>.
</p><glist><gitem><label>Category Rules:</label><def><ulist><item><p>
            If the operand expressions of the comma expression are
            <termref def="dt-simple-expression">simple expressions</termref>, then the comma
            expression is a <termref def="dt-simple-expression">simple expression</termref>.
          </p></item><item><p>
            If any of the operand expressions of the comma expression is an
            <termref def="dt-updating-expression">updating expression</termref>, then the comma
            expression is an <termref def="dt-updating-expression">updating expression</termref>.
          </p></item><item><p>
            The operand expressions of a comma expression can be
            expressions of any category.
          </p></item></ulist></def></gitem><gitem><label>Additional Semantics:</label><def><p>
          The operand expressions of the comma expression are evaluated, and the
          <termref def="dt-xdm-instance">XDM instances</termref> and
          <termref def="dt-pending-update-list">pending update lists</termref> returned are concatenated
          in operand order.
          <termref def="dt-pending-update-list">Pending update lists</termref> are concatenated by the
          <code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-merge-updates" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:mergeUpdates</loc></code> operation.
        </p></def></gitem><gitem><label>Examples:</label><def><ulist><item><p>This example makes the value of an element empty and gives the element an <code>xsi:nil="true"</code> attribute. Both of these operations may be necessary in order to preserve the validity of the element.</p><eg xml:space="preserve">let $q := /inventory/item[serialno = "123456"]/quantity
return
   ( replace value of node $q with ( ),
     insert node attribute xsi:nil {"true"} into $q )</eg></item></ulist></def></gitem></glist></div2><div2 id="id-parenthesized-expr"><head>Parenthesized Expression</head><scrap headstyle="show"><head/><prod num="131" id="doc-xquery30-ParenthesizedExpr"><lhs>ParenthesizedExpr</lhs><rhs>"("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-Expr" xlink:type="simple">Expr</nt>?  ")"</rhs></prod></scrap><glist><gitem><label>Category Rules:</label><def><p>
          The category of a parenthesized expression is the same as the category of the expression enclosed in parentheses, which may have any category.
        </p></def></gitem><gitem><label>Additional Semantics:</label><def><p>
          The result of a parenthesized expression is the same as the result of the expression enclosed in parentheses.
        </p></def></gitem></glist></div2><div2 id="id-extension-expr"><head>Extension Expression</head><scrap headstyle="show"><head/><prod num="105" id="doc-xquery30-ExtensionExpr"><lhs>ExtensionExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Pragma" xlink:type="simple">Pragma</nt>+  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-Expr" xlink:type="simple">Expr</nt>?  "}"</rhs></prod></scrap><glist><gitem><label>Category Rules:</label><def><p>
          The category of an extension (pragma) expression is the same as the category of the enclosed expression, which may have any category.
        </p></def></gitem><gitem><label>Additional Semantics:</label><def><p>
          The result of an extension (pragma) expression is the same as the result of the enclosed expression.
        </p></def></gitem></glist></div2><div2 id="id-inline-function"><head>Inline Functions</head><scrap headstyle="show"><head/><prod num="167" id="doc-xquery30-InlineFunctionExpr"><lhs>InlineFunctionExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-Annotation" xlink:type="simple">Annotation</nt>*  "function"  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ParamList" xlink:type="simple">ParamList</nt>?  ")"  ("as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SequenceType" xlink:type="simple">SequenceType</nt>)?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-FunctionBody" xlink:type="simple">FunctionBody</nt></rhs></prod><prod num="36" id="noid_d3e3830.doc-xquery30-FunctionBody"><lhs>FunctionBody</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EnclosedExpr" xlink:type="simple">EnclosedExpr</nt></rhs></prod></scrap><p>
    The <code>%simple</code> and <code>%updating</code> annotations can be specified at the start of the inline
    function expression, to force the creation of a <termref def="dt-simple-function">simple</termref> or
    <termref def="dt-updating-function">updating function</termref> repectively.
  </p><glist><gitem><label>Category Rules:</label><def><olist><item><p>If neither <code>%simple</code> nor <code>%updating</code> is specified:</p><olist><item><p>
                  The <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-FunctionBody" xlink:type="simple">FunctionBody</nt> can be an expression of any category.
                </p></item><item><p>
                  If the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-FunctionBody" xlink:type="simple">FunctionBody</nt> is an
                  <termref def="dt-updating-expression">updating expression</termref>, the inline function
                  expression is a <termref def="dt-simple-expression">simple expression</termref>,
                  returning an <termref def="dt-updating-function">updating function</termref>.
                </p></item><item><p>
                  If the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-FunctionBody" xlink:type="simple">FunctionBody</nt> is a
                  <termref def="dt-simple-expression">simple expression</termref>, the inline function
                  expression is a <termref def="dt-simple-expression">simple expression</termref>,
                  returning a <termref def="dt-simple-function">simple function</termref>.
                </p></item></olist></item><item><p>If <code>%simple</code> is specified:</p><olist><item><p>
                  The <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-FunctionBody" xlink:type="simple">FunctionBody</nt>
                  must not be an <termref def="dt-updating-expression">updating expression</termref> <errorref code="0001" class="ST"/>
                </p></item><item><p>
                  The inline function expression is a <termref def="dt-simple-expression">simple expression</termref>,
                  returning a <termref def="dt-simple-function">simple function</termref>.
                </p></item></olist></item><item><p>If <code>%updating</code> is specified:</p><olist><item><p>
                  The <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-FunctionBody" xlink:type="simple">FunctionBody</nt> can be an expression of any category.
                </p></item><item><p>
                  The inline function expression is a <termref def="dt-simple-expression">simple expression</termref>,
                  returning an <termref def="dt-updating-function">updating function</termref>.
                </p></item></olist></item><item><p>
              It is a static error to use more than one <code>%updating</code> or <code>%simple</code>
              annotation in a given annotation set <errorref code="0033" class="ST"/>.
            </p></item></olist></def></gitem></glist></div2><div2 id="id-function-call"><head>Function Calls</head><scrap headstyle="show"><head/><prod num="135" id="doc-xquery30-FunctionCall"><lhs>FunctionCall</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EQName" xlink:type="simple">EQName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ArgumentList" xlink:type="simple">ArgumentList</nt></rhs></prod><prod num="123" id="doc-xquery30-ArgumentList"><lhs>ArgumentList</lhs><rhs>"("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-Argument" xlink:type="simple">Argument</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-Argument" xlink:type="simple">Argument</nt>)*)?  ")"</rhs></prod><prod num="136" id="doc-xquery30-Argument"><lhs>Argument</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ArgumentPlaceholder" xlink:type="simple">ArgumentPlaceholder</nt></rhs></prod><prod num="137" id="doc-xquery30-ArgumentPlaceholder"><lhs>ArgumentPlaceholder</lhs><rhs>"?"</rhs></prod></scrap><p>
    Function calls can either be a <xtermref spec="XQ30" ref="dt-partial-function-application"/> or not.
  </p><glist><gitem><label>Category Rules:</label><def><ulist><item><p>
            If the function call is a <xtermref spec="XQ30" ref="dt-partial-function-application"/>
            of an <termref def="dt-updating-function">updating function</termref>, then it is a
            <termref def="dt-simple-expression">simple expression</termref> returning an
            <termref def="dt-updating-function">updating function</termref>.
          </p></item><item><p>
            If the function call is a <xtermref spec="XQ30" ref="dt-partial-function-application"/>
            of a <termref def="dt-simple-function">simple function</termref>, then it is a
            <termref def="dt-simple-expression">simple expression</termref> returning an
            <termref def="dt-simple-function">simple function</termref>.
          </p></item><item><p>
            A function call of a
            <termref def="dt-simple-function">simple function</termref> is a
            <termref def="dt-simple-expression">simple expression</termref>.
          </p></item><item><p>
            A function call of an
            <termref def="dt-updating-function">updating function</termref> is an
            <termref def="dt-updating-expression">updating expression</termref>.
          </p></item><item><p>
            The <xtermref spec="XQ30" ref="dt-arg-expr">argument expressions</xtermref> of
            a function call or <xtermref spec="XQ30" ref="dt-partial-function-application"/>
            can be expressions of any category.
          </p></item></ulist></def></gitem><gitem><label>Additional Semantics:</label><def><p>
          The function call is evaluated as specified in <xspecref spec="XQ30" ref="id-function-calls"/>.
          
          All <termref def="dt-pending-update-list">pending update lists</termref> returned by the
          evaluation of <xtermref spec="XQ30" ref="dt-arg-expr">argument expressions</xtermref> are concatenated
          with the <termref def="dt-pending-update-list">pending update list</termref> returned by
          evaluating the function to form the <termref def="dt-pending-update-list">pending update list</termref>
          returned from the function call expression.
          
        </p><p>
        </p></def></gitem></glist></div2><div2 id="id-dynamic-function-invocation"><head>Dynamic Function Invocation</head><scrap headstyle="show"><head/><prod num="122" id="doc-xquery30-PostfixExpr"><lhs>PostfixExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-PrimaryExpr" xlink:type="simple">PrimaryExpr</nt>  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Predicate" xlink:type="simple">Predicate</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ArgumentList" xlink:type="simple">ArgumentList</nt>)*</rhs></prod><prod num="123" id="noid_d3e4070.doc-xquery30-ArgumentList"><lhs>ArgumentList</lhs><rhs>"("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-Argument" xlink:type="simple">Argument</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-Argument" xlink:type="simple">Argument</nt>)*)?  ")"</rhs></prod><prod num="136" id="noid_d3e4071.doc-xquery30-Argument"><lhs>Argument</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-ArgumentPlaceholder" xlink:type="simple">ArgumentPlaceholder</nt></rhs></prod><prod num="137" id="noid_d3e4072.doc-xquery30-ArgumentPlaceholder"><lhs>ArgumentPlaceholder</lhs><rhs>"?"</rhs></prod></scrap><p>
    Dynamic function invocation can either be a <xtermref spec="XQ30" ref="dt-partial-function-application"/> or not.
  </p><glist><gitem><label>Category Rules:</label><def><ulist><item><p>
            A dynamic function invocation is a <termref def="dt-simple-expression">simple expression</termref>.
          </p></item><item><p>
            The PrimaryExpr and the <xtermref spec="XQ30" ref="dt-arg-expr">argument expressions</xtermref> of
            a dynamic function invocation can be expressions of any category.
          </p></item></ulist></def></gitem><gitem><label>Additional Semantics:</label><def><p>
          The dynamic function invocation is evaluated as specified in <xspecref spec="XQ30" ref="id-dynamic-function-invocation"/>.
        </p><p>
          If the function returned by the PrimaryExpr is an <termref def="dt-updating-function">updating function</termref>, and the dynamic
          function invocation is not a <xtermref spec="XQ30" ref="dt-partial-function-application"/>, a dynamic error is raised <errorref code="0038" class="DY"/>.
          To perform dynamic function invocation of an <termref def="dt-updating-function">updating function</termref>, <specref ref="id-dynamic-updating-function-invocation"/> should be used.
        </p><p>
          All <termref def="dt-pending-update-list">pending update lists</termref> returned by the
          evaluation of the PrimaryExpr or <xtermref spec="XQ30" ref="dt-arg-expr">argument expressions</xtermref> are
          concatenated to form the <termref def="dt-pending-update-list">pending update list</termref>
          returned from the dynamic function invocation expression.
        </p></def></gitem></glist></div2><div2 id="id-node-constructors"><head>Direct and Computed Node Constructors</head><scrap headstyle="show"><head/><prod num="140" id="doc-xquery30-DirElemConstructor"><lhs>DirElemConstructor</lhs><rhs>"&lt;"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-QName" xlink:type="simple">QName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-DirAttributeList" xlink:type="simple">DirAttributeList</nt>  ("/&gt;"  |  ("&gt;"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-DirElemContent" xlink:type="simple">DirElemContent</nt>*  "&lt;/"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-QName" xlink:type="simple">QName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-S" xlink:type="simple">S</nt>?  "&gt;"))</rhs></prod><prod num="141" id="doc-xquery30-DirAttributeList"><lhs>DirAttributeList</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-S" xlink:type="simple">S</nt>  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-QName" xlink:type="simple">QName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-S" xlink:type="simple">S</nt>?  "="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-S" xlink:type="simple">S</nt>?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-DirAttributeValue" xlink:type="simple">DirAttributeValue</nt>)?)*</rhs></prod><prod num="151" id="doc-xquery30-CDataSection"><lhs>CDataSection</lhs><rhs>"&lt;![CDATA["  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-CDataSectionContents" xlink:type="simple">CDataSectionContents</nt>  "]]&gt;"</rhs></prod><prod num="149" id="doc-xquery30-DirPIConstructor"><lhs>DirPIConstructor</lhs><rhs>"&lt;?"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-PITarget" xlink:type="simple">PITarget</nt>  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-S" xlink:type="simple">S</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-DirPIContents" xlink:type="simple">DirPIContents</nt>)?  "?&gt;"</rhs></prod><prod num="147" id="doc-xquery30-DirCommentConstructor"><lhs>DirCommentConstructor</lhs><rhs>"&lt;!--"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-DirCommentContents" xlink:type="simple">DirCommentContents</nt>  "--&gt;"</rhs></prod><prod num="155" id="doc-xquery30-CompElemConstructor"><lhs>CompElemConstructor</lhs><rhs>"element"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EQName" xlink:type="simple">EQName</nt>  |  ("{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-Expr" xlink:type="simple">Expr</nt>  "}"))  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ContentExpr" xlink:type="simple">ContentExpr</nt>?  "}"</rhs></prod><prod num="157" id="doc-xquery30-CompAttrConstructor"><lhs>CompAttrConstructor</lhs><rhs>"attribute"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EQName" xlink:type="simple">EQName</nt>  |  ("{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-Expr" xlink:type="simple">Expr</nt>  "}"))  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-Expr" xlink:type="simple">Expr</nt>?  "}"</rhs></prod><prod num="154" id="doc-xquery30-CompDocConstructor"><lhs>CompDocConstructor</lhs><rhs>"document"  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-Expr" xlink:type="simple">Expr</nt>  "}"</rhs></prod><prod num="162" id="doc-xquery30-CompTextConstructor"><lhs>CompTextConstructor</lhs><rhs>"text"  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-Expr" xlink:type="simple">Expr</nt>  "}"</rhs></prod><prod num="164" id="doc-xquery30-CompPIConstructor"><lhs>CompPIConstructor</lhs><rhs>"processing-instruction"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-NCName" xlink:type="simple">NCName</nt>  |  ("{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-Expr" xlink:type="simple">Expr</nt>  "}"))  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-Expr" xlink:type="simple">Expr</nt>?  "}"</rhs></prod><prod num="163" id="doc-xquery30-CompCommentConstructor"><lhs>CompCommentConstructor</lhs><rhs>"comment"  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-Expr" xlink:type="simple">Expr</nt>  "}"</rhs></prod></scrap><glist><gitem><label>Category Rules:</label><def><ulist><item><p>
            If all operand expressions of the node constructor are
            <termref def="dt-simple-expression">simple expressions</termref>
            then the node constructor is a
            <termref def="dt-simple-expression">simple expression</termref>.
          </p></item><item><p>
            If any operand expression of the node constructor is an
            <termref def="dt-updating-expression">updating expression</termref>
            then the node constructor is an
            <termref def="dt-updating-expression">updating expression</termref>.
          </p></item><item><p>
            The operand expressions of a node constructor may be expressions of
            any category.
          </p></item></ulist></def></gitem><gitem><label>Additional Semantics:</label><def><p>
          The <termref def="dt-pending-update-list">pending update lists</termref>
          returned by each of the operand expressions
          are merged by calling <code>upd:mergeUpdates</code>, and returned as the
          <termref def="dt-pending-update-list">pending update list</termref>
          part of the result of the node constructor.
        </p></def></gitem></glist></div2><div2 id="id-other-expr"><head>Other Expressions</head><p>
    All other XQuery expressions not listed in the sections preceeding this
    are extended as follows:
  </p><glist><gitem><label>Category Rules:</label><def><ulist><item><p>
            The expression is a
            <termref def="dt-simple-expression">simple expression</termref>.
          </p></item><item><p>
            If an operand expression of the expresion is an
            <termref def="dt-updating-expression">updating expression</termref>, a
            static error is raised <errorref code="0001" class="ST"/>.
          </p></item></ulist></def></gitem></glist></div2></div1><div1 id="id-update-operations"><head>Update Operations</head><p>This section describes the update operations defined by XQuery Update Facility 3.0. Although these update operations are described using a functional notation, they are not true functions because many of them have no return value. These update operations are used in defining the semantics of XQuery expressions, but they are not directly available to users.</p><p>Update operations consist of <termref def="dt-update-primitive">update primitives</termref>, which are the components of <termref def="dt-pending-update-list">pending update lists</termref>, and <termref def="dt-update-routine">update routines</termref>, which are used in defining XQuery semantics but do not appear on <termref def="dt-pending-update-list">pending update lists</termref>.</p><div2 id="id-update-primitives"><head>Update Primitives</head><p>The update primitives described in this section may be held on <termref def="dt-pending-update-list">pending update lists</termref>. When an update primitive is held on a pending update list, its node operands are represented by their <termref def="dt-node-identity">node identities</termref>. The semantics of an update primitive do not become effective until their pending update list is processed by the  <code>upd:applyUpdates</code> routine.</p><div3 id="id-upd-insert-before"><head>upd:insertBefore</head><glist><gitem><label>Parameters</label><def><eg xml:space="preserve">upd:insertBefore(
   $target as node(),
   $content as node()+)</eg></def></gitem><gitem><label>Summary</label><def><p>Inserts <code>$content</code> immediately before <code>$target</code>.</p></def></gitem><gitem><label>Constraints</label><def><p><code>$target</code> must be an element, text, processing
									instruction, or comment node with a non-empty <code>parent</code> property. <code>$content</code> must be a sequence containing only element, text, processing instruction,
									and comment nodes.</p></def></gitem><gitem><label>Semantics</label><def><olist><item><p>Effects on nodes in <code>$content</code>:</p><olist><item><p>For each node in <code>$content</code>, the <code>parent</code> property is set to <code>parent($target)</code>.</p></item><item><p>If the <code>type-name</code> property of <code>parent($target)</code> is <code>xs:untyped</code>, then <code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-set-to-untyped" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:setToUntyped()</loc></code> is invoked on each element or attribute node in <code>$content</code>.</p></item></olist></item><item><p>Effects on <code>parent($target)</code>:</p><olist><item><p>The <code>children</code> property of <code>parent($target)</code> is modified to add the nodes in <code>$content</code> just before <code>$target</code>, preserving their order.</p></item><item><p>If at least one of the nodes in <code>$content</code> is an element or text node, <code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-remove-type" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:removeType</loc>(parent($target))</code> is invoked.</p></item></olist></item><item><p>All the namespace bindings of <code>parent($target)</code> are <termref def="dt-mark">marked for namespace propagation</termref>.</p></item></olist></def></gitem></glist></div3><div3 id="id-upd-insert-after"><head>upd:insertAfter</head><glist><gitem><label>Parameters</label><def><eg xml:space="preserve">upd:insertAfter(
   $target as node(),
   $content as node()+)</eg></def></gitem><gitem><label>Summary</label><def><p>Inserts <code>$content</code> immediately after <code>$target</code>.</p></def></gitem><gitem><label>Constraints</label><def><p><code>$target</code> must be an element, text, processing
									instruction, or comment node with a non-empty <code>parent</code> property. <code>$content</code> must be a sequence containing only element, text, processing instruction,
									and comment nodes.</p></def></gitem><gitem><label>Semantics</label><def><p>The semantics of <code>upd:insertAfter</code> are identical to the semantics of <code>upd:insertBefore</code>, except that Rule 2a is changed as follows:</p><ulist><item><p>The <code>children</code> property of <code>parent($target)</code> is modified to add the nodes in <code>$content</code> just after <code>$target</code>, preserving their order.</p></item></ulist></def></gitem></glist></div3><div3 id="id-upd-insert-into"><head>upd:insertInto</head><glist><gitem><label>Parameters</label><def><eg xml:space="preserve">upd:insertInto(
   $target as node(),
   $content as node()+)</eg></def></gitem><gitem><label>Summary</label><def><p>Inserts <code>$content</code> as the children of <code>$target</code>, in an implementation-dependent position.</p></def></gitem><gitem><label>Constraints</label><def><p><code>$target</code> must be an element or document node. <code>$content</code> must be a sequence containing only element, text, processing instruction,
									and comment nodes.</p></def></gitem><gitem><label>Semantics</label><def><p>The semantics of <code>upd:insertInto</code> are identical to the semantics of <code>upd:insertBefore</code>, except that <code>$target</code> is substituted everywhere for <code>parent($target)</code>, and Rule 2a is changed as follows:</p><ulist><item><p>The <code>children</code> property of <code>$target</code> is changed to add the nodes in <code>$content</code> in implementation-dependent positions, preserving their relative order.</p></item></ulist></def></gitem></glist></div3><div3 id="id-upd-insert-into-as-first"><head>upd:insertIntoAsFirst</head><glist><gitem><label>Parameters</label><def><eg xml:space="preserve">upd:insertIntoAsFirst(
   $target as node(),
   $content as node()+)</eg></def></gitem><gitem><label>Summary</label><def><p>Inserts <code>$content</code> as the first children of <code>$target</code>.</p></def></gitem><gitem><label>Constraints</label><def><p><code>$target</code> must be an element or document node. <code>$content</code> must be a sequence containing only element, text, processing instruction,
									and comment nodes.</p></def></gitem><gitem><label>Semantics</label><def><p>The semantics of <code>upd:insertIntoAsFirst</code> are identical to the semantics of <code>upd:insertBefore</code>, except that <code>$target</code> is substituted everywhere for <code>parent($target)</code>, and Rule 2a is changed as follows:</p><ulist><item><p>The <code>children</code> property of <code>$target</code> is changed to add the nodes in <code>$content</code> as the first children, preserving their order.</p></item></ulist></def></gitem></glist></div3><div3 id="id-upd-insert-into-as-last"><head>upd:insertIntoAsLast</head><glist><gitem><label>Parameters</label><def><eg xml:space="preserve">upd:insertIntoAsLast(
   $target as node(),
   $content as node()+)</eg></def></gitem><gitem><label>Summary</label><def><p>Inserts <code>$content</code> as the last children of <code>$target</code>.</p></def></gitem><gitem><label>Constraints</label><def><p><code>$target</code> must be an element or document node. <code>$content</code> must be a sequence containing only element, text, processing instruction,
									and comment nodes.</p></def></gitem><gitem><label>Semantics</label><def><p>The semantics of <code>upd:insertIntoAsLast</code> are identical to the semantics of <code>upd:insertBefore</code>, except that <code>$target</code> is substituted everywhere for <code>parent($target)</code>, and Rule 2a is changed as follows:</p><ulist><item><p>The <code>children</code> property of <code>$target</code> is changed to add the nodes in <code>$content</code> as the last children, preserving their order.</p></item></ulist></def></gitem></glist></div3><div3 id="id-upd-insert-attributes"><head>upd:insertAttributes</head><glist><gitem><label>Parameters</label><def><eg xml:space="preserve">upd:insertAttributes(
   $target as element(),
   $content as attribute()+)</eg></def></gitem><gitem><label>Summary</label><def><p>Inserts <code>$content</code> as attributes of <code>$target</code>.</p></def></gitem><gitem><label>Constraints</label><def><p>None</p></def></gitem><gitem><label>Semantics</label><def><olist><item><p>For each node <code>$A</code> in <code>$content</code>:</p><olist><item><p>The <code>parent</code> property of <code>$A</code> is set to <code>$target</code>.</p></item><item><p>If the <code>type-name</code> property of <code>$target</code> is <code>xs:untyped</code>, then <code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-set-to-untyped" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:setToUntyped</loc>($A)</code> is invoked.</p></item></olist></item><item><p>The following properties of <code>$target</code> are changed:</p><olist><item><p><code>attributes</code>: Modified to add the nodes in <code>$content</code>.</p></item><item><p><code>namespaces:</code> Modified to add namespace bindings for any attribute namespace prefixes in <code>$content</code> that did not already have bindings.
These bindings are <termref def="dt-mark">marked for namespace propagation</termref>.

</p></item><item><p><code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-remove-type" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:removeType</loc>($target)</code> is invoked.</p></item></olist></item></olist></def></gitem></glist></div3><div3 id="id-upd-delete"><head id="id-dm-delete">upd:delete</head><glist><gitem><label>Parameters</label><def><eg xml:space="preserve">upd:delete(
   $target as node())</eg></def></gitem><gitem><label>Constraints</label><def><p>None</p></def></gitem><gitem><label>Semantics</label><def><olist><item><p>If <code>$target</code> has a parent node <code>$P</code>, then:</p><olist><item><p>The <code>parent</code> property of <code>$target</code> is set to empty.</p></item><item><p>If <code>$target</code> is an attribute node, the <code>attributes</code> property of <code>$P</code> is modified to remove <code>$target</code>.</p></item><item><p>If <code>$target</code> is a non-attribute node, the <code>children</code> property of <code>$P</code> is modified to remove <code>$target</code>.</p></item><item><p>If <code>$target</code> is an element, attribute, or text node, and <code>$P</code> is an element node, then <code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-remove-type" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:removeType</loc>($P)</code>  is invoked.</p></item></olist></item><item><p>If <code>$target</code> has no parent, the <termref def="dt-xdm-instance">XDM instance</termref> is unchanged.</p></item></olist><note><p>Deleted nodes are detached from their parent nodes; however, a node deletion has no effect on variable bindings or on the set of available documents or collections during processing of the current query.</p></note><note><p>Multiple <code>upd:delete</code> operations may be applied to the same node during execution of a query; this is not an error.</p></note></def></gitem></glist></div3><div3 id="id-upd-replacenode"><head>upd:replaceNode</head><glist><gitem><label>Parameters</label><def><eg xml:space="preserve">upd:replaceNode(
   $target as node(),
   $replacement as node()*)</eg></def></gitem><gitem><label>Summary</label><def><p>Replaces <code>$target</code> with <code>$replacement</code>.</p></def></gitem><gitem><label>Constraints</label><def><p><code>$target</code> must be a node that has a parent. If <code>$target</code> is an attribute node, <code>$replacement</code> must consist of zero or more attribute nodes. If <code>$target</code> is an element, text, comment, or processing instruction node, <code>$replacement</code> must be consist of zero or more element, text, comment, or processing instruction nodes.</p></def></gitem><gitem><label>Semantics</label><def><olist><item><p>Effects on nodes in <code>$replacement</code>:</p><olist><item><p>For each node in <code>$replacement</code>, the <code>parent</code> property is set to <code>parent($target)</code>.</p></item><item><p>If the <code>type-name</code> property of <code>parent($target)</code> is <code>xs:untyped</code>, then <code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-set-to-untyped" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:setToUntyped</loc>()</code> is invoked on each node in <code>$replacement</code>.</p></item></olist></item><item><p>Effect on <code>$target</code>:</p><olist><item><p>The <code>parent</code> property of <code>$target</code> is set to empty.</p></item></olist></item><item><p>Effects on <code>parent($target)</code>:</p><olist><item><p>If <code>$target</code> is an attribute node, the <code>attributes</code> property of <code>parent($target)</code> is modified by removing <code>$target</code> and adding the nodes in <code>$replacement</code> (if any).</p></item><item><p>If <code>$target</code> is an attribute node, the <code>namespaces</code> property of <code>parent($target)</code> is modified to add namespace bindings for any attribute namespace prefixes in <code>$replacement</code> that did not already have bindings. These bindings are <termref def="dt-mark">marked for namespace propagation</termref>.</p></item><item><p>If <code>$target</code> is an element, text, comment, or processing instruction node, the <code>children</code> property of <code>parent($target)</code> is modified by removing <code>$target</code> and adding the nodes in <code>$replacement</code> (if any) in the former position of <code>$target</code>, preserving their order.</p></item><item><p>If <code>$target</code> or any node in <code>$replacement</code> is an element, attribute, or text
node,  <code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-remove-type" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:removeType</loc>(parent($target))</code> is invoked.</p></item></olist></item></olist></def></gitem></glist></div3><div3 id="id-upd-replace-value"><head>upd:replaceValue</head><glist><gitem><label>Parameters</label><def><eg xml:space="preserve">upd:replaceValue(
   $target as node(),
   $string-value as xs:string)</eg></def></gitem><gitem><label>Summary</label><def><p>Replaces the string value of <code>$target</code> with <code>$string-value</code>.</p></def></gitem><gitem><label>Constraints</label><def><p><code>$target</code> must be an attribute, text, comment, or processing instruction node.</p></def></gitem><gitem><label>Semantics</label><def><olist><item><p>If <code>$target</code> is an attribute node:</p><olist><item><p><code>string-value</code> of <code>$target</code> is set to <code>$string-value</code>.</p></item><item><p><code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-remove-type" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:removeType</loc>($target)</code> is invoked.</p></item></olist></item><item><p>If <code>$target</code> is a text, comment, or processing instruction node: <code>content</code> of <code>$target</code> is set to <code>$string-value</code>.</p></item><item><p>If  <code>$target</code> is a text node that has a parent, <code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-remove-type" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:removeType</loc>(parent($target))</code> is invoked.</p></item></olist></def></gitem></glist></div3><div3 id="id-upd-replace-element-content"><head>upd:replaceElementContent</head><glist><gitem><label>Parameters</label><def><eg xml:space="preserve">upd:replaceElementContent(
   $target as element(),
   $text as text()?)</eg></def></gitem><gitem><label>Summary</label><def><p>Replaces the existing children of the element node <code>$target</code> by the optional text node <code>$text</code>. The attributes of <code>$target</code> are not affected.</p></def></gitem><gitem><label>Constraints</label><def><p>None.</p></def></gitem><gitem><label>Semantics</label><def><olist><item><p>For each node <code>$C</code> that is a child of <code>$target</code>, the <code>parent</code> property of <code>$C</code> is set to empty.</p></item><item><p>The <code>parent</code> property of <code>$text</code> is set to <code>$target</code>.</p></item><item><p>Effects on <code>$target</code>:</p><olist><item><p><code>children</code> is set to consist exclusively of <code>$text</code>. If <code>$text</code> is an empty sequence, then <code>$target</code> has no children.</p></item><item><p><code>typed-value</code> and <code>string-value</code> are set to the <code>content</code> property of <code>$text</code>. If <code>$text</code> is an empty sequence, then <code>typed-value</code> is an empty sequence and <code>string-value</code> is an empty string.</p></item><item><p><code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-remove-type" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:removeType($target)</loc></code> is invoked.</p></item></olist></item></olist></def></gitem></glist></div3><div3 id="id-upd-rename"><head>upd:rename</head><glist><gitem><label>Parameters</label><def><eg xml:space="preserve">upd:rename(
   $target as node(),
   $newName as xs:QName)</eg></def></gitem><gitem><label>Summary</label><def><p>Changes the node-name of <code>$target</code> to <code>$newName</code>.</p></def></gitem><gitem><label>Constraints</label><def><p><code>$target</code> must be an element, attribute, or processing instruction node.</p></def></gitem><gitem><label>Semantics</label><def><olist><item><p>If <code>$target</code> is an element node:</p><olist><item><p><code>node-name</code> of <code>$target</code> is set to <code>$newName</code>.</p></item><item><p><code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-remove-type" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:removeType</loc>($target)</code> is invoked.</p></item><item><p>If <code>$newname</code> has no prefix and no namespace URI, 
the <code>namespaces</code> property of <code>$target</code> is modified by removing the binding (if any) 
for the empty prefix.</p></item><item><p>The <code>namespaces</code> property of <code>$target</code> is modified to add a namespace binding derived from <code>$newName</code>, if this binding did not already exist.

This binding is <termref def="dt-mark">marked for namespace propagation</termref>.
</p></item></olist></item><item><p>If <code>$target</code> is an attribute node:</p><olist><item><p><code>node-name</code> of <code>$target</code> is set to <code>$newName</code>.</p></item><item><p><code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-remove-type" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:removeType</loc>($target)</code> is invoked.</p></item><item><p>If <code>$newName</code> is <code>xml:id</code>, the <code>is-id</code> property of <code>$target</code> is set to <code>true</code>.</p></item><item><p>If <code>$target</code> has a parent, the <code>namespaces</code> property of <code>parent($target)</code> is modified to add a namespace binding derived from <code>$newName</code>, if this binding did not already exist.

This binding is <termref def="dt-mark">marked for namespace propagation</termref>.
</p></item></olist></item><item><p>If <code>$target</code> is a processing instruction node, its <code>target</code> property is set to the local part of  <code>$newName</code>.</p></item></olist><note><p>At the end of a <termref def="dt-snapshot">snapshot</termref>, if multiple attribute nodes with the same parent have the same qualified name, an error will be raised by <code>upd:applyUpdates</code>.</p></note></def></gitem></glist></div3><div3 id="id-upd-put"><head>upd:put</head><glist><gitem><label>Parameters</label><def><eg xml:space="preserve">upd:put(
   $node as node(),
   $uri as xs:string,
   $params as element(output:serialization-parameters))</eg></def></gitem><gitem><label>Summary</label><def><p> The XDM node tree rooted at <code>$node</code> is stored to the location specified by <code>$uri</code>.</p></def></gitem><gitem><label>Constraints</label><def><p><code>$uri</code> must be a valid absolute URI.</p></def></gitem><gitem><label>Semantics</label><def><p>The external effects of <code>upd:put</code> are implementation-defined,
since they occur outside the domain of XQuery. The intent is that, if <code>upd:put</code> is invoked on a document node and no error is raised, a
subsequent query can access the stored document by invoking
<code>fn:doc</code> with the same URI.
</p><p>
An implementation that uses serialization when storing the node <termref def="must">MUST</termref> use the serialization parameters identified by <code>$params</code>.
</p></def></gitem></glist></div3></div2><div2 id="id-update-routines"><head>Update Routines</head><div3 id="id-upd-compatibility-check"><head>upd:compatibilityCheck</head><glist><gitem><label>Parameters</label><def><eg xml:space="preserve">upd:compatibilityCheck(
   $pul as pending-update-list)</eg></def></gitem><gitem><label>Summary</label><def><p>
          Performs compatibility checking against a <termref def="dt-pending-update-list">pending update list</termref>,
          raising errors if problems are found.
        </p></def></gitem><gitem><label>Constraints</label><def><p>None.</p></def></gitem><gitem><label>Semantics</label><def><p>
            A dynamic error if any of the following conditions are detected:
          </p><olist><item><p>Two or more <code>upd:rename</code> primitives in <code>$pul</code> have the same target node <errorref code="0015" class="DY"/>.</p></item><item><p>Two or more <code>upd:replaceNode</code> primitives in <code>$pul</code> have the same target node <errorref code="0016" class="DY"/>.</p></item><item><p>Two or more <code>upd:replaceValue</code> primitives in <code>$pul</code> have the same target node <errorref code="0017" class="DY"/>.</p></item><item><p>Two or more <code>upd:replaceElementContent</code> primitives in <code>$pul</code> have the same target node <errorref code="0017" class="DY"/>.</p></item><item><p>Two or more <code>upd:put</code> primitives in <code>$pul</code> have the same <code>$uri</code> operand <errorref code="0031" class="DY"/>.</p></item><item><p>
                Two or more primitives in <code>$pul</code> create  <termref def="dt-conflict">conflicting</termref> namespace bindings for the same element node <errorref code="0024" class="DY"/>. The following kinds of primitives create namespace bindings:
              </p><olist><item><p>
                    <code>upd:insertAttributes</code> creates one namespace binding on the <code>$target</code> element
                    corresponding to the <termref def="dt-implied-namespace-binding">implied namespace binding</termref> of the name of each attribute node in
                    <code>$content</code>.
                  </p></item><item><p>
                    <code>upd:replaceNode</code> creates one namespace binding on the <code>$target</code> element
                    corresponding to the <termref def="dt-implied-namespace-binding">implied namespace binding</termref> of the name of each attribute node in
                    <code>$replacement</code>.
                  </p></item><item><p>
                    <code>upd:rename</code> creates a namespace binding on <code>$target</code>, or on the parent (if any) of
                <code>$target</code> if <code>$target</code> is an attribute node, corresponding to the <termref def="dt-implied-namespace-binding">implied namespace binding</termref> of <code>$newName</code>.
                </p></item></olist></item></olist></def></gitem></glist></div3><div3 id="id-upd-merge-updates"><head>upd:mergeUpdates</head><glist><gitem><label>Parameters</label><def><eg xml:space="preserve">upd:mergeUpdates(
   $pul1 as pending-update-list,
   $pul2 as pending-update-list)</eg></def></gitem><gitem><label>Summary</label><def><p>Merges two <termref def="dt-pending-update-list">pending update lists</termref>.</p></def></gitem><gitem><label>Constraints</label><def><p>None.</p></def></gitem><gitem><label>Semantics</label><def><olist><item><p>
              The two <termref def="dt-pending-update-list">pending update lists</termref> are merged
              and a single pending update list containing all the update primitives from both lists.
              The resulting pending update list is returned.
            </p></item><item><p>
              Optionally, <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-compatibility-check" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:compatibilityCheck</loc> may be executed against
              the resulting pending update list.
            </p></item></olist></def></gitem></glist></div3><div3 id="id-upd-apply-updates"><head>upd:applyUpdates</head><glist><gitem><label>Parameters</label><def><eg xml:space="preserve">upd:applyUpdates(
   $pul as pending-update-list,
   $revalidation-mode as xs:string,
   $inherit-namespaces as xs:boolean)</eg></def></gitem><gitem><label>Summary</label><def><p>This routine ends a <termref def="dt-snapshot">snapshot</termref> by making effective  the semantics of all the update primitives on a <termref def="dt-pending-update-list">pending update list</termref> and by revalidating the resulting <termref def="dt-xdm-instance">XDM instance</termref>.</p></def></gitem><gitem><label>Constraints</label><def><p><code>$revalidation-mode</code> must be <code>"strict"</code>, <code>"lax"</code>, or <code>"skip"</code></p></def></gitem><gitem><label>Semantics</label><def><olist><item><p>
      Checks the update primitives on <code>$pul</code> for compatibility using
      <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-compatibility-check" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:compatibilityCheck</loc>.
    </p></item><item><p>The semantics of all  <termref def="dt-update-primitive">update primitives</termref> on <code>$pul</code>, other than <code>upd:put</code> primitives, are made effective in the following order:</p><olist><item><p>First, all <code>upd:insertInto</code>, <code>upd:insertAttributes</code>, <code>upd:replaceValue</code>, and <code>upd:rename</code>  primitives are applied.</p></item><item><p>Next, all <code>upd:insertBefore</code>, <code>upd:insertAfter</code>, <code>upd:insertIntoAsFirst</code>, and <code>upd:insertIntoAsLast</code> primitives are applied.</p></item><item><p>Next, all <code>upd:replaceNode</code> primitives are applied.</p></item><item><p>Next, all <code>upd:replaceElementContent</code> primitives are applied.</p></item><item><p>Next, all <code>upd:delete</code> primitives are applied.</p></item></olist></item><item><p>If, as a net result of the above steps, the <code>children</code> property of some node contains adjacent text nodes, these adjacent text nodes are merged into a single text node. The string-value of the resulting text node is the concatenated string-values of the adjacent text nodes, with no intervening space added. The <termref def="dt-node-identity">node identity</termref> of the resulting text node is implementation-dependent.</p></item><item><p>If, as a net result of the above steps, the <code>children</code> property of some node contains an empty text node, that empty text node is deleted from the <code>children</code> property.</p></item><item><p>If, after applying the updates, any <termref def="dt-xdm-instance">XDM instance</termref> (including a node that has
been deleted or detached from its parent, or that is a descendant of such a
node) violates any constraint specified in <bibref ref="xpath-datamodel-30"/>, a
dynamic error is raised <errorref code="0021" class="DY"/>.</p><note><p>For example, a data model constraint violation might occur if multiple attributes with the same parent have the same qualified name (see <xspecref spec="DM" ref="ElementNodeOverview"/>.)</p></note><note><p>During processing of a <termref def="dt-pending-update-list">pending update list</termref>, an <termref def="dt-xdm-instance">XDM instance</termref> may temporarily violate a data model constraint. An error is raised only if a constraint remains unsatisfied after all update primitives other than <code>upd:put</code> have been applied.</p></note></item><item><p>If <code>$inherit-namespaces</code> is <code>true</code>, then <code><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#id-upd-propagate-namespace" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">upd:propagate-namespace</loc>($element, $prefix, $uri)</code> is invoked
for each namespace binding that was <termref def="dt-mark">marked for namespace propagation</termref>, where <code>$element</code> is the element node on which the namespace binding appears, <code>$prefix</code> is the namespace prefix, and <code>$uri</code> is the namespace URI. Each of these nodes is then unmarked.</p></item><item><p>For each document or element node <code>$top</code> that was <termref def="dt-mark">marked for revalidation</termref> by one of the earlier steps, <code>upd:revalidate($top, $revalidation-mode)</code> is invoked. Each of these nodes is then unmarked.</p></item><item><p>As the final step, all <code>upd:put</code> primitives on <code>$pul</code> are applied.</p></item><item><p>The  <code>upd:applyUpdates</code> operation is atomic with respect to the data model. In other words, if <code>upd:applyUpdates</code> terminates normally, the resulting <termref def="dt-xdm-instance">XDM instance</termref> reflects the result of all update primitives; but if <code>upd:applyUpdates</code> raises an error, the resulting <termref def="dt-xdm-instance">XDM instance</termref>  reflects no changes. Atomicity is guaranteed only with respect to operations on XDM instances, 
and only with respect to error conditions specified in this document.</p><note><p>The results of implementation-dependent error conditions such as exceeding 
resource limits are beyond the scope of this specification.</p></note></item><item><p>Propagation
of XDM changes to an underlying persistent store is beyond the
scope of this specification. For example, the effect on persistent storage of deleting a node that has no parent is beyond the scope of this specification.</p></item></olist></def></gitem></glist></div3><div3 id="id-upd-revalidate"><head>upd:revalidate</head><glist><gitem><label>Parameters</label><def><eg xml:space="preserve">upd:revalidate(
   $top as node(),
   $revalidation-mode as xs:string)</eg></def></gitem><gitem><label>Constraints</label><def><p><code>$top</code> must be a document node or an element node.</p><p><code>$revalidation-mode</code> must be <code>"strict"</code>, <code>"lax"</code>, or <code>"skip"</code>.</p></def></gitem><gitem><label>Summary</label><def><p>Schema validation is applied to the subtree rooted at <code>$top</code> in order to recover the types of updated nodes while preserving their <termref def="dt-node-identity">node identities</termref>.</p></def></gitem><gitem><label>Semantics</label><def><p>If <code>$revalidation-mode</code> is <code>skip</code>, <code>upd:revalidate</code> performs no action. Otherwise:</p><olist><item><p>If <code>$revalidation-mode</code> is <code>lax</code>, define <code>$topV</code> as the result of the XQuery expression <code>validate lax {$top}</code>. If <code>$revalidation-mode</code> is <code>strict</code>, define <code>$topV</code> as the result of the XQuery expression <code>validate strict {$top}</code>. During computation of <code>$topV</code>, it is necessary to maintain a mapping between each node in <code>$topV</code> and the corresponding node (if any) in the subtree rooted at <code>$top</code> (this mapping is maintained in an implementation-dependent way.)</p><note><ulist><item><p>This step may raise an error <xerrorref spec="XQ" code="0027" class="DY"/> if <code>$top</code> is found to be invalid.</p></item><item><p>Some of the nodes in <code>$topV</code> (for example, default attributes generated by the validation process) may have no corresponding nodes in <code>$top</code>.</p></item></ulist></note></item><item><p>For each node <code>$nV</code> in <code>$topV</code> that has a corresponding node <code>$n</code> in <code>$top</code>, replace the following properties of <code>$n</code> with the corresponding properties of <code>$nV</code>: <code>type-name</code>, <code>typed-value</code>, <code>string-value</code>, <code>is-id</code>, <code>is-idrefs</code>, <code>namespace-bindings</code>, <code>nilled</code>.</p></item><item><p>For each node <code>$nV</code> in <code>$topV</code> that does not have a corresponding node in <code>$top</code>, insert the node <code>$nV</code> into the subtree rooted at <code>$top</code> as a child or attribute of the node corresponding to the parent of <code>$nV</code>.</p></item><item><p>The result of <code>upd:revalidate</code> is to modify the properties of the nodes rooted at <code>$top</code> and possibly to add some new nodes to this subtree. When the revalidation process is complete, <code>$topV</code> can be discarded.</p></item></olist><note><p>After revalidation, the type annotations of the nodes in the validated subtree are consistent with their content. It is expected that implementations will optimize the revalidation process by taking into account which nodes have been modified since they were last validated.</p></note></def></gitem></glist></div3><div3 id="id-upd-remove-type"><head>upd:removeType</head><glist><gitem><label>Parameters</label><def><eg xml:space="preserve">upd:removeType(
   $N as node())</eg></def></gitem><gitem><label>Constraints</label><def><p><code>$N</code> must be an element or attribute node</p></def></gitem><gitem><label>Summary</label><def><p> This routine is applied to a node whose name or content has been modified, in order to remove specific type information from the node and its ancestors, pending revalidation.</p></def></gitem><gitem><label>Semantics</label><def><olist><item><p>If <code>$N</code> is an element node, its properties are changed as follows:</p><olist><item><p> If <code>type-name</code> is not equal to <code>xs:untyped</code>, then</p><p><olist><item><p><code>type-name</code> is set to <code>xs:anyType</code></p></item><item><p>If the parent of <code>N</code> is an element node, then <code>upd:removeType(parent($N))</code> is invoked.</p></item></olist> </p></item><item><p><code>string-value</code> is set equal to the concatenated contents of the text node descendants, in document order.</p></item><item><p><code>typed-value</code> is set equal to the <code>string-value</code> property, as an instance of <code>xs:untypedAtomic</code>.</p><note><p>The <termref def="dt-data-model-30">data model</termref> allows some flexibility to implementations regarding whether <code>string-value</code> and/or <code>typed-value</code> are stored or computed dynamically.</p></note></item><item><p><code>nilled</code>, <code>is-id</code>, and <code>is-idrefs</code> are set to <code>false</code>.</p></item></olist></item><item><p>If <code>$N</code> is an attribute node, its properties are changed as follows:</p><olist><item><p><code>type-name</code> is set to <code>xs:untypedAtomic</code>.</p></item><item><p><code>typed-value</code> is set equal to the <code>string-value</code> property, as an instance of <code>xs:untypedAtomic</code>.</p></item><item><p> <code>is-id</code> and <code>is-idrefs</code> are set to <code>false</code>.</p></item><item><p>If <code>$N</code> has a parent, <code>upd:removeType(parent($N))</code> is invoked.</p></item></olist></item><item><p>The topmost ancestor of <code>$N</code> is <termref def="dt-mark">marked</termref> for revalidation.</p><p><termdef term="mark" id="dt-mark">To <term>mark</term> a node means to identify the node as participating in a later operation.</termdef> Marking of nodes is accomplished in an implementation-dependent way--for example, an implementation might maintain a list of marked nodes.</p></item></olist></def></gitem></glist></div3><div3 id="id-upd-set-to-untyped"><head>upd:setToUntyped</head><glist><gitem><label>Parameters</label><def><eg xml:space="preserve">upd:setToUntyped(
   $N as node())</eg></def></gitem><gitem><label>Constraints</label><def><p><code>$N</code> must be an element or attribute node</p></def></gitem><gitem><label>Summary</label><def><p> This routine is applied to a node that has been inserted into an untyped context, which requires that the node and its descendants be untyped as well.</p></def></gitem><gitem><label>Semantics</label><def><olist><item><p>If <code>$N</code> is an element node, its properties are changed as follows:</p><olist><item><p><code>type-name</code> is set to <code>xs:untyped</code>.</p></item><item><p><code>typed-value</code> is set equal to the <code>string-value</code> property, as an instance of <code>xs:untypedAtomic</code>.</p><note><p>The <termref def="dt-data-model-30">data model</termref> allows some flexibility to implementations regarding whether <code>string-value</code> and/or <code>typed-value</code> are stored or computed dynamically.</p></note></item><item><p><code>nilled</code>, <code>is-id</code>, and <code>is-idrefs</code> are set to <code>false</code>.</p></item><item><p><code>upd:setToUntyped()</code> is invoked on the attributes and child element nodes of <code>$N</code>.</p></item></olist></item><item><p>If <code>$N</code> is an attribute node, its properties are changed as follows:</p><olist><item><p><code>type-name</code> is set to <code>xs:untypedAtomic</code>.</p></item><item><p><code>typed-value</code> is set equal to the <code>string-value</code> property, as an instance of <code>xs:untypedAtomic</code>.</p></item><item><p><code>is-idrefs</code> is set to <code>false</code>.</p></item><item><p><code>is-id</code> is set to <code>false</code> if the attribute name is not <code>xml:id</code>.</p></item></olist></item></olist></def></gitem></glist></div3><div3 id="id-upd-propagate-namespace"><head>upd:propagateNamespace</head><glist><gitem><label>Parameters</label><def><eg xml:space="preserve">upd:propagateNamespace(
   $element as element(), 
   $prefix as xs:NCName, 
   $uri as xs:anyURI)</eg></def></gitem><gitem><label>Constraints</label><def><p>None</p></def></gitem><gitem><label>Summary</label><def><p>Propagates a namespace binding to all descendants of an element.</p></def></gitem><gitem><label>Semantics</label><def><p>For each element <code>$child</code> among the children of <code>$element</code> that does not have a namespace binding for <code>$prefix</code>,</p><olist><item><p>add a namespace binding <code>($prefix, $uri)</code> to <code>$child</code></p></item><item><p>call <code>upd:propagateNamespace($child, $prefix, $uri)</code></p></item></olist></def></gitem></glist></div3></div2></div1><div1 id="id-xquery-update-conformance"><head>Conformance</head><p>This section defines the conformance criteria for an XQuery processor. In this section, the
        following terms are used to indicate the requirement levels defined in
        <bibref ref="RFC2119"/>. <termdef id="must" term="must">
            <term>MUST</term> means that the item is an absolute requirement of the specification.</termdef>
        <termdef id="may" term="may">
            <term>MAY</term> means that an item is truly optional.</termdef>
        <termdef id="should" term="should">
            <term>SHOULD</term> means that there may exist valid reasons in particular circumstances
            to ignore a particular item, but the full implications must be understood and carefully
            weighed before choosing a different course.</termdef>
    </p><p>An XQuery processor that claims to conform to this specification
        <termref def="must">MUST</termref> include a claim of Minimal Conformance as defined in
        <specref ref="id-minimal-conformance"/>. In addition to a claim of Minimal Conformance, it
        <termref def="may">MAY</termref> claim conformance to one or more optional features
        defined in <specref ref="id-conform-optional-features"/>.
    </p><p>
      <termdef id="dt-multiple-results" term="XQuery with Multiple Results">
      An XQuery processor <termref def="may">MAY</termref> claim conformance to a subset of the
      XQuery Update 3.0 specification called <term>"XQuery with Multiple Results"</term> as defined
      in <specref ref="id-multiple-results"/>.</termdef> Implementations conforming to this subset but not to the
      Minimal Conformance may not claim to implement this specification.
    </p><div2 id="id-minimal-conformance"><head>Minimal Conformance</head><p>Minimal Conformance to this specification <termref def="must">MUST</termref> include all
            of the following items:</p><olist><item><p>Minimal Conformance to <bibref ref="xquery-30"/>.</p></item><item><p>Support for everything specified in this document
                except those features specified in <specref ref="id-conform-optional-features"/> to be optional
                and <specref ref="id-xquf-xqueryx"/>. If an
                implementation does not provide a given optional
                feature, it <termref def="must">MUST</termref>
                implement any requirements specified in <specref ref="id-conform-optional-features"/> for
                implementations that do not provide that feature.</p></item><item><p>A definition of every item specified to be implementation-defined,
	      unless that item is part of an optional feature that is
	      not supported by the implementation. A list of implementation-defined
	      items can be found in <specref ref="id-impl-defs"/>.</p><note><p>Implementations are not required to define
                    items specified to be implementation-dependent.</p></note></item></olist></div2><div2 id="id-conform-optional-features"><head>Optional Features</head><p>An implementation of XQuery that includes the Update
	    Facility <termref def="may">MAY</termref> also support the Optional Features of <bibref ref="xquery-30"/>. These are Schema Import Feature, Schema
	    Validation Feature, Full Axis
	    Feature, Module Feature, and Serialization Feature.</p></div2><div2 id="id-multiple-results"><head>XQuery with Multiple Results</head><p>
        A subset of the XQuery Update 3.0 specification called
        <termref def="dt-multiple-results">"XQuery with Multiple Results"</termref> is defined for the purposes
        of implementations only wishing to allow multiple results to be returned from an XQuery program.
        Implementations claiming conformance to the
        <termref def="dt-multiple-results">"XQuery with Multiple Results"</termref> subset
        <termref def="must">MUST</termref> include all of the following items:
      </p><olist><item><p>
            Minimal Conformance to <bibref ref="xquery-30"/>.
          </p></item><item><p>
            Support for the facilities described in the following sections of this document:
          </p><ulist><item><p>
                <specref ref="id-processing-model"/>
              </p></item><item><p>
                <specref ref="id-function-declaration"/>
                excluding <code>%updating</code> and <code>%simple</code> annotations.
              </p></item><item><p>
                <specref ref="id-variable-declaration"/>
                excluding <code>%updating</code> and <code>%simple</code> annotations.
              </p></item><item><p>
                <specref ref="id-context-item-declaration"/>
              </p></item><item><p>
                <specref ref="id-static-context-extensions"/>
              </p></item><item><p>
                <specref ref="id-extensions-to-existing"/>
              </p></item><item><p>
                <specref ref="id-func-put"/>
              </p></item><item><p>
                <specref ref="id-upd-put"/>
              </p></item><item><p>
                <specref ref="id-update-routines"/>
              </p></item></ulist></item><item><p>
            Use of other types of XQuery Update 3.0 expression <termref def="should">SHOULD</termref> result
            in an error <xerrorref spec="XP" code="0003" class="ST"/>.
          </p></item></olist></div2></div1><div1 id="id-xqueryx-update-conformance"><head>XQueryX Conformance</head><p>This section defines the conformance criteria for an XQueryX processor 
that includes the Update Facility.</p><p>In this section, the terms <termref def="must">MUST</termref>, <termref def="may">MAY</termref>, and <termref def="should">SHOULD</termref> are used as
defined in <specref ref="id-xquery-update-conformance"/>.</p><p>An XQueryX processor that claims to conform to this specification
<termref def="must">MUST</termref> implement the XQueryX syntax as defined
in <specref ref="id-xquf-xqueryx"/> and include a claim of Minimal
Conformance as defined in <specref ref="id-xquery-update-conformance"/>.  In addition to a claim of
Minimal Conformance, it <termref def="may">MAY</termref> claim conformance to one or more optional
features defined in <specref ref="id-conform-optional-features"/>.</p></div1></body><back id="id-appendices"><div1 id="id-grammar"><head>EBNF for XQuery 3.0 Grammar with Update extensions</head><p>The EBNF in this document and in this section is aligned with
the current XML Query 3.0 grammar (see <bibref ref="xquery-30"/>).</p><scrap role="non-terminal-structure-expand" headstyle="show"><head/><prod num="1" id="prod-xquery30-Module"><lhs>Module</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VersionDecl" xlink:type="simple">VersionDecl</nt>?  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-LibraryModule" xlink:type="simple">LibraryModule</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-MainModule" xlink:type="simple">MainModule</nt>)</rhs></prod><prod num="2" id="prod-xquery30-VersionDecl"><lhs>VersionDecl</lhs><rhs>"xquery"  (("encoding"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-StringLiteral" xlink:type="simple">StringLiteral</nt>)  |  ("version"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-StringLiteral" xlink:type="simple">StringLiteral</nt>  ("encoding"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-StringLiteral" xlink:type="simple">StringLiteral</nt>)?))  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Separator" xlink:type="simple">Separator</nt></rhs></prod><prod num="3" id="prod-xquery30-MainModule"><lhs>MainModule</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Prolog" xlink:type="simple">Prolog</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-QueryBody" xlink:type="simple">QueryBody</nt></rhs></prod><prod num="4" id="prod-xquery30-LibraryModule"><lhs>LibraryModule</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ModuleDecl" xlink:type="simple">ModuleDecl</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Prolog" xlink:type="simple">Prolog</nt></rhs></prod><prod num="5" id="prod-xquery30-ModuleDecl"><lhs>ModuleDecl</lhs><rhs>"module"  "namespace"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-NCName" xlink:type="simple">NCName</nt>  "="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-URILiteral" xlink:type="simple">URILiteral</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Separator" xlink:type="simple">Separator</nt></rhs></prod><prod num="6" id="prod-xquery30-Prolog"><lhs>Prolog</lhs><rhs>((<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-DefaultNamespaceDecl" xlink:type="simple">DefaultNamespaceDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Setter" xlink:type="simple">Setter</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-NamespaceDecl" xlink:type="simple">NamespaceDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Import" xlink:type="simple">Import</nt>)  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Separator" xlink:type="simple">Separator</nt>)*  ((<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ContextItemDecl" xlink:type="simple">ContextItemDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-AnnotatedDecl" xlink:type="simple">AnnotatedDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-OptionDecl" xlink:type="simple">OptionDecl</nt>)  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Separator" xlink:type="simple">Separator</nt>)*</rhs></prod><prod num="7" id="prod-xquery30-Separator"><lhs>Separator</lhs><rhs>";"</rhs></prod><prod num="8" id="prod-xquery30-Setter"><lhs>Setter</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-BoundarySpaceDecl" xlink:type="simple">BoundarySpaceDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-DefaultCollationDecl" xlink:type="simple">DefaultCollationDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-BaseURIDecl" xlink:type="simple">BaseURIDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ConstructionDecl" xlink:type="simple">ConstructionDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-OrderingModeDecl" xlink:type="simple">OrderingModeDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EmptyOrderDecl" xlink:type="simple">EmptyOrderDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-RevalidationDecl" xlink:type="simple">RevalidationDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-CopyNamespacesDecl" xlink:type="simple">CopyNamespacesDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-DecimalFormatDecl" xlink:type="simple">DecimalFormatDecl</nt></rhs></prod><prod num="9" id="prod-xquery30-BoundarySpaceDecl"><lhs>BoundarySpaceDecl</lhs><rhs>"declare"  "boundary-space"  ("preserve"  |  "strip")</rhs></prod><prod num="10" id="prod-xquery30-DefaultCollationDecl"><lhs>DefaultCollationDecl</lhs><rhs>"declare"  "default"  "collation"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-URILiteral" xlink:type="simple">URILiteral</nt></rhs></prod><prod num="11" id="prod-xquery30-BaseURIDecl"><lhs>BaseURIDecl</lhs><rhs>"declare"  "base-uri"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-URILiteral" xlink:type="simple">URILiteral</nt></rhs></prod><prod num="12" id="prod-xquery30-ConstructionDecl"><lhs>ConstructionDecl</lhs><rhs>"declare"  "construction"  ("strip"  |  "preserve")</rhs></prod><prod num="13" id="prod-xquery30-OrderingModeDecl"><lhs>OrderingModeDecl</lhs><rhs>"declare"  "ordering"  ("ordered"  |  "unordered")</rhs></prod><prod num="14" id="prod-xquery30-EmptyOrderDecl"><lhs>EmptyOrderDecl</lhs><rhs>"declare"  "default"  "order"  "empty"  ("greatest"  |  "least")</rhs></prod><prod num="15" id="prod-xquery30-CopyNamespacesDecl"><lhs>CopyNamespacesDecl</lhs><rhs>"declare"  "copy-namespaces"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-PreserveMode" xlink:type="simple">PreserveMode</nt>  ","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-InheritMode" xlink:type="simple">InheritMode</nt></rhs></prod><prod num="16" id="prod-xquery30-PreserveMode"><lhs>PreserveMode</lhs><rhs>"preserve"  |  "no-preserve"</rhs></prod><prod num="17" id="prod-xquery30-InheritMode"><lhs>InheritMode</lhs><rhs>"inherit"  |  "no-inherit"</rhs></prod><prod num="18" id="prod-xquery30-DecimalFormatDecl"><lhs>DecimalFormatDecl</lhs><rhs>"declare"  (("decimal-format"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EQName" xlink:type="simple">EQName</nt>)  |  ("default"  "decimal-format"))  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-DFPropertyName" xlink:type="simple">DFPropertyName</nt>  "="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-StringLiteral" xlink:type="simple">StringLiteral</nt>)*</rhs></prod><prod num="19" id="prod-xquery30-DFPropertyName"><lhs>DFPropertyName</lhs><rhs>"decimal-separator"  |  "grouping-separator"  |  "infinity"  |  "minus-sign"  |  "NaN"  |  "percent"  |  "per-mille"  |  "zero-digit"  |  "digit"  |  "pattern-separator"</rhs></prod><prod num="20" id="prod-xquery30-Import"><lhs>Import</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SchemaImport" xlink:type="simple">SchemaImport</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ModuleImport" xlink:type="simple">ModuleImport</nt></rhs></prod><prod num="21" id="prod-xquery30-SchemaImport"><lhs>SchemaImport</lhs><rhs>"import"  "schema"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SchemaPrefix" xlink:type="simple">SchemaPrefix</nt>?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-URILiteral" xlink:type="simple">URILiteral</nt>  ("at"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-URILiteral" xlink:type="simple">URILiteral</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-URILiteral" xlink:type="simple">URILiteral</nt>)*)?</rhs></prod><prod num="22" id="prod-xquery30-SchemaPrefix"><lhs>SchemaPrefix</lhs><rhs>("namespace"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-NCName" xlink:type="simple">NCName</nt>  "=")  |  ("default"  "element"  "namespace")</rhs></prod><prod num="23" id="prod-xquery30-ModuleImport"><lhs>ModuleImport</lhs><rhs>"import"  "module"  ("namespace"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-NCName" xlink:type="simple">NCName</nt>  "=")?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-URILiteral" xlink:type="simple">URILiteral</nt>  ("at"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-URILiteral" xlink:type="simple">URILiteral</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-URILiteral" xlink:type="simple">URILiteral</nt>)*)?</rhs></prod><prod num="24" id="prod-xquery30-NamespaceDecl"><lhs>NamespaceDecl</lhs><rhs>"declare"  "namespace"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-NCName" xlink:type="simple">NCName</nt>  "="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-URILiteral" xlink:type="simple">URILiteral</nt></rhs></prod><prod num="25" id="prod-xquery30-DefaultNamespaceDecl"><lhs>DefaultNamespaceDecl</lhs><rhs>"declare"  "default"  ("element"  |  "function")  "namespace"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-URILiteral" xlink:type="simple">URILiteral</nt></rhs></prod><prod num="26" id="prod-xquery30-AnnotatedDecl"><lhs>AnnotatedDecl</lhs><rhs>"declare"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-CompatibilityAnnotation" xlink:type="simple">CompatibilityAnnotation</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Annotation" xlink:type="simple">Annotation</nt>)*  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarDecl" xlink:type="simple">VarDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-FunctionDecl" xlink:type="simple">FunctionDecl</nt>)</rhs></prod><prod num="27" id="prod-xquery30-CompatibilityAnnotation"><lhs>CompatibilityAnnotation</lhs><rhs>"updating"</rhs></prod><prod num="28" id="prod-xquery30-Annotation"><lhs>Annotation</lhs><rhs>"%"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EQName" xlink:type="simple">EQName</nt>  ("("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Literal" xlink:type="simple">Literal</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Literal" xlink:type="simple">Literal</nt>)*  ")")?</rhs></prod><prod num="29" id="prod-xquery30-VarDecl"><lhs>VarDecl</lhs><rhs>"variable"  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarName" xlink:type="simple">VarName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  ((":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarValue" xlink:type="simple">VarValue</nt>)  |  ("external"  (":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarDefaultValue" xlink:type="simple">VarDefaultValue</nt>)?))</rhs></prod><prod num="30" id="prod-xquery30-VarValue"><lhs>VarValue</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="31" id="prod-xquery30-VarDefaultValue"><lhs>VarDefaultValue</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="32" id="prod-xquery30-ContextItemDecl"><lhs>ContextItemDecl</lhs><rhs>"declare"  "context"  "item"  ("as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ItemType" xlink:type="simple">ItemType</nt>)?  ((":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarValue" xlink:type="simple">VarValue</nt>)  |  ("external"  (":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarDefaultValue" xlink:type="simple">VarDefaultValue</nt>)?))</rhs></prod><prod num="33" id="prod-xquery30-FunctionDecl"><lhs>FunctionDecl</lhs><rhs>"function"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EQName" xlink:type="simple">EQName</nt>  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ParamList" xlink:type="simple">ParamList</nt>?  ")"  ("as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SequenceType" xlink:type="simple">SequenceType</nt>)?  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-FunctionBody" xlink:type="simple">FunctionBody</nt>  |  "external")</rhs><com><phrase><xspecref ref="parse-note-reserved-function-names" spec="XQ">gn: reserved-function-names</xspecref></phrase></com></prod><prod num="34" id="prod-xquery30-ParamList"><lhs>ParamList</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Param" xlink:type="simple">Param</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Param" xlink:type="simple">Param</nt>)*</rhs></prod><prod num="35" id="prod-xquery30-Param"><lhs>Param</lhs><rhs>"$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EQName" xlink:type="simple">EQName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?</rhs></prod><prod num="36" id="prod-xquery30-FunctionBody"><lhs>FunctionBody</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EnclosedExpr" xlink:type="simple">EnclosedExpr</nt></rhs></prod><prod num="37" id="prod-xquery30-EnclosedExpr"><lhs>EnclosedExpr</lhs><rhs>"{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Expr" xlink:type="simple">Expr</nt>  "}"</rhs></prod><prod num="38" id="prod-xquery30-OptionDecl"><lhs>OptionDecl</lhs><rhs>"declare"  "option"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EQName" xlink:type="simple">EQName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-StringLiteral" xlink:type="simple">StringLiteral</nt></rhs></prod><prod num="39" id="prod-xquery30-QueryBody"><lhs>QueryBody</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Expr" xlink:type="simple">Expr</nt></rhs></prod><prod num="40" id="prod-xquery30-Expr"><lhs>Expr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt>)*</rhs></prod><prod num="41" id="prod-xquery30-ExprSingle"><lhs>ExprSingle</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-FLWORExpr" xlink:type="simple">FLWORExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-QuantifiedExpr" xlink:type="simple">QuantifiedExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SwitchExpr" xlink:type="simple">SwitchExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TypeswitchExpr" xlink:type="simple">TypeswitchExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-IfExpr" xlink:type="simple">IfExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TryCatchExpr" xlink:type="simple">TryCatchExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-InsertExpr" xlink:type="simple">InsertExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-DeleteExpr" xlink:type="simple">DeleteExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-RenameExpr" xlink:type="simple">RenameExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ReplaceExpr" xlink:type="simple">ReplaceExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-UpdatingFunctionCall" xlink:type="simple">UpdatingFunctionCall</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-CopyModifyExpr" xlink:type="simple">CopyModifyExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-OrExpr" xlink:type="simple">OrExpr</nt></rhs></prod><prod num="42" id="prod-xquery30-FLWORExpr"><lhs>FLWORExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-InitialClause" xlink:type="simple">InitialClause</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-IntermediateClause" xlink:type="simple">IntermediateClause</nt>*  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ReturnClause" xlink:type="simple">ReturnClause</nt></rhs></prod><prod num="43" id="prod-xquery30-InitialClause"><lhs>InitialClause</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ForClause" xlink:type="simple">ForClause</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-LetClause" xlink:type="simple">LetClause</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-WindowClause" xlink:type="simple">WindowClause</nt></rhs></prod><prod num="44" id="prod-xquery30-IntermediateClause"><lhs>IntermediateClause</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-InitialClause" xlink:type="simple">InitialClause</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-WhereClause" xlink:type="simple">WhereClause</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-GroupByClause" xlink:type="simple">GroupByClause</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-OrderByClause" xlink:type="simple">OrderByClause</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-CountClause" xlink:type="simple">CountClause</nt></rhs></prod><prod num="45" id="prod-xquery30-ForClause"><lhs>ForClause</lhs><rhs>"for"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ForBinding" xlink:type="simple">ForBinding</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ForBinding" xlink:type="simple">ForBinding</nt>)*</rhs></prod><prod num="46" id="prod-xquery30-ForBinding"><lhs>ForBinding</lhs><rhs>"$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarName" xlink:type="simple">VarName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-AllowingEmpty" xlink:type="simple">AllowingEmpty</nt>?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-PositionalVar" xlink:type="simple">PositionalVar</nt>?  "in"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="47" id="prod-xquery30-AllowingEmpty"><lhs>AllowingEmpty</lhs><rhs>"allowing"  "empty"</rhs></prod><prod num="48" id="prod-xquery30-PositionalVar"><lhs>PositionalVar</lhs><rhs>"at"  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarName" xlink:type="simple">VarName</nt></rhs></prod><prod num="49" id="prod-xquery30-LetClause"><lhs>LetClause</lhs><rhs>"let"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-LetBinding" xlink:type="simple">LetBinding</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-LetBinding" xlink:type="simple">LetBinding</nt>)*</rhs></prod><prod num="50" id="prod-xquery30-LetBinding"><lhs>LetBinding</lhs><rhs>"$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarName" xlink:type="simple">VarName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  ":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="51" id="prod-xquery30-WindowClause"><lhs>WindowClause</lhs><rhs>"for"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TumblingWindowClause" xlink:type="simple">TumblingWindowClause</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SlidingWindowClause" xlink:type="simple">SlidingWindowClause</nt>)</rhs></prod><prod num="52" id="prod-xquery30-TumblingWindowClause"><lhs>TumblingWindowClause</lhs><rhs>"tumbling"  "window"  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarName" xlink:type="simple">VarName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  "in"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-WindowStartCondition" xlink:type="simple">WindowStartCondition</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-WindowEndCondition" xlink:type="simple">WindowEndCondition</nt>?</rhs></prod><prod num="53" id="prod-xquery30-SlidingWindowClause"><lhs>SlidingWindowClause</lhs><rhs>"sliding"  "window"  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarName" xlink:type="simple">VarName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  "in"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-WindowStartCondition" xlink:type="simple">WindowStartCondition</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-WindowEndCondition" xlink:type="simple">WindowEndCondition</nt></rhs></prod><prod num="54" id="prod-xquery30-WindowStartCondition"><lhs>WindowStartCondition</lhs><rhs>"start"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-WindowVars" xlink:type="simple">WindowVars</nt>  "when"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="55" id="prod-xquery30-WindowEndCondition"><lhs>WindowEndCondition</lhs><rhs>"only"?  "end"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-WindowVars" xlink:type="simple">WindowVars</nt>  "when"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="56" id="prod-xquery30-WindowVars"><lhs>WindowVars</lhs><rhs>("$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-CurrentItem" xlink:type="simple">CurrentItem</nt>)?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-PositionalVar" xlink:type="simple">PositionalVar</nt>?  ("previous"  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-PreviousItem" xlink:type="simple">PreviousItem</nt>)?  ("next"  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-NextItem" xlink:type="simple">NextItem</nt>)?</rhs></prod><prod num="57" id="prod-xquery30-CurrentItem"><lhs>CurrentItem</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EQName" xlink:type="simple">EQName</nt></rhs></prod><prod num="58" id="prod-xquery30-PreviousItem"><lhs>PreviousItem</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EQName" xlink:type="simple">EQName</nt></rhs></prod><prod num="59" id="prod-xquery30-NextItem"><lhs>NextItem</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EQName" xlink:type="simple">EQName</nt></rhs></prod><prod num="60" id="prod-xquery30-CountClause"><lhs>CountClause</lhs><rhs>"count"  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarName" xlink:type="simple">VarName</nt></rhs></prod><prod num="61" id="prod-xquery30-WhereClause"><lhs>WhereClause</lhs><rhs>"where"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="62" id="prod-xquery30-GroupByClause"><lhs>GroupByClause</lhs><rhs>"group"  "by"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-GroupingSpecList" xlink:type="simple">GroupingSpecList</nt></rhs></prod><prod num="63" id="prod-xquery30-GroupingSpecList"><lhs>GroupingSpecList</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-GroupingSpec" xlink:type="simple">GroupingSpec</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-GroupingSpec" xlink:type="simple">GroupingSpec</nt>)*</rhs></prod><prod num="64" id="prod-xquery30-GroupingSpec"><lhs>GroupingSpec</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-GroupingVariable" xlink:type="simple">GroupingVariable</nt>  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  ":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt>)?  ("collation"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-URILiteral" xlink:type="simple">URILiteral</nt>)?</rhs></prod><prod num="65" id="prod-xquery30-GroupingVariable"><lhs>GroupingVariable</lhs><rhs>"$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarName" xlink:type="simple">VarName</nt></rhs></prod><prod num="66" id="prod-xquery30-OrderByClause"><lhs>OrderByClause</lhs><rhs>(("order"  "by")  |  ("stable"  "order"  "by"))  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-OrderSpecList" xlink:type="simple">OrderSpecList</nt></rhs></prod><prod num="67" id="prod-xquery30-OrderSpecList"><lhs>OrderSpecList</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-OrderSpec" xlink:type="simple">OrderSpec</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-OrderSpec" xlink:type="simple">OrderSpec</nt>)*</rhs></prod><prod num="68" id="prod-xquery30-OrderSpec"><lhs>OrderSpec</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-OrderModifier" xlink:type="simple">OrderModifier</nt></rhs></prod><prod num="69" id="prod-xquery30-OrderModifier"><lhs>OrderModifier</lhs><rhs>("ascending"  |  "descending")?  ("empty"  ("greatest"  |  "least"))?  ("collation"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-URILiteral" xlink:type="simple">URILiteral</nt>)?</rhs></prod><prod num="70" id="prod-xquery30-ReturnClause"><lhs>ReturnClause</lhs><rhs>"return"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="71" id="prod-xquery30-QuantifiedExpr"><lhs>QuantifiedExpr</lhs><rhs>("some"  |  "every")  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarName" xlink:type="simple">VarName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  "in"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt>  (","  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarName" xlink:type="simple">VarName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  "in"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt>)*  "satisfies"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="72" id="prod-xquery30-SwitchExpr"><lhs>SwitchExpr</lhs><rhs>"switch"  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Expr" xlink:type="simple">Expr</nt>  ")"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SwitchCaseClause" xlink:type="simple">SwitchCaseClause</nt>+  "default"  "return"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="73" id="prod-xquery30-SwitchCaseClause"><lhs>SwitchCaseClause</lhs><rhs>("case"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SwitchCaseOperand" xlink:type="simple">SwitchCaseOperand</nt>)+  "return"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="74" id="prod-xquery30-SwitchCaseOperand"><lhs>SwitchCaseOperand</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="75" id="prod-xquery30-TypeswitchExpr"><lhs>TypeswitchExpr</lhs><rhs>"typeswitch"  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Expr" xlink:type="simple">Expr</nt>  ")"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-CaseClause" xlink:type="simple">CaseClause</nt>+  "default"  ("$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarName" xlink:type="simple">VarName</nt>)?  "return"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="76" id="prod-xquery30-CaseClause"><lhs>CaseClause</lhs><rhs>"case"  ("$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarName" xlink:type="simple">VarName</nt>  "as")?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SequenceTypeUnion" xlink:type="simple">SequenceTypeUnion</nt>  "return"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="77" id="prod-xquery30-SequenceTypeUnion"><lhs>SequenceTypeUnion</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SequenceType" xlink:type="simple">SequenceType</nt>  ("|"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SequenceType" xlink:type="simple">SequenceType</nt>)*</rhs></prod><prod num="78" id="prod-xquery30-IfExpr"><lhs>IfExpr</lhs><rhs>"if"  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Expr" xlink:type="simple">Expr</nt>  ")"  "then"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt>  "else"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="79" id="prod-xquery30-TryCatchExpr"><lhs>TryCatchExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TryClause" xlink:type="simple">TryClause</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-CatchClause" xlink:type="simple">CatchClause</nt>+</rhs></prod><prod num="80" id="prod-xquery30-TryClause"><lhs>TryClause</lhs><rhs>"try"  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TryTargetExpr" xlink:type="simple">TryTargetExpr</nt>  "}"</rhs></prod><prod num="81" id="prod-xquery30-TryTargetExpr"><lhs>TryTargetExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Expr" xlink:type="simple">Expr</nt></rhs></prod><prod num="82" id="prod-xquery30-CatchClause"><lhs>CatchClause</lhs><rhs>"catch"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-CatchErrorList" xlink:type="simple">CatchErrorList</nt>  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Expr" xlink:type="simple">Expr</nt>  "}"</rhs></prod><prod num="83" id="prod-xquery30-CatchErrorList"><lhs>CatchErrorList</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-NameTest" xlink:type="simple">NameTest</nt>  ("|"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-NameTest" xlink:type="simple">NameTest</nt>)*</rhs></prod><prod num="84" id="prod-xquery30-OrExpr"><lhs>OrExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-AndExpr" xlink:type="simple">AndExpr</nt> ( "or"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-AndExpr" xlink:type="simple">AndExpr</nt> )*</rhs></prod><prod num="85" id="prod-xquery30-AndExpr"><lhs>AndExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ComparisonExpr" xlink:type="simple">ComparisonExpr</nt> ( "and"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ComparisonExpr" xlink:type="simple">ComparisonExpr</nt> )*</rhs></prod><prod num="86" id="prod-xquery30-ComparisonExpr"><lhs>ComparisonExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-StringConcatExpr" xlink:type="simple">StringConcatExpr</nt> ( (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ValueComp" xlink:type="simple">ValueComp</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-GeneralComp" xlink:type="simple">GeneralComp</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-NodeComp" xlink:type="simple">NodeComp</nt>)  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-StringConcatExpr" xlink:type="simple">StringConcatExpr</nt> )?</rhs></prod><prod num="87" id="prod-xquery30-StringConcatExpr"><lhs>StringConcatExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-RangeExpr" xlink:type="simple">RangeExpr</nt> ( "||"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-RangeExpr" xlink:type="simple">RangeExpr</nt> )*</rhs></prod><prod num="88" id="prod-xquery30-RangeExpr"><lhs>RangeExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-AdditiveExpr" xlink:type="simple">AdditiveExpr</nt> ( "to"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-AdditiveExpr" xlink:type="simple">AdditiveExpr</nt> )?</rhs></prod><prod num="89" id="prod-xquery30-AdditiveExpr"><lhs>AdditiveExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-MultiplicativeExpr" xlink:type="simple">MultiplicativeExpr</nt> ( ("+"  |  "-")  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-MultiplicativeExpr" xlink:type="simple">MultiplicativeExpr</nt> )*</rhs></prod><prod num="90" id="prod-xquery30-MultiplicativeExpr"><lhs>MultiplicativeExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-UnionExpr" xlink:type="simple">UnionExpr</nt> ( ("*"  |  "div"  |  "idiv"  |  "mod")  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-UnionExpr" xlink:type="simple">UnionExpr</nt> )*</rhs></prod><prod num="91" id="prod-xquery30-UnionExpr"><lhs>UnionExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-IntersectExceptExpr" xlink:type="simple">IntersectExceptExpr</nt> ( ("union"  |  "|")  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-IntersectExceptExpr" xlink:type="simple">IntersectExceptExpr</nt> )*</rhs></prod><prod num="92" id="prod-xquery30-IntersectExceptExpr"><lhs>IntersectExceptExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-InstanceofExpr" xlink:type="simple">InstanceofExpr</nt> ( ("intersect"  |  "except")  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-InstanceofExpr" xlink:type="simple">InstanceofExpr</nt> )*</rhs></prod><prod num="93" id="prod-xquery30-InstanceofExpr"><lhs>InstanceofExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TreatExpr" xlink:type="simple">TreatExpr</nt> ( "instance"  "of"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SequenceType" xlink:type="simple">SequenceType</nt> )?</rhs></prod><prod num="94" id="prod-xquery30-TreatExpr"><lhs>TreatExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-CastableExpr" xlink:type="simple">CastableExpr</nt> ( "treat"  "as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SequenceType" xlink:type="simple">SequenceType</nt> )?</rhs></prod><prod num="95" id="prod-xquery30-CastableExpr"><lhs>CastableExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-CastExpr" xlink:type="simple">CastExpr</nt> ( "castable"  "as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SingleType" xlink:type="simple">SingleType</nt> )?</rhs></prod><prod num="96" id="prod-xquery30-CastExpr"><lhs>CastExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TransformWithExpr" xlink:type="simple">TransformWithExpr</nt> ( "cast"  "as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SingleType" xlink:type="simple">SingleType</nt> )?</rhs></prod><prod num="97" id="prod-xquery30-TransformWithExpr"><lhs>TransformWithExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-UnaryExpr" xlink:type="simple">UnaryExpr</nt> ( "transform"  "with"  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Expr" xlink:type="simple">Expr</nt>?  "}" )?</rhs></prod><prod num="98" id="prod-xquery30-UnaryExpr"><lhs>UnaryExpr</lhs><rhs>("-"  |  "+")* <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ValueExpr" xlink:type="simple">ValueExpr</nt></rhs></prod><prod num="99" id="prod-xquery30-ValueExpr"><lhs>ValueExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ValidateExpr" xlink:type="simple">ValidateExpr</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExtensionExpr" xlink:type="simple">ExtensionExpr</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SimpleMapExpr" xlink:type="simple">SimpleMapExpr</nt></rhs></prod><prod num="100" id="prod-xquery30-GeneralComp"><lhs>GeneralComp</lhs><rhs>"="  |  "!="  |  "&lt;"  |  "&lt;="  |  "&gt;"  |  "&gt;="</rhs></prod><prod num="101" id="prod-xquery30-ValueComp"><lhs>ValueComp</lhs><rhs>"eq"  |  "ne"  |  "lt"  |  "le"  |  "gt"  |  "ge"</rhs></prod><prod num="102" id="prod-xquery30-NodeComp"><lhs>NodeComp</lhs><rhs>"is"  |  "&lt;&lt;"  |  "&gt;&gt;"</rhs></prod><prod num="103" id="prod-xquery30-ValidateExpr"><lhs>ValidateExpr</lhs><rhs>"validate"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ValidationMode" xlink:type="simple">ValidationMode</nt>  |  ("type"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TypeName" xlink:type="simple">TypeName</nt>))?  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Expr" xlink:type="simple">Expr</nt>  "}"</rhs></prod><prod num="104" id="prod-xquery30-ValidationMode"><lhs>ValidationMode</lhs><rhs>"lax"  |  "strict"</rhs></prod><prod num="105" id="prod-xquery30-ExtensionExpr"><lhs>ExtensionExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Pragma" xlink:type="simple">Pragma</nt>+  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Expr" xlink:type="simple">Expr</nt>?  "}"</rhs></prod><prod num="106" id="prod-xquery30-Pragma"><lhs>Pragma</lhs><rhs>"(#"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-S" xlink:type="simple">S</nt>?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EQName" xlink:type="simple">EQName</nt>  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-S" xlink:type="simple">S</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-PragmaContents" xlink:type="simple">PragmaContents</nt>)?  "#)"</rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="107" id="prod-xquery30-PragmaContents"><lhs>PragmaContents</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Char" xlink:type="simple">Char</nt>* - (Char* '#)' Char*))</rhs></prod><prod num="108" id="prod-xquery30-SimpleMapExpr"><lhs>SimpleMapExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-PathExpr" xlink:type="simple">PathExpr</nt>  ("!"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-PathExpr" xlink:type="simple">PathExpr</nt>)*</rhs></prod><prod num="109" id="prod-xquery30-PathExpr"><lhs>PathExpr</lhs><rhs>("/"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-RelativePathExpr" xlink:type="simple">RelativePathExpr</nt>?)<br/>|  ("//"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-RelativePathExpr" xlink:type="simple">RelativePathExpr</nt>)<br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-RelativePathExpr" xlink:type="simple">RelativePathExpr</nt></rhs><com><phrase><xspecref ref="parse-note-leading-lone-slash" spec="XQ">gn: leading-lone-slash</xspecref></phrase></com></prod><prod num="110" id="prod-xquery30-RelativePathExpr"><lhs>RelativePathExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-StepExpr" xlink:type="simple">StepExpr</nt>  (("/"  |  "//")  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-StepExpr" xlink:type="simple">StepExpr</nt>)*</rhs></prod><prod num="111" id="prod-xquery30-StepExpr"><lhs>StepExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-PostfixExpr" xlink:type="simple">PostfixExpr</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-AxisStep" xlink:type="simple">AxisStep</nt></rhs></prod><prod num="112" id="prod-xquery30-AxisStep"><lhs>AxisStep</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ReverseStep" xlink:type="simple">ReverseStep</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ForwardStep" xlink:type="simple">ForwardStep</nt>)  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-PredicateList" xlink:type="simple">PredicateList</nt></rhs></prod><prod num="113" id="prod-xquery30-ForwardStep"><lhs>ForwardStep</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ForwardAxis" xlink:type="simple">ForwardAxis</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-NodeTest" xlink:type="simple">NodeTest</nt>)  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-AbbrevForwardStep" xlink:type="simple">AbbrevForwardStep</nt></rhs></prod><prod num="114" id="prod-xquery30-ForwardAxis"><lhs>ForwardAxis</lhs><rhs>("child"  "::")<br/>|  ("descendant"  "::")<br/>|  ("attribute"  "::")<br/>|  ("self"  "::")<br/>|  ("descendant-or-self"  "::")<br/>|  ("following-sibling"  "::")<br/>|  ("following"  "::")</rhs></prod><prod num="115" id="prod-xquery30-AbbrevForwardStep"><lhs>AbbrevForwardStep</lhs><rhs>"@"?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-NodeTest" xlink:type="simple">NodeTest</nt></rhs></prod><prod num="116" id="prod-xquery30-ReverseStep"><lhs>ReverseStep</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ReverseAxis" xlink:type="simple">ReverseAxis</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-NodeTest" xlink:type="simple">NodeTest</nt>)  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-AbbrevReverseStep" xlink:type="simple">AbbrevReverseStep</nt></rhs></prod><prod num="117" id="prod-xquery30-ReverseAxis"><lhs>ReverseAxis</lhs><rhs>("parent"  "::")<br/>|  ("ancestor"  "::")<br/>|  ("preceding-sibling"  "::")<br/>|  ("preceding"  "::")<br/>|  ("ancestor-or-self"  "::")</rhs></prod><prod num="118" id="prod-xquery30-AbbrevReverseStep"><lhs>AbbrevReverseStep</lhs><rhs>".."</rhs></prod><prod num="119" id="prod-xquery30-NodeTest"><lhs>NodeTest</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-KindTest" xlink:type="simple">KindTest</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-NameTest" xlink:type="simple">NameTest</nt></rhs></prod><prod num="120" id="prod-xquery30-NameTest"><lhs>NameTest</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EQName" xlink:type="simple">EQName</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Wildcard" xlink:type="simple">Wildcard</nt></rhs></prod><prod num="121" id="prod-xquery30-Wildcard"><lhs>Wildcard</lhs><rhs>"*"<br/>|  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-NCName" xlink:type="simple">NCName</nt>  ":"  "*")<br/>|  ("*"  ":"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-NCName" xlink:type="simple">NCName</nt>)<br/>|  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-BracedURILiteral" xlink:type="simple">BracedURILiteral</nt>  "*")</rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="122" id="prod-xquery30-PostfixExpr"><lhs>PostfixExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-PrimaryExpr" xlink:type="simple">PrimaryExpr</nt>  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Predicate" xlink:type="simple">Predicate</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ArgumentList" xlink:type="simple">ArgumentList</nt>)*</rhs></prod><prod num="123" id="prod-xquery30-ArgumentList"><lhs>ArgumentList</lhs><rhs>"("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Argument" xlink:type="simple">Argument</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Argument" xlink:type="simple">Argument</nt>)*)?  ")"</rhs></prod><prod num="124" id="prod-xquery30-PredicateList"><lhs>PredicateList</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Predicate" xlink:type="simple">Predicate</nt>*</rhs></prod><prod num="125" id="prod-xquery30-Predicate"><lhs>Predicate</lhs><rhs>"["  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Expr" xlink:type="simple">Expr</nt>  "]"</rhs></prod><prod num="126" id="prod-xquery30-PrimaryExpr"><lhs>PrimaryExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Literal" xlink:type="simple">Literal</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarRef" xlink:type="simple">VarRef</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ParenthesizedExpr" xlink:type="simple">ParenthesizedExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ContextItemExpr" xlink:type="simple">ContextItemExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-FunctionCall" xlink:type="simple">FunctionCall</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-OrderedExpr" xlink:type="simple">OrderedExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-UnorderedExpr" xlink:type="simple">UnorderedExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Constructor" xlink:type="simple">Constructor</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-FunctionItemExpr" xlink:type="simple">FunctionItemExpr</nt></rhs></prod><prod num="127" id="prod-xquery30-Literal"><lhs>Literal</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-NumericLiteral" xlink:type="simple">NumericLiteral</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-StringLiteral" xlink:type="simple">StringLiteral</nt></rhs></prod><prod num="128" id="prod-xquery30-NumericLiteral"><lhs>NumericLiteral</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-IntegerLiteral" xlink:type="simple">IntegerLiteral</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-DecimalLiteral" xlink:type="simple">DecimalLiteral</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-DoubleLiteral" xlink:type="simple">DoubleLiteral</nt></rhs></prod><prod num="129" id="prod-xquery30-VarRef"><lhs>VarRef</lhs><rhs>"$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarName" xlink:type="simple">VarName</nt></rhs></prod><prod num="130" id="prod-xquery30-VarName"><lhs>VarName</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EQName" xlink:type="simple">EQName</nt></rhs></prod><prod num="131" id="prod-xquery30-ParenthesizedExpr"><lhs>ParenthesizedExpr</lhs><rhs>"("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Expr" xlink:type="simple">Expr</nt>?  ")"</rhs></prod><prod num="132" id="prod-xquery30-ContextItemExpr"><lhs>ContextItemExpr</lhs><rhs>"."</rhs></prod><prod num="133" id="prod-xquery30-OrderedExpr"><lhs>OrderedExpr</lhs><rhs>"ordered"  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Expr" xlink:type="simple">Expr</nt>  "}"</rhs></prod><prod num="134" id="prod-xquery30-UnorderedExpr"><lhs>UnorderedExpr</lhs><rhs>"unordered"  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Expr" xlink:type="simple">Expr</nt>  "}"</rhs></prod><prod num="135" id="prod-xquery30-FunctionCall"><lhs>FunctionCall</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EQName" xlink:type="simple">EQName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ArgumentList" xlink:type="simple">ArgumentList</nt></rhs><com><phrase><xspecref ref="parse-note-reserved-function-names" spec="XQ">gn: reserved-function-names</xspecref></phrase></com><com><phrase><xspecref ref="parse-note-parens" spec="XQ">gn: parens</xspecref></phrase></com></prod><prod num="136" id="prod-xquery30-Argument"><lhs>Argument</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ArgumentPlaceholder" xlink:type="simple">ArgumentPlaceholder</nt></rhs></prod><prod num="137" id="prod-xquery30-ArgumentPlaceholder"><lhs>ArgumentPlaceholder</lhs><rhs>"?"</rhs></prod><prod num="138" id="prod-xquery30-Constructor"><lhs>Constructor</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-DirectConstructor" xlink:type="simple">DirectConstructor</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ComputedConstructor" xlink:type="simple">ComputedConstructor</nt></rhs></prod><prod num="139" id="prod-xquery30-DirectConstructor"><lhs>DirectConstructor</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-DirElemConstructor" xlink:type="simple">DirElemConstructor</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-DirCommentConstructor" xlink:type="simple">DirCommentConstructor</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-DirPIConstructor" xlink:type="simple">DirPIConstructor</nt></rhs></prod><prod num="140" id="prod-xquery30-DirElemConstructor"><lhs>DirElemConstructor</lhs><rhs>"&lt;"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-QName" xlink:type="simple">QName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-DirAttributeList" xlink:type="simple">DirAttributeList</nt>  ("/&gt;"  |  ("&gt;"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-DirElemContent" xlink:type="simple">DirElemContent</nt>*  "&lt;/"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-QName" xlink:type="simple">QName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-S" xlink:type="simple">S</nt>?  "&gt;"))</rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="141" id="prod-xquery30-DirAttributeList"><lhs>DirAttributeList</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-S" xlink:type="simple">S</nt>  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-QName" xlink:type="simple">QName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-S" xlink:type="simple">S</nt>?  "="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-S" xlink:type="simple">S</nt>?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-DirAttributeValue" xlink:type="simple">DirAttributeValue</nt>)?)*</rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="142" id="prod-xquery30-DirAttributeValue"><lhs>DirAttributeValue</lhs><rhs>('"'  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EscapeQuot" xlink:type="simple">EscapeQuot</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-QuotAttrValueContent" xlink:type="simple">QuotAttrValueContent</nt>)*  '"')<br/>|  ("'"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EscapeApos" xlink:type="simple">EscapeApos</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-AposAttrValueContent" xlink:type="simple">AposAttrValueContent</nt>)*  "'")</rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="143" id="prod-xquery30-QuotAttrValueContent"><lhs>QuotAttrValueContent</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-QuotAttrContentChar" xlink:type="simple">QuotAttrContentChar</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-CommonContent" xlink:type="simple">CommonContent</nt></rhs></prod><prod num="144" id="prod-xquery30-AposAttrValueContent"><lhs>AposAttrValueContent</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-AposAttrContentChar" xlink:type="simple">AposAttrContentChar</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-CommonContent" xlink:type="simple">CommonContent</nt></rhs></prod><prod num="145" id="prod-xquery30-DirElemContent"><lhs>DirElemContent</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-DirectConstructor" xlink:type="simple">DirectConstructor</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-CDataSection" xlink:type="simple">CDataSection</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-CommonContent" xlink:type="simple">CommonContent</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ElementContentChar" xlink:type="simple">ElementContentChar</nt></rhs></prod><prod num="146" id="prod-xquery30-CommonContent"><lhs>CommonContent</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-PredefinedEntityRef" xlink:type="simple">PredefinedEntityRef</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-CharRef" xlink:type="simple">CharRef</nt>  |  "{{"  |  "}}"  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EnclosedExpr" xlink:type="simple">EnclosedExpr</nt></rhs></prod><prod num="147" id="prod-xquery30-DirCommentConstructor"><lhs>DirCommentConstructor</lhs><rhs>"&lt;!--"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-DirCommentContents" xlink:type="simple">DirCommentContents</nt>  "--&gt;"</rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="148" id="prod-xquery30-DirCommentContents"><lhs>DirCommentContents</lhs><rhs>((<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Char" xlink:type="simple">Char</nt> - '-')  |  ('-'  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Char" xlink:type="simple">Char</nt> - '-')))*</rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="149" id="prod-xquery30-DirPIConstructor"><lhs>DirPIConstructor</lhs><rhs>"&lt;?"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-PITarget" xlink:type="simple">PITarget</nt>  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-S" xlink:type="simple">S</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-DirPIContents" xlink:type="simple">DirPIContents</nt>)?  "?&gt;"</rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="150" id="prod-xquery30-DirPIContents"><lhs>DirPIContents</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Char" xlink:type="simple">Char</nt>* - (Char* '?&gt;' Char*))</rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="151" id="prod-xquery30-CDataSection"><lhs>CDataSection</lhs><rhs>"&lt;![CDATA["  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-CDataSectionContents" xlink:type="simple">CDataSectionContents</nt>  "]]&gt;"</rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="152" id="prod-xquery30-CDataSectionContents"><lhs>CDataSectionContents</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Char" xlink:type="simple">Char</nt>* - (Char* ']]&gt;' Char*))</rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="153" id="prod-xquery30-ComputedConstructor"><lhs>ComputedConstructor</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-CompDocConstructor" xlink:type="simple">CompDocConstructor</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-CompElemConstructor" xlink:type="simple">CompElemConstructor</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-CompAttrConstructor" xlink:type="simple">CompAttrConstructor</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-CompNamespaceConstructor" xlink:type="simple">CompNamespaceConstructor</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-CompTextConstructor" xlink:type="simple">CompTextConstructor</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-CompCommentConstructor" xlink:type="simple">CompCommentConstructor</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-CompPIConstructor" xlink:type="simple">CompPIConstructor</nt></rhs></prod><prod num="154" id="prod-xquery30-CompDocConstructor"><lhs>CompDocConstructor</lhs><rhs>"document"  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Expr" xlink:type="simple">Expr</nt>  "}"</rhs></prod><prod num="155" id="prod-xquery30-CompElemConstructor"><lhs>CompElemConstructor</lhs><rhs>"element"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EQName" xlink:type="simple">EQName</nt>  |  ("{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Expr" xlink:type="simple">Expr</nt>  "}"))  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ContentExpr" xlink:type="simple">ContentExpr</nt>?  "}"</rhs></prod><prod num="156" id="prod-xquery30-ContentExpr"><lhs>ContentExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Expr" xlink:type="simple">Expr</nt></rhs></prod><prod num="157" id="prod-xquery30-CompAttrConstructor"><lhs>CompAttrConstructor</lhs><rhs>"attribute"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EQName" xlink:type="simple">EQName</nt>  |  ("{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Expr" xlink:type="simple">Expr</nt>  "}"))  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Expr" xlink:type="simple">Expr</nt>?  "}"</rhs></prod><prod num="158" id="prod-xquery30-CompNamespaceConstructor"><lhs>CompNamespaceConstructor</lhs><rhs>"namespace"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Prefix" xlink:type="simple">Prefix</nt>  |  ("{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-PrefixExpr" xlink:type="simple">PrefixExpr</nt>  "}"))  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-URIExpr" xlink:type="simple">URIExpr</nt>  "}"</rhs></prod><prod num="159" id="prod-xquery30-Prefix"><lhs>Prefix</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-NCName" xlink:type="simple">NCName</nt></rhs></prod><prod num="160" id="prod-xquery30-PrefixExpr"><lhs>PrefixExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Expr" xlink:type="simple">Expr</nt></rhs></prod><prod num="161" id="prod-xquery30-URIExpr"><lhs>URIExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Expr" xlink:type="simple">Expr</nt></rhs></prod><prod num="162" id="prod-xquery30-CompTextConstructor"><lhs>CompTextConstructor</lhs><rhs>"text"  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Expr" xlink:type="simple">Expr</nt>  "}"</rhs></prod><prod num="163" id="prod-xquery30-CompCommentConstructor"><lhs>CompCommentConstructor</lhs><rhs>"comment"  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Expr" xlink:type="simple">Expr</nt>  "}"</rhs></prod><prod num="164" id="prod-xquery30-CompPIConstructor"><lhs>CompPIConstructor</lhs><rhs>"processing-instruction"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-NCName" xlink:type="simple">NCName</nt>  |  ("{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Expr" xlink:type="simple">Expr</nt>  "}"))  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Expr" xlink:type="simple">Expr</nt>?  "}"</rhs></prod><prod num="165" id="prod-xquery30-FunctionItemExpr"><lhs>FunctionItemExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-NamedFunctionRef" xlink:type="simple">NamedFunctionRef</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-InlineFunctionExpr" xlink:type="simple">InlineFunctionExpr</nt></rhs></prod><prod num="166" id="prod-xquery30-NamedFunctionRef"><lhs>NamedFunctionRef</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EQName" xlink:type="simple">EQName</nt>  "#"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-IntegerLiteral" xlink:type="simple">IntegerLiteral</nt></rhs><com><phrase><xspecref ref="parse-note-reserved-function-names" spec="XQ">gn: reserved-function-names</xspecref></phrase></com></prod><prod num="167" id="prod-xquery30-InlineFunctionExpr"><lhs>InlineFunctionExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Annotation" xlink:type="simple">Annotation</nt>*  "function"  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ParamList" xlink:type="simple">ParamList</nt>?  ")"  ("as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SequenceType" xlink:type="simple">SequenceType</nt>)?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-FunctionBody" xlink:type="simple">FunctionBody</nt></rhs></prod><prod num="168" id="prod-xquery30-SingleType"><lhs>SingleType</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SimpleTypeName" xlink:type="simple">SimpleTypeName</nt>  "?"?</rhs></prod><prod num="169" id="prod-xquery30-TypeDeclaration"><lhs>TypeDeclaration</lhs><rhs>"as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SequenceType" xlink:type="simple">SequenceType</nt></rhs></prod><prod num="170" id="prod-xquery30-SequenceType"><lhs>SequenceType</lhs><rhs>("empty-sequence"  "("  ")")<br/>|  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ItemType" xlink:type="simple">ItemType</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-OccurrenceIndicator" xlink:type="simple">OccurrenceIndicator</nt>?)</rhs></prod><prod num="171" id="prod-xquery30-OccurrenceIndicator"><lhs>OccurrenceIndicator</lhs><rhs>"?"  |  "*"  |  "+"</rhs><com><phrase><xspecref ref="parse-note-occurrence-indicators" spec="XQ">gn: occurrence-indicators</xspecref></phrase></com></prod><prod num="172" id="prod-xquery30-ItemType"><lhs>ItemType</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-KindTest" xlink:type="simple">KindTest</nt>  |  ("item"  "("  ")")  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-FunctionTest" xlink:type="simple">FunctionTest</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-AtomicOrUnionType" xlink:type="simple">AtomicOrUnionType</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ParenthesizedItemType" xlink:type="simple">ParenthesizedItemType</nt></rhs></prod><prod num="173" id="prod-xquery30-AtomicOrUnionType"><lhs>AtomicOrUnionType</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EQName" xlink:type="simple">EQName</nt></rhs></prod><prod num="174" id="prod-xquery30-KindTest"><lhs>KindTest</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-DocumentTest" xlink:type="simple">DocumentTest</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ElementTest" xlink:type="simple">ElementTest</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-AttributeTest" xlink:type="simple">AttributeTest</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SchemaElementTest" xlink:type="simple">SchemaElementTest</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SchemaAttributeTest" xlink:type="simple">SchemaAttributeTest</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-PITest" xlink:type="simple">PITest</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-CommentTest" xlink:type="simple">CommentTest</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TextTest" xlink:type="simple">TextTest</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-NamespaceNodeTest" xlink:type="simple">NamespaceNodeTest</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-AnyKindTest" xlink:type="simple">AnyKindTest</nt></rhs></prod><prod num="175" id="prod-xquery30-AnyKindTest"><lhs>AnyKindTest</lhs><rhs>"node"  "("  ")"</rhs></prod><prod num="176" id="prod-xquery30-DocumentTest"><lhs>DocumentTest</lhs><rhs>"document-node"  "("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ElementTest" xlink:type="simple">ElementTest</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SchemaElementTest" xlink:type="simple">SchemaElementTest</nt>)?  ")"</rhs></prod><prod num="177" id="prod-xquery30-TextTest"><lhs>TextTest</lhs><rhs>"text"  "("  ")"</rhs></prod><prod num="178" id="prod-xquery30-CommentTest"><lhs>CommentTest</lhs><rhs>"comment"  "("  ")"</rhs></prod><prod num="179" id="prod-xquery30-NamespaceNodeTest"><lhs>NamespaceNodeTest</lhs><rhs>"namespace-node"  "("  ")"</rhs></prod><prod num="180" id="prod-xquery30-PITest"><lhs>PITest</lhs><rhs>"processing-instruction"  "("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-NCName" xlink:type="simple">NCName</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-StringLiteral" xlink:type="simple">StringLiteral</nt>)?  ")"</rhs></prod><prod num="181" id="prod-xquery30-AttributeTest"><lhs>AttributeTest</lhs><rhs>"attribute"  "("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-AttribNameOrWildcard" xlink:type="simple">AttribNameOrWildcard</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TypeName" xlink:type="simple">TypeName</nt>)?)?  ")"</rhs></prod><prod num="182" id="prod-xquery30-AttribNameOrWildcard"><lhs>AttribNameOrWildcard</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-AttributeName" xlink:type="simple">AttributeName</nt>  |  "*"</rhs></prod><prod num="183" id="prod-xquery30-SchemaAttributeTest"><lhs>SchemaAttributeTest</lhs><rhs>"schema-attribute"  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-AttributeDeclaration" xlink:type="simple">AttributeDeclaration</nt>  ")"</rhs></prod><prod num="184" id="prod-xquery30-AttributeDeclaration"><lhs>AttributeDeclaration</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-AttributeName" xlink:type="simple">AttributeName</nt></rhs></prod><prod num="185" id="prod-xquery30-ElementTest"><lhs>ElementTest</lhs><rhs>"element"  "("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ElementNameOrWildcard" xlink:type="simple">ElementNameOrWildcard</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TypeName" xlink:type="simple">TypeName</nt>  "?"?)?)?  ")"</rhs></prod><prod num="186" id="prod-xquery30-ElementNameOrWildcard"><lhs>ElementNameOrWildcard</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ElementName" xlink:type="simple">ElementName</nt>  |  "*"</rhs></prod><prod num="187" id="prod-xquery30-SchemaElementTest"><lhs>SchemaElementTest</lhs><rhs>"schema-element"  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ElementDeclaration" xlink:type="simple">ElementDeclaration</nt>  ")"</rhs></prod><prod num="188" id="prod-xquery30-ElementDeclaration"><lhs>ElementDeclaration</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ElementName" xlink:type="simple">ElementName</nt></rhs></prod><prod num="189" id="prod-xquery30-AttributeName"><lhs>AttributeName</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EQName" xlink:type="simple">EQName</nt></rhs></prod><prod num="190" id="prod-xquery30-ElementName"><lhs>ElementName</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EQName" xlink:type="simple">EQName</nt></rhs></prod><prod num="191" id="prod-xquery30-SimpleTypeName"><lhs>SimpleTypeName</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TypeName" xlink:type="simple">TypeName</nt></rhs></prod><prod num="192" id="prod-xquery30-TypeName"><lhs>TypeName</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EQName" xlink:type="simple">EQName</nt></rhs></prod><prod num="193" id="prod-xquery30-FunctionTest"><lhs>FunctionTest</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Annotation" xlink:type="simple">Annotation</nt>*  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-AnyFunctionTest" xlink:type="simple">AnyFunctionTest</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TypedFunctionTest" xlink:type="simple">TypedFunctionTest</nt>)</rhs></prod><prod num="194" id="prod-xquery30-AnyFunctionTest"><lhs>AnyFunctionTest</lhs><rhs>"function"  "("  "*"  ")"</rhs></prod><prod num="195" id="prod-xquery30-TypedFunctionTest"><lhs>TypedFunctionTest</lhs><rhs>"function"  "("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SequenceType" xlink:type="simple">SequenceType</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SequenceType" xlink:type="simple">SequenceType</nt>)*)?  ")"  "as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SequenceType" xlink:type="simple">SequenceType</nt></rhs></prod><prod num="196" id="prod-xquery30-ParenthesizedItemType"><lhs>ParenthesizedItemType</lhs><rhs>"("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ItemType" xlink:type="simple">ItemType</nt>  ")"</rhs></prod><prod num="197" id="prod-xquery30-URILiteral"><lhs>URILiteral</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-StringLiteral" xlink:type="simple">StringLiteral</nt></rhs></prod><prod num="198" id="prod-xquery30-RevalidationDecl"><lhs>RevalidationDecl</lhs><rhs>"declare"  "revalidation"  ("strict"  |  "lax"  |  "skip")</rhs></prod><prod num="199" id="prod-xquery30-InsertExprTargetChoice"><lhs>InsertExprTargetChoice</lhs><rhs>(("as"  ("first"  |  "last"))?  "into")<br/>|  "after"<br/>|  "before"</rhs></prod><prod num="200" id="prod-xquery30-InsertExpr"><lhs>InsertExpr</lhs><rhs>"insert"  ("node"  |  "nodes")  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-SourceExpr" xlink:type="simple">SourceExpr</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-InsertExprTargetChoice" xlink:type="simple">InsertExprTargetChoice</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TargetExpr" xlink:type="simple">TargetExpr</nt></rhs></prod><prod num="201" id="prod-xquery30-DeleteExpr"><lhs>DeleteExpr</lhs><rhs>"delete"  ("node"  |  "nodes")  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TargetExpr" xlink:type="simple">TargetExpr</nt></rhs></prod><prod num="202" id="prod-xquery30-ReplaceExpr"><lhs>ReplaceExpr</lhs><rhs>"replace"  ("value"  "of")?  "node"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TargetExpr" xlink:type="simple">TargetExpr</nt>  "with"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="203" id="prod-xquery30-RenameExpr"><lhs>RenameExpr</lhs><rhs>"rename"  "node"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-TargetExpr" xlink:type="simple">TargetExpr</nt>  "as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-NewNameExpr" xlink:type="simple">NewNameExpr</nt></rhs></prod><prod num="204" id="prod-xquery30-SourceExpr"><lhs>SourceExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="205" id="prod-xquery30-TargetExpr"><lhs>TargetExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="206" id="prod-xquery30-NewNameExpr"><lhs>NewNameExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="207" id="prod-xquery30-UpdatingFunctionCall"><lhs>UpdatingFunctionCall</lhs><rhs>"invoke"  "updating"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-PrimaryExpr" xlink:type="simple">PrimaryExpr</nt>  "("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt>)*)?  ")"</rhs></prod><prod num="208" id="prod-xquery30-CopyModifyExpr"><lhs>CopyModifyExpr</lhs><rhs>"copy"  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarName" xlink:type="simple">VarName</nt>  ":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt>  (","  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-VarName" xlink:type="simple">VarName</nt>  ":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt>)*  "modify"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt>  "return"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="209" id="prod-xquery30-EQName"><lhs>EQName</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-QName" xlink:type="simple">QName</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-URIQualifiedName" xlink:type="simple">URIQualifiedName</nt></rhs></prod></scrap><div2 id="id-terminal-symbols"><head>Terminal Symbols</head><scrap headstyle="show"><head/><prod num="210" id="prod-xquery30-IntegerLiteral"><lhs>IntegerLiteral</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Digits" xlink:type="simple">Digits</nt></rhs></prod><prod num="211" id="prod-xquery30-DecimalLiteral"><lhs>DecimalLiteral</lhs><rhs>("."  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Digits" xlink:type="simple">Digits</nt>)  |  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Digits" xlink:type="simple">Digits</nt>  "."  [0-9]*)</rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="212" id="prod-xquery30-DoubleLiteral"><lhs>DoubleLiteral</lhs><rhs>(("."  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Digits" xlink:type="simple">Digits</nt>)  |  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Digits" xlink:type="simple">Digits</nt>  ("."  [0-9]*)?))  [eE]  [+-]?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Digits" xlink:type="simple">Digits</nt></rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="213" id="prod-xquery30-StringLiteral"><lhs>StringLiteral</lhs><rhs>('"'  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-PredefinedEntityRef" xlink:type="simple">PredefinedEntityRef</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-CharRef" xlink:type="simple">CharRef</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EscapeQuot" xlink:type="simple">EscapeQuot</nt>  |  [^"&amp;])*  '"')  |  ("'"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-PredefinedEntityRef" xlink:type="simple">PredefinedEntityRef</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-CharRef" xlink:type="simple">CharRef</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-EscapeApos" xlink:type="simple">EscapeApos</nt>  |  [^'&amp;])*  "'")</rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="214" id="prod-xquery30-URIQualifiedName"><lhs>URIQualifiedName</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-BracedURILiteral" xlink:type="simple">BracedURILiteral</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-NCName" xlink:type="simple">NCName</nt></rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="215" id="prod-xquery30-BracedURILiteral"><lhs>BracedURILiteral</lhs><rhs>"Q"  "{"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-PredefinedEntityRef" xlink:type="simple">PredefinedEntityRef</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-CharRef" xlink:type="simple">CharRef</nt>  |  [^&amp;{}])*  "}"</rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="216" id="prod-xquery30-PredefinedEntityRef"><lhs>PredefinedEntityRef</lhs><rhs>"&amp;"  ("lt"  |  "gt"  |  "amp"  |  "quot"  |  "apos")  ";"</rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="217" id="prod-xquery30-EscapeQuot"><lhs>EscapeQuot</lhs><rhs>'""'</rhs></prod><prod num="218" id="prod-xquery30-EscapeApos"><lhs>EscapeApos</lhs><rhs>"''"</rhs></prod><prod num="219" id="prod-xquery30-ElementContentChar"><lhs>ElementContentChar</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Char" xlink:type="simple">Char</nt> - [{}&lt;&amp;])</rhs></prod><prod num="220" id="prod-xquery30-QuotAttrContentChar"><lhs>QuotAttrContentChar</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Char" xlink:type="simple">Char</nt> - ["{}&lt;&amp;])</rhs></prod><prod num="221" id="prod-xquery30-AposAttrContentChar"><lhs>AposAttrContentChar</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Char" xlink:type="simple">Char</nt> - ['{}&lt;&amp;])</rhs></prod><prod num="222" id="prod-xquery30-Comment"><lhs>Comment</lhs><rhs>"(:"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-CommentContents" xlink:type="simple">CommentContents</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Comment" xlink:type="simple">Comment</nt>)*  ":)"</rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com><com><phrase><xspecref ref="parse-note-comments" spec="XQ">gn: comments</xspecref></phrase></com></prod><prod num="223" id="prod-xquery30-PITarget"><lhs>PITarget</lhs><rhs><xnt xmlns:xlink="http://www.w3.org/1999/xlink" ref="NT-PITarget" spec="XML" xlink:type="simple">[http://www.w3.org/TR/REC-xml#NT-PITarget]</xnt></rhs><com><phrase><xspecref ref="parse-note-xml-version" spec="XQ">gn: xml-version</xspecref></phrase></com></prod><prod num="224" id="prod-xquery30-CharRef"><lhs>CharRef</lhs><rhs><xnt xmlns:xlink="http://www.w3.org/1999/xlink" ref="NT-CharRef" spec="XML" xlink:type="simple">[http://www.w3.org/TR/REC-xml#NT-CharRef]</xnt></rhs><com><phrase><xspecref ref="parse-note-xml-version" spec="XQ">gn: xml-version</xspecref></phrase></com></prod><prod num="225" id="prod-xquery30-QName"><lhs>QName</lhs><rhs><xnt xmlns:xlink="http://www.w3.org/1999/xlink" ref="NT-QName" spec="Names" xlink:type="simple">[http://www.w3.org/TR/REC-xml-names/#NT-QName]</xnt></rhs><com><phrase><xspecref ref="parse-note-xml-version" spec="XQ">gn: xml-version</xspecref></phrase></com></prod><prod num="226" id="prod-xquery30-NCName"><lhs>NCName</lhs><rhs><xnt xmlns:xlink="http://www.w3.org/1999/xlink" ref="NT-NCName" spec="Names" xlink:type="simple">[http://www.w3.org/TR/REC-xml-names/#NT-NCName]</xnt></rhs><com><phrase><xspecref ref="parse-note-xml-version" spec="XQ">gn: xml-version</xspecref></phrase></com></prod><prod num="227" id="prod-xquery30-S"><lhs>S</lhs><rhs><xnt xmlns:xlink="http://www.w3.org/1999/xlink" ref="NT-S" spec="XML" xlink:type="simple">[http://www.w3.org/TR/REC-xml#NT-S]</xnt></rhs><com><phrase><xspecref ref="parse-note-xml-version" spec="XQ">gn: xml-version</xspecref></phrase></com></prod><prod num="228" id="prod-xquery30-Char"><lhs>Char</lhs><rhs><xnt xmlns:xlink="http://www.w3.org/1999/xlink" ref="NT-Char" spec="XML" xlink:type="simple">[http://www.w3.org/TR/REC-xml#NT-Char]</xnt></rhs><com><phrase><xspecref ref="parse-note-xml-version" spec="XQ">gn: xml-version</xspecref></phrase></com></prod></scrap><p>The following symbols are used only in the definition of
  terminal symbols; they are not terminal symbols in the
  grammar of <specref ref="id-grammar"/>.</p><scrap headstyle="show"><head/><prod num="229" id="prod-xquery30-Digits"><lhs>Digits</lhs><rhs>[0-9]+</rhs></prod><prod num="230" id="prod-xquery30-CommentContents"><lhs>CommentContents</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery30-Char" xlink:type="simple">Char</nt>+ - (Char* ('(:' | ':)') Char*))</rhs></prod></scrap></div2><!--
<div2 id="id-core-update"><head>Core Grammar</head>
		    
     <scrap id="BNF-Grammar" role="non-terminal-structure-expand">
       <head id="BNF-Grammar-prods" >Non-Terminals</head>
       <prodrecap role="BNF-Grammar-prods" ref="BNF-Grammar-prods" at="../xquery-updates/temp/core-grammar.xml"/>
     </scrap>
</div2>
--></div1><div1 id="id-impl-defs"><head>Implementation-Defined Items</head><p>The following items in this specification are implementation-defined:</p><olist><item><p>The revalidation modes that are supported by this implementation.</p></item><item><p>The default revalidation mode for this implementation.</p></item><item><p>The mechanism (if any) by which an external function can return an XDM instance
and/or a pending update list to the invoking query.</p></item><item><p>The semantics of <code>fn:put()</code>, including the kinds of nodes accepted
as operands by this function.</p></item></olist></div1><div1 id="References"><head>References</head><div2 id="id-normative-references"><head>Normative References</head><blist><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="xquery-update-30-requirements-use-cases" key="XQuery Update Facility 3.0 Requirements and Use Cases" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="xpath-datamodel-30" key="XQuery and XPath Data Model (XDM) 3.0" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="xquery-30" key="XQuery 3.0: An XML Query Language" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="xquery-update-10" key="XQuery Update Facility 1.0" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="xpath-functions-30" key="XQuery and XPath Functions and Operators 3.0" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="xqueryx-30" key="XQueryX 3.0" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="XQueryFormalSemantics" key="XQuery 1.0 and XPath 2.0 Formal Semantics" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">World Wide Web Consortium. 
<emph>XQuery 1.0 and XPath 2.0 Formal Semantics</emph>. 
W3C Recommendation, 14 December 2010. 
See <loc href="http://www.w3.org/TR/xquery-semantics/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/TR/xquery-semantics/</loc>.</bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="RFC2119" key="RFC 2119" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">S. Bradner. 
<emph>Key Words for use in RFCs to Indicate Requirement Levels.</emph>
IETF RFC 2119. See <loc href="http://www.ietf.org/rfc/rfc2119.txt" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.ietf.org/rfc/rfc2119.txt</loc>.</bibl></blist></div2><div2 id="id-non-normative-references"><head>Non-normative References</head><blist><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="ietf-patches" key="XML Patch Operations" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Internet Engineering Task Force. 
<emph>An Extensible Markup Language (XML) 
Patch Operations Framework Utilizing XML Path Language (XPath) Selectors.</emph>. 
See <loc href="http://datatracker.ietf.org/idtracker/draft-ietf-simple-xml-patch-ops/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://datatracker.ietf.org/idtracker/draft-ietf-simple-xml-patch-ops/
</loc>.</bibl></blist></div2></div1><div1 id="id-errors"><head>Error Conditions</head><div2 id="id-new-error-codes"><head>New Error Codes</head><error-list><error spec="XU" code="0001" class="ST" type="static"><p>
    It is a static error if an <termref def="dt-updating-expression">updating expression</termref> is used
    where the expression category rules prohibit it.
  </p></error><error spec="XU" code="0003" class="ST" type="static"><p>
It is a static error if a Prolog contains more than one revalidation declaration.</p></error><error spec="XU" code="0004" class="TY" type="type"><p>
It is a type  error if the insertion sequence of an insert expression contains an attribute node following a node that is not an attribute node.</p></error><error spec="XU" code="0005" class="TY" type="type"><p>
In an insert expression where <code>into</code>, <code>as first into</code>, or <code>as last into</code> is specified, it is a type  error if the target expression returns a non-empty result that does not consist of a single element or document node.</p></error><error spec="XU" code="0006" class="TY" type="type"><p>
In an insert expression where <code>before</code> or <code>after</code> is specified, it is a type  error if the target expression returns a non-empty result that does not consist of a single element, text, comment, or processing instruction node.</p></error><error spec="XU" code="0007" class="TY" type="type"><p>
It is a type  error if the target expression of a delete expression does not return a sequence of zero or more nodes.</p></error><error spec="XU" code="0008" class="TY" type="type"><p>In a replace expression, it is a type error if the target expression returns a non-empty result that does not consist of a single  element, attribute, text, comment, or processing instruction node.</p></error><error spec="XU" code="0009" class="DY" type="dynamic"><p>In a replace expression where <code>value of</code> is not specified, it is a dynamic error if the node returned by the target expression does not have a parent.</p></error><error spec="XU" code="0010" class="TY" type="type"><p>In a replace expression where <code>value of</code> is not specified and the target is an element, text, comment, or processing instruction node, it is a type error if the replacement sequence does not consist of zero or more element, text, comment, or processing instruction nodes.</p></error><error spec="XU" code="0011" class="TY" type="type"><p>In a replace expression where <code>value of</code> is not specified and the target is an attribute node, it is a type error if the replacement sequence does not consist of zero or more attribute nodes.</p></error><error spec="XU" code="0012" class="TY" type="type"><p>In a rename expression, it is a type error if the target expression returns a non-empty result that does not consist of a single element, attribute, or processing instruction node.</p></error><error spec="XU" code="0013" class="TY" type="type"><p>In a copy modify expression, it is a type error if a source expression in the <code>copy</code> clause does not return a single node.</p></error><error spec="XU" code="0014" class="DY" type="dynamic"><p>In a copy modify expression, it is a dynamic error if the <code>modify</code> clause modifies any node that was not created by the <code>copy</code> clause.</p></error><error spec="XU" code="0015" class="DY" type="dynamic"><p>It is a dynamic error if any node is the target of more than one <code>rename</code> expression within the same query.</p></error><error spec="XU" code="0016" class="DY" type="dynamic"><p>It is a dynamic error if any node is the target of more than one <code>replace</code> expression (without <code>value of</code> being specified) within the same query.</p></error><error spec="XU" code="0017" class="DY" type="dynamic"><p>It is a dynamic error if any node is the target of more than one <code>replace value of</code> expression within the same query.</p></error><error spec="XU" code="0018" class="DY" type="dynamic"><p>It is a dynamic error if a function that was declared to be <code>external</code> but not <code>updating</code> returns a non-empty pending update list.</p></error><error spec="XU" code="0021" class="DY" type="dynamic"><p>It is a dynamic error if the <termref def="dt-xdm-instance">XDM instance</termref> that
would result from applying all the updates in a query violates any constraint specified
in <bibref ref="xpath-datamodel-30"/>. In this case, none of the updates in the query are made effective.</p></error><error spec="XU" code="0022" class="TY" type="type"><p>It is a type error if an 
insert expression specifies the insertion of an attribute node into a 
document node.</p></error><error spec="XU" code="0023" class="DY" type="dynamic"><p>It is a dynamic error if an insert, replace, or rename expression affects an element node by introducing a new namespace binding that  <termref def="dt-conflict">conflicts</termref> with one of its existing namespace bindings.</p></error><error spec="XU" code="0024" class="DY" type="dynamic"><p>It is a dynamic error if the effect of a set of updating expressions is to introduce <termref def="dt-conflict">conflicting</termref> namespace bindings into an element node.</p></error><error spec="XU" code="0025" class="DY" type="dynamic"><p>(Not currently used.)</p></error><error spec="XU" code="0026" class="ST" type="static"><p>It is a static error if a revalidation declaration in a Prolog specifies a revalidation mode that is not supported by the current implementation.</p></error><error spec="XU" code="0027" class="DY" type="dynamic"><p>It is a dynamic error if the target expression of an insert, replace, or rename expression evaluates to an empty sequence.</p></error><error spec="XU" code="0029" class="DY" type="dynamic"><p>In an insert expression where <code>before</code> or <code>after</code> is specified, it is a dynamic  error if the node returned by the target expression does not have a parent.</p></error><error spec="XU" code="0030" class="DY" type="dynamic"><p>It is a dynamic error if an 
insert expression specifies the insertion of an attribute node before or after a 
child of a document node.</p></error><error spec="XU" code="0031" class="DY" type="dynamic"><p>
    It is a dynamic error if multiple calls to <code>fn:put</code> in the same snapshot specify the same URI
    (after resolution of relative URIs).
  </p></error><error spec="XU" code="0032" class="ST" type="static"><p>
    It is a static error if an <code>%updating</code> or <code>%simple</code> annotation is used on a
    <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-VarDecl" xlink:type="simple">VarDecl</nt>.
  </p></error><error spec="XU" code="0033" class="ST" type="static"><p>
    It is a static error to use more than one <code>%updating</code> or <code>%simple</code> annotation in a
    given annotation set.
  </p></error><error spec="XU" code="0034" class="ST" type="static"><p>
    It is a static error to use more than one
    <termref def="dt-updating-function-assertion">updating function assertion</termref>
    in the <xtermref spec="XQ30" ref="dt-function-assertion">function assertion</xtermref> set
    of a <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-FunctionTest" xlink:type="simple">FunctionTest</nt>.
  </p></error><error spec="XU" code="0037" class="DY" type="dynamic"><p>
    It is a dynamic error if the
    <termref def="dt-pending-update-list">pending update list</termref>
    returned by the modify expression of a <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-CopyModifyExpr" xlink:type="simple">CopyModifyExpr</nt>
    or <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery30-TransformWithExpr" xlink:type="simple">TransformWithExpr</nt> contains a <code>upd:put</code>
    <termref def="dt-update-primitive">update primitive</termref>.
  </p></error><error spec="XU" code="0038" class="DY" type="static"><p>
    It is a dynamic error if the function returned by the PrimaryExpr of a dynamic
    function invocation is an <termref def="dt-updating-function">updating function</termref>,
    and the dynamic function invocation is not a
    <xtermref spec="XQ30" ref="dt-partial-function-application"/>.
  </p></error><error spec="FO" code="0001" class="UP" type="dynamic"><p>It is a dynamic error if the first operand of <code>fn:put</code> is not a node of a supported kind.</p></error><error spec="FO" code="0002" class="UP" type="dynamic"><p>It is a dynamic error if the second operand of <code>fn:put</code> is not a valid lexical representation of the <code>xs:anyURI</code> type.</p></error></error-list></div2><div2 id="id-amended-error-codes"><head>Amendments to Existing Error Codes</head><error-list><error spec="XQ" code="0026" class="DY" type="dynamic"><p>It is a dynamic error if a constructor or replace expression would result in a processing instruction node whose content includes the string "<code>?&gt;</code>".</p></error><error spec="XQ" code="0041" class="DY" type="dynamic"><p>It is a dynamic error if the name assigned to a processing node by  a constructor or rename expression cannot be cast to the type <code>xs:NCName</code>.</p></error><error spec="XQ" code="0072" class="DY" type="dynamic"><p>It is a dynamic error if a constructor or replace expression would result in a comment node whose content ends with a hyphen or contains two adjacent hyphens.</p></error><error spec="XQ" code="0074" class="DY" type="dynamic"><p>It is a dynamic error if the value of the name expression in a computed element constructor, computed attribute constructor, or rename expression cannot be converted to an expanded QName (for example, because it contains a namespace prefix not found in the statically known namespaces.)</p></error></error-list></div2></div1><div1 id="id-xquf-xqueryx"><head>XML Syntax (XQueryX) for XQuery Update Facility 3.0</head><p>

<bibref ref="xqueryx-30"/> defines an XML representation of <bibref ref="xquery-30"/>. 
<bibref ref="xquery-update-30-requirements-use-cases"/>

states
"The syntax for updates MAY have more than one syntax binding. 
One syntax MUST be convenient for humans to read and write. 
One syntax MUST be expressed in XML in a way that reflects
the underlying structure of the operations."
This appendix specifies an XML Schema that defines the
XML representation of XQuery Update Facility 3.0 by representing the abstract syntax
found in <specref ref="id-grammar"/>. 
This XML representation for XQuery Update Facility 3.0 integrates
with the XML representation for XQuery 3.0.</p><p>
The XML Schema specified in this appendix accomplishes its integration by importing
the XML Schema defined for XQueryX in <bibref ref="xqueryx-30"/>,
incorporating all of its type and element definitions. 
It then extends that schema by adding definitions of new types and elements
in a namespace belonging to the Update Facility specification, as well as
redefining one complex type. 
</p><div2 id="id-xquf-update-schema"><head>Schema</head><p>
This section specifies the two XML Schemas that define the complex types and elements
for XQueryX in support of XQuery Update Facility 3.0, including changes to the prolog
and the addition of several new expressions.</p><eg xml:space="preserve">

&lt;xsd:schema
     xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
     xmlns:xqx="http://www.w3.org/2005/XQueryX"
     xmlns:xqxuf="http://www.w3.org/2007/xquery-update-10"
     targetNamespace="http://www.w3.org/2007/xquery-update-10"
     elementFormDefault="qualified" 
     attributeFormDefault="unqualified"&gt;

&lt;!-- Initial creation                  2006-08-17: Jim Melton --&gt;
&lt;!-- Added ufRevalidationDecl          2006-08-21: Jim Melton --&gt;
&lt;!-- Overhaul to bring up to date      2007-08-07: Jim Melton --&gt;
&lt;!-- Reconfirmed correctness for CR    2008-02-27: Jim Melton --&gt;
&lt;!-- Added copyModifyExpr as alias for
       transformExpr                   2014-11-06: Jim Melton --&gt;
&lt;!-- Added transformWithExpr           2014-11-06: Jim Melton --&gt;
&lt;!-- Added updatingFunctionCall        2014-11-06: Jim Melton --&gt;

  &lt;xsd:import namespace="http://www.w3.org/2005/XQueryX"
     schemaLocation="http://www.w3.org/2007/xquery-update-10/
xquery-update-10-xqueryx-redef.xsd"/&gt;


  &lt;!-- Add revalidationDecl to alternatives in prolog setters --&gt;
  &lt;xsd:element name="revalidationDecl"
               substitutionGroup="xqx:prologPartOneItem"&gt;
    &lt;xsd:simpleType&gt;
      &lt;xsd:restriction base="xsd:NMTOKEN"&gt;
        &lt;xsd:enumeration value="strict"/&gt;
        &lt;xsd:enumeration value="lax"/&gt;
        &lt;xsd:enumeration value="skip"/&gt;
      &lt;/xsd:restriction&gt;
    &lt;/xsd:simpleType&gt;
  &lt;/xsd:element&gt;


  &lt;!-- Create substitution group for update facility exprs    --&gt;
  &lt;xsd:complexType name="expr"&gt;
    &lt;xsd:complexContent&gt;
      &lt;xsd:extension base="xqx:expr"/&gt;
    &lt;/xsd:complexContent&gt;
  &lt;/xsd:complexType&gt;

  &lt;!-- Make the update facilities subst grp part of expr grp  --&gt;
  &lt;xsd:element name="expr" type="xqxuf:expr" abstract="true"
               substitutionGroup="xqx:expr"/&gt;


  &lt;!-- InsertExpr                                             --&gt;
  &lt;xsd:complexType name="insertExpr"&gt;
    &lt;xsd:complexContent&gt;
      &lt;xsd:extension base="xqxuf:expr"&gt;
        &lt;xsd:sequence&gt;
          &lt;xsd:element name="sourceExpr"
                       type="xqx:exprWrapper"/&gt;
          &lt;xsd:choice&gt;
            &lt;xsd:element name="insertInto"&gt;
              &lt;xsd:complexType&gt;
                &lt;xsd:sequence minOccurs="0" maxOccurs="1"&gt;
                  &lt;xsd:choice&gt;
                    &lt;xsd:element name="insertAsFirst" 
                                 type="xqx:emptyContent"/&gt;
                    &lt;xsd:element name="insertAsLast" 
                                 type="xqx:emptyContent"/&gt;
                  &lt;/xsd:choice&gt;
                &lt;/xsd:sequence&gt;
              &lt;/xsd:complexType&gt;
            &lt;/xsd:element&gt;
            &lt;xsd:element name="insertAfter"
                         type="xqx:emptyContent"/&gt;
            &lt;xsd:element name="insertBefore"
                         type="xqx:emptyContent"/&gt;
          &lt;/xsd:choice&gt;
          &lt;xsd:element name="targetExpr"
                       type="xqx:exprWrapper"/&gt;
        &lt;/xsd:sequence&gt;
      &lt;/xsd:extension&gt;
    &lt;/xsd:complexContent&gt;
  &lt;/xsd:complexType&gt;

  &lt;xsd:element name="insertExpr" type="xqxuf:insertExpr" 
               substitutionGroup="xqxuf:expr"/&gt;


  &lt;!-- DeleteExpr                                             --&gt;
  &lt;xsd:complexType name="deleteExpr"&gt;
    &lt;xsd:complexContent&gt;
      &lt;xsd:extension base="xqxuf:expr"&gt;
        &lt;xsd:sequence&gt;
         &lt;xsd:element name="targetExpr"
                      type="xqx:exprWrapper"/&gt;
        &lt;/xsd:sequence&gt;
      &lt;/xsd:extension&gt;
    &lt;/xsd:complexContent&gt;
  &lt;/xsd:complexType&gt;

  &lt;xsd:element name="deleteExpr" type="xqxuf:deleteExpr" 
               substitutionGroup="xqxuf:expr"/&gt;


  &lt;!-- ReplaceExpr                                            --&gt;
  &lt;xsd:complexType name="replaceExpr"&gt;
    &lt;xsd:complexContent&gt;
      &lt;xsd:extension base="xqxuf:expr"&gt;
        &lt;xsd:sequence&gt;
          &lt;xsd:element name="replaceValue"
                       type="xqx:emptyContent"
                       minOccurs="0" maxOccurs="1"/&gt;
          &lt;xsd:element name="targetExpr"
                       type="xqx:exprWrapper"/&gt;
          &lt;xsd:element name="replacementExpr"
                       type="xqx:exprWrapper"/&gt;
        &lt;/xsd:sequence&gt;
      &lt;/xsd:extension&gt;
    &lt;/xsd:complexContent&gt;
  &lt;/xsd:complexType&gt;

  &lt;xsd:element name="replaceExpr" type="xqxuf:replaceExpr" 
               substitutionGroup="xqxuf:expr"/&gt;


  &lt;!-- RenameExpr                                             --&gt;
  &lt;xsd:complexType name="renameExpr"&gt;
    &lt;xsd:complexContent&gt;
      &lt;xsd:extension base="xqxuf:expr"&gt;
        &lt;xsd:sequence&gt;
          &lt;xsd:element name="targetExpr"
                       type="xqx:exprWrapper"/&gt;
          &lt;xsd:element name="newNameExpr"
                       type="xqx:exprWrapper"/&gt;
        &lt;/xsd:sequence&gt;
      &lt;/xsd:extension&gt;
    &lt;/xsd:complexContent&gt;
  &lt;/xsd:complexType&gt;

  &lt;xsd:element name="renameExpr" type="xqxuf:renameExpr" 
               substitutionGroup="xqxuf:expr"/&gt;


  &lt;!-- TransformExpr                                          --&gt;
  &lt;xsd:complexType name="transformExpr"&gt;
    &lt;xsd:complexContent&gt;
      &lt;xsd:extension base="xqxuf:expr"&gt;
        &lt;xsd:sequence&gt;
          &lt;xsd:element name="transformCopies"&gt;
            &lt;xsd:complexType&gt;
              &lt;xsd:sequence&gt;
                &lt;xsd:element name="transformCopy" minOccurs="1" 
                             maxOccurs="unbounded"&gt;
                  &lt;xsd:complexType&gt;
                    &lt;xsd:sequence&gt;
                      &lt;xsd:element ref="xqx:varRef"/&gt;
                      &lt;xsd:element name="copySource"
                                   type="xqx:exprWrapper"/&gt;
                    &lt;/xsd:sequence&gt;
                  &lt;/xsd:complexType&gt;
                &lt;/xsd:element&gt;
              &lt;/xsd:sequence&gt;
            &lt;/xsd:complexType&gt;
          &lt;/xsd:element&gt;
          &lt;xsd:element name="modifyExpr"
                       type="xqx:exprWrapper"/&gt;
          &lt;xsd:element name="returnExpr"
                       type="xqx:exprWrapper"/&gt;
        &lt;/xsd:sequence&gt;
      &lt;/xsd:extension&gt;
    &lt;/xsd:complexContent&gt;
  &lt;/xsd:complexType&gt;

  &lt;xsd:element name="transformExpr" type="xqxuf:transformExpr" 
               substitutionGroup="xqxuf:expr"/&gt;

  &lt;xsd:element name="copyModifyExpr" type="xqxuf:transformExpr" 
               substitutionGroup="xqxuf:expr"/&gt;


  &lt;!-- TransformWithExpr                                      --&gt;
  &lt;xsd:complexType name="transformWithExpr"&gt;
    &lt;xsd:complexContent&gt;
      &lt;xsd:extension base="xqxuf:expr"&gt;
        &lt;xsd:sequence&gt;
          &lt;xsd:element ref="pathExpr"/&gt;
          &lt;xsd:element ref="xqxuf:expr" minOccurs="0"/&gt;
        &lt;/xsd:sequence&gt;
      &lt;/xsd:extension&gt;
    &lt;/xsd:complexContent&gt;
  &lt;/xsd:complexType&gt;

  &lt;xsd:element name="transformWithExpr" type="xqxuf:transformWithExpr" 
               substitutionGroup="xqxuf:expr"/&gt;


  &lt;!-- UpdatingFunctionCall                                   --&gt;
  &lt;xsd:element name="updatingFunctionCall" type="xqx:functionCallExpr" 
               substitutionGroup="xqxuf:expr"/&gt;


&lt;/xsd:schema&gt;



&lt;xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	            xmlns="http://www.w3.org/2005/XQueryX"
	            targetNamespace="http://www.w3.org/2005/XQueryX"
	            elementFormDefault="qualified" attributeFormDefault="qualified"&gt;

&lt;!-- Redefine one or more components of the XQueryX XML Schema --&gt;
  &lt;xsd:redefine schemaLocation="http://www.w3.org/2005/XQueryX/xqueryx.xsd"&gt;

&lt;!-- Redefine the functionDecl complex type --&gt;
    &lt;xsd:complexType name="functionDecl"&gt;
      &lt;xsd:complexContent&gt;
        &lt;xsd:extension base="functionDecl"&gt;
          &lt;xsd:attribute name="updatingFunction"
                         type="xsd:boolean" default="false"/&gt;
        &lt;/xsd:extension&gt;
      &lt;/xsd:complexContent&gt;
    &lt;/xsd:complexType&gt;

&lt;!-- Redefine the simpleMapExpr complex type --&gt;
  &lt;xsd:complexType name="simpleMapExpr"&gt;
    &lt;xsd:complexContent&gt;
      &lt;xsd:extension base="expr"&gt;
        &lt;xsd:sequence minOccurs="2" maxOccurs="unbounded"&gt;
          &lt;xsd:choice&gt;
            &lt;xsd:element ref="pathExpr"/&gt;
            &lt;xsd:element ref="transformWithExpr"/&gt;
          &lt;/xsd:choice&gt;
        &lt;/xsd:sequence&gt;
      &lt;/xsd:extension&gt;
    &lt;/xsd:complexContent&gt;
  &lt;/xsd:complexType&gt;

  &lt;/xsd:redefine&gt;

&lt;/xsd:schema&gt;

</eg></div2><div2 id="id-xquf-update-stylesheet"><head>Stylesheet</head><p>
This section specifies the XSLT stylesheet that defines the semantics of XQueryX
in support of XQuery Update Facility 3.0. It imports the XSLT stylesheet defined in
<bibref ref="xqueryx-30"/>,
and provides additional templates that
define the semantics of the XQueryX representation of XQuery Update Facility 3.0
by transforming that XQueryX representation into
the human readable syntax of XQuery Update Facility 3.0. 
</p><eg xml:space="preserve">

&lt;xsl:stylesheet version="2.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:xqxuf="http://www.w3.org/2007/xquery-update-10"
                xmlns:xqx="http://www.w3.org/2005/XQueryX"&gt;

&lt;!-- Initial creation                  2006-08-17: Jim Melton --&gt;
&lt;!-- Added revalidationDecl            2006-08-21: Jim Melton --&gt;
&lt;!-- Bring up to date with spec        2007-08-07: Jim Melton --&gt;
&lt;!-- Surround updating exprs w/parens  2007-09-13: Jim Melton --&gt;
&lt;!-- Added copyModifyExpr as alias for
       transformExpr                   2014-11-06: Jim Melton --&gt;
&lt;!-- Added transformWithExpr           2014-11-06: Jim Melton --&gt;
&lt;!-- Added updatingFunctionCall        2014-11-06: Jim Melton --&gt;


&lt;xsl:import href="http://www.w3.org/2005/XQueryX/xqueryx.xsl"/&gt;


&lt;!-- revalidationDecl                                         --&gt;
&lt;xsl:template match="xqxuf:revalidationDecl"&gt;
  &lt;xsl:text&gt;declare revalidation &lt;/xsl:text&gt;
  &lt;xsl:apply-templates/&gt;
&lt;/xsl:template&gt;


&lt;!-- insertExpr                                               --&gt;
&lt;xsl:template match="xqxuf:insertExpr"&gt;
  &lt;xsl:value-of select="$LPAREN"/&gt;
  &lt;xsl:text&gt;insert nodes &lt;/xsl:text&gt;
  &lt;xsl:value-of select="$NEWLINE"/&gt;
  &lt;xsl:apply-templates select="xqxuf:sourceExpr"/&gt;
  &lt;xsl:value-of select="$NEWLINE"/&gt;
  &lt;xsl:apply-templates select="xqxuf:insertInto |
                               xqxuf:insertBefore |
                               xqxuf:insertAfter"/&gt;
  &lt;xsl:value-of select="$NEWLINE"/&gt;
  &lt;xsl:apply-templates select="xqxuf:targetExpr"/&gt;
  &lt;xsl:value-of select="$RPAREN"/&gt;
&lt;/xsl:template&gt;


&lt;!-- sourceExpr                                               --&gt;
&lt;xsl:template match="xqxuf:sourceExpr"&gt;
  &lt;xsl:apply-templates/&gt;
&lt;/xsl:template&gt;


&lt;!-- insertInto                                               --&gt;
&lt;xsl:template match="xqxuf:insertInto"&gt;
  &lt;xsl:if test="child::node()"&gt;
    &lt;xsl:text&gt;as &lt;/xsl:text&gt;
  &lt;/xsl:if&gt;
  &lt;xsl:apply-templates/&gt;
  &lt;xsl:text&gt;into &lt;/xsl:text&gt;
&lt;/xsl:template&gt;


&lt;!-- insertAsFirst                                            --&gt;
&lt;xsl:template match="xqxuf:insertAsFirst"&gt;
  &lt;xsl:text&gt;first &lt;/xsl:text&gt;
&lt;/xsl:template&gt;


&lt;!-- insertAsLast                                             --&gt;
&lt;xsl:template match="xqxuf:insertAsLast"&gt;
  &lt;xsl:text&gt;last &lt;/xsl:text&gt;
&lt;/xsl:template&gt;


&lt;!-- insertAfter                                              --&gt;
&lt;xsl:template match="xqxuf:insertAfter"&gt;
  &lt;xsl:text&gt;after &lt;/xsl:text&gt;
&lt;/xsl:template&gt;


&lt;!-- insertBefore                                             --&gt;
&lt;xsl:template match="xqxuf:insertBefore"&gt;
  &lt;xsl:text&gt;before &lt;/xsl:text&gt;
&lt;/xsl:template&gt;


&lt;!-- targetExpr                                               --&gt;
&lt;xsl:template match="xqxuf:targetExpr"&gt;
  &lt;xsl:apply-templates/&gt;
&lt;/xsl:template&gt;


&lt;!-- deleteExpr                                               --&gt;
&lt;xsl:template match="xqxuf:deleteExpr"&gt;
  &lt;xsl:value-of select="$LPAREN"/&gt;
  &lt;xsl:text&gt;delete nodes &lt;/xsl:text&gt;
  &lt;xsl:apply-templates/&gt;
  &lt;xsl:value-of select="$RPAREN"/&gt;
&lt;/xsl:template&gt;


&lt;!-- replaceExpr                                              --&gt;
&lt;xsl:template match="xqxuf:replaceExpr"&gt;
  &lt;xsl:value-of select="$LPAREN"/&gt;
  &lt;xsl:text&gt;replace &lt;/xsl:text&gt;
  &lt;xsl:if test="xqxuf:replaceValue"&gt;
    &lt;xsl:text&gt;value of &lt;/xsl:text&gt;
  &lt;/xsl:if&gt;
  &lt;xsl:text&gt;node &lt;/xsl:text&gt;
  &lt;xsl:apply-templates select="xqxuf:targetExpr"/&gt;
  &lt;xsl:text&gt; with &lt;/xsl:text&gt;
  &lt;xsl:apply-templates select="xqxuf:replacementExpr"/&gt;
  &lt;xsl:value-of select="$RPAREN"/&gt;
&lt;/xsl:template&gt;


&lt;!-- replacementExpr                                          --&gt;
&lt;xsl:template match="xqxuf:replacementExpr"&gt;
  &lt;xsl:apply-templates/&gt;
&lt;/xsl:template&gt;


&lt;!-- renameExpr                                               --&gt;
&lt;xsl:template match="xqxuf:renameExpr"&gt;
  &lt;xsl:value-of select="$LPAREN"/&gt;
  &lt;xsl:text&gt;rename node &lt;/xsl:text&gt;
  &lt;xsl:apply-templates select="xqxuf:targetExpr"/&gt;
  &lt;xsl:text&gt; as &lt;/xsl:text&gt;
  &lt;xsl:apply-templates select="xqxuf:newNameExpr"/&gt;
  &lt;xsl:value-of select="$RPAREN"/&gt;
&lt;/xsl:template&gt;


&lt;!-- newNameExpr                                              --&gt;
&lt;xsl:template match="xqxuf:newNameExpr"&gt;
  &lt;xsl:apply-templates/&gt;
&lt;/xsl:template&gt;


&lt;!-- transformExpr/copyModifyExpr                             --&gt;
&lt;xsl:template match="xqxuf:transformExpr | xqxuf:copyModifyExpr"&gt;
  &lt;xsl:value-of select="$LPAREN"/&gt;
  &lt;xsl:text&gt;copy &lt;/xsl:text&gt;
  &lt;xsl:apply-templates select="xqxuf:transformCopies"/&gt;
  &lt;xsl:value-of select="$NEWLINE"/&gt;
  &lt;xsl:text&gt;  modify &lt;/xsl:text&gt;
  &lt;xsl:apply-templates select="xqxuf:modifyExpr"/&gt;
  &lt;xsl:value-of select="$NEWLINE"/&gt;
  &lt;xsl:text&gt;  return &lt;/xsl:text&gt;
  &lt;xsl:apply-templates select="xqxuf:returnExpr"/&gt;
  &lt;xsl:value-of select="$RPAREN"/&gt;
&lt;/xsl:template&gt;


&lt;!-- Part of transformExpr                                    --&gt;
&lt;xsl:template match="xqxuf:transformCopies"&gt;
  &lt;xsl:call-template name="commaSeparatedList"/&gt;
&lt;/xsl:template&gt;


&lt;!-- Part of transformExpr                                    --&gt;
&lt;xsl:template match="xqxuf:transformCopy"&gt;
  &lt;xsl:apply-templates select="xqx:varRef"/&gt;
  &lt;xsl:text&gt; := &lt;/xsl:text&gt;
  &lt;xsl:apply-templates select="xqxuf:copySource"/&gt;
&lt;/xsl:template&gt;

&lt;!-- Part of transformExpr                                    --&gt;
&lt;xsl:template match="xqxuf:copySource"&gt;
  &lt;xsl:apply-templates/&gt;
&lt;/xsl:template&gt;

&lt;!-- Part of transformExpr                                    --&gt;
&lt;xsl:template match="xqxuf:modifyExpr"&gt;
  &lt;xsl:apply-templates/&gt;
&lt;/xsl:template&gt;


&lt;!-- Part of transformExpr                                    --&gt;
&lt;xsl:template match="xqxuf:returnExpr"&gt;
  &lt;xsl:apply-templates/&gt;
&lt;/xsl:template&gt;


&lt;!-- Over-ride the template for functionDecl in XQueryX.xsd   --&gt;
&lt;!-- [33]   	FunctionDecl	   ::=   	"function" EQName "(" ParamList? ")" ("as" SequenceType)? (FunctionBody | "external") --&gt;
  &lt;xsl:template match="xqx:functionDecl" priority="100"&gt;
    &lt;xsl:text&gt;declare&lt;/xsl:text&gt;
    &lt;xsl:apply-templates select="xqx:annotation"/&gt;
    &lt;xsl:if test="@xqx:updatingFunction and
                  @xqx:updatingFunction = 'true'"&gt;
      &lt;xsl:text&gt;updating &lt;/xsl:text&gt;
    &lt;/xsl:if&gt;
    &lt;xsl:text&gt; function &lt;/xsl:text&gt;
    &lt;xsl:apply-templates select="xqx:functionName"/&gt;
    &lt;xsl:apply-templates select="xqx:paramList"/&gt;
    &lt;xsl:apply-templates select="xqx:typeDeclaration"/&gt;
    &lt;xsl:choose&gt;
      &lt;xsl:when test="xqx:externalDefinition"&gt;
        &lt;xsl:text&gt; external &lt;/xsl:text&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:otherwise&gt;
        &lt;xsl:apply-templates select="xqx:functionBody"/&gt;
      &lt;/xsl:otherwise&gt;
    &lt;/xsl:choose&gt;
  &lt;/xsl:template&gt;


  &lt;xsl:template match="xqx:functionDecl" priority="100"&gt;
    &lt;xsl:text&gt;declare &lt;/xsl:text&gt;
    &lt;xsl:if test="@xqx:updatingFunction and
                  @xqx:updatingFunction = 'true'"&gt;
      &lt;xsl:text&gt;updating &lt;/xsl:text&gt;
    &lt;/xsl:if&gt;
    &lt;xsl:text&gt;function &lt;/xsl:text&gt;
    &lt;xsl:apply-templates select="xqx:functionName"/&gt;
    &lt;xsl:apply-templates select="xqx:paramList"/&gt;
    &lt;xsl:apply-templates select="xqx:typeDeclaration"/&gt;
    &lt;xsl:apply-templates select="xqx:functionBody"/&gt;
    &lt;xsl:if test="xqx:externalDefinition"&gt;
      &lt;xsl:text&gt; external &lt;/xsl:text&gt;
    &lt;/xsl:if&gt;
  &lt;/xsl:template&gt;


&lt;!-- transformWithExpr                                        --&gt;
  &lt;xsl:template match="xqx:transformWithExpr"&gt;
    &lt;xsl:text&gt;transform with&lt;/xsl:text&gt;
    &lt;xsl:value-of select="$SPACE"/&gt;
    &lt;xsl:value-of select="$LBRACE"/&gt;
    &lt;xsl:value-of select="$SPACE"/&gt;
    &lt;xsl:apply-templates select="."/&gt;
    &lt;xsl:value-of select="$SPACE"/&gt;
    &lt;xsl:value-of select="$RBRACE"/&gt;
    &lt;xsl:value-of select="$NEWLINE"/&gt;
  &lt;/xsl:template&gt;


&lt;!-- updatingFunctionCall                                     --&gt;
  &lt;xsl:template match="xqx:updatingFunctionCall"&gt;
    &lt;xsl:if test="(xqx:functionName = 'node' or
                   xqx:functionName = 'document-node' or
                   xqx:functionName = 'element' or
                   xqx:functionName = 'attribute' or
                   xqx:functionName = 'schema-element' or
                   xqx:functionName = 'schema-attribute' or
                   xqx:functionName = 'processing-instruction' or
                   xqx:functionName = 'comment' or
                   xqx:functionName = 'text' or
                   xqx:functionName = 'function' or
                   xqx:functionName = 'namespace-node' or
                   xqx:functionName = 'item' or
                   xqx:functionName = 'if' or
                   xqx:functionName = 'switch' or
                   xqx:functionName = 'typeswitch' or
                   xqx:functionName = 'empty-sequence') and
                   ((not(xqx:functionName/@xqx:prefix) and not(xqx:functionName/@xqx:URI)) or
                    xqx:functionName/@xqx:prefix = '' or
                    xqx:functionName/@xqx:URI = '')"&gt;
      &lt;xsl:variable name="message"&gt;
        &lt;xsl:text&gt;Incorrect XQueryX: function calls must not use unqualified "reserved" name "&lt;/xsl:text&gt;
        &lt;xsl:value-of select="xqx:functionName"/&gt;
        &lt;xsl:text&gt;"&lt;/xsl:text&gt;
      &lt;/xsl:variable&gt;
      &lt;xsl:message terminate="yes"&gt;&lt;xsl:value-of select="$message"/&gt;&lt;/xsl:message&gt;
    &lt;/xsl:if&gt;
    &lt;xsl:text&gt;invoke updating &lt;/xsl:text&gt;
    &lt;xsl:apply-templates select="xqx:functionName"/&gt;
    &lt;xsl:choose&gt;
      &lt;xsl:when test="xqx:arguments"&gt;
        &lt;xsl:for-each select="xqx:arguments"&gt;
          &lt;xsl:call-template name="parenthesizedList"/&gt;
        &lt;/xsl:for-each&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:otherwise&gt;
        &lt;xsl:value-of select="$LPAREN"/&gt;
        &lt;xsl:value-of select="$RPAREN"/&gt;
      &lt;/xsl:otherwise&gt;
    &lt;/xsl:choose&gt;
  &lt;/xsl:template&gt;


&lt;/xsl:stylesheet&gt;

</eg></div2><div2 id="id-xquf-update-examples"><head>Example</head><p>
The following example is based on the data and queries in the use cases
in <bibref ref="xquery-update-30-requirements-use-cases"/>. 
In this example, we show the English description of the query,
the XQuery Update Facility solution given in
<bibref ref="xquery-update-30-requirements-use-cases"/>,
an XQueryX solution, and the XQuery Update Facility expression
that results from applying the Update Facility XQueryX-to-XQuery Update Facility transformation
defined by the stylesheet in <specref ref="id-xquf-update-stylesheet"/>
to the Update Facility XQueryX solution.
The XQuery Update Facility expression that is produced is presented only as a sanity-check—the
intent of the stylesheet is not to recreate the original
XQuery expression, but to produce <emph>a</emph> valid
XQuery expression with the same semantics. 
The semantics of the Update Facility XQueryX solution are determined by the
semantics of the XQuery Update Facility expression that
results from that transformation. 
The "correctness" of that transformation is determined by
asking the following the question:
Can some Update Facility XQueryX processor QX process some
Update Facility XQueryX document D1 to produce results R1,
after which the stylesheet is used to translate D1 into an
XQuery Update Facility expression E1 that, when processed by some
XQuery Update Facility processor Q, produces results R2 that are equivalent
(under some meaningful definition of "equivalent") to results R1?
</p><p>Comparison of the results of the Update Facility XQueryX-to-XQuery Update Facility
transformation given in this document with the XQuery Update Facility solutions
in <bibref ref="xquery-update-30-requirements-use-cases"/>
may be helpful in evaluating
the correctness of the Update Facility XQueryX solution in each example. </p><p>The XQuery Update Facility Use Cases solution given for each
example is provided only to assist readers of this
document in understanding the Update Facility XQueryX solution. 
There is no intent to imply that this
document specifies a "compilation" or "transformation" of
XQuery Update Facility syntax into Update Facility XQueryX syntax. 
</p><p>In the following example, note that path expressions are expanded to show their
structure. Also, note that the prefix syntax for binary operators like "and" makes the
precedence explicit. In general, humans find it easier to read an XML representation
that does not expand path expressions, but it is less convenient for programmatic
representation and manipulation.  XQueryX is designed as a language that is convenient
for production and modification by software, and not as a convenient syntax for humans to
read and write. </p><p>Finally, please note that white space, including new lines, have been added to
some of the Update Facility XQueryX documents and XQuery Update Facility expressions for readability. 
That additional white space is not produced by the
Update Facility XQueryX-to-XQuery Update Facility transformation.</p><p>This example is based on Q6 from
<bibref ref="xquery-update-30-requirements-use-cases"/>,
use case Parts: "modifying recursive documents":</p><div3 id="id-xquery-rep"><head>XQuery Representation</head><eg xml:space="preserve">
for $keyword at $i in ("car", "skateboard", "canoe"),
    $parent in doc("part-tree.xml")//part[@name=$keyword]
let $descendants := $parent//part
for $p in ($parent, $descendants)
return 
  replace value of node $p/@partid with $i*1000+$p/@partid

</eg></div3><div3 id="id-xqueryx-rep"><head>XQueryX Representation</head><eg xml:space="preserve">
&lt;?xml version="1.0"?&gt;
&lt;xqx:module xmlns:xqxuf="http://www.w3.org/2007/xquery-update-10"
            xmlns:xqx="http://www.w3.org/2005/XQueryX"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.w3.org/2007/xquery-update-10
    http://www.w3.org/2007/xquery-update-10/xquery-update-10-xqueryx.xsd
    http://www.w3.org/2005/XQueryX
    http://www.w3.org/2005/XQueryX/xqueryx.xsd"&gt;

  &lt;xqx:versionDecl&gt;
    &lt;xqx:version&gt;1.0&lt;/xqx:version&gt;
  &lt;/xqx:versionDecl&gt;
  &lt;xqx:mainModule&gt;
    &lt;xqx:queryBody&gt;
      &lt;xqx:flworExpr&gt;
        &lt;xqx:forClause&gt;
          &lt;xqx:forClauseItem&gt;
            &lt;xqx:typedVariableBinding&gt;
              &lt;xqx:varName&gt;keyword&lt;/xqx:varName&gt;
            &lt;/xqx:typedVariableBinding&gt;
            &lt;xqx:positionalVariableBinding&gt;i
            &lt;/xqx:positionalVariableBinding&gt;
            &lt;xqx:forExpr&gt;
              &lt;xqx:sequenceExpr&gt;
                &lt;xqx:stringConstantExpr&gt;
                  &lt;xqx:value&gt;car&lt;/xqx:value&gt;
                &lt;/xqx:stringConstantExpr&gt;
                &lt;xqx:stringConstantExpr&gt;
                  &lt;xqx:value&gt;skateboard&lt;/xqx:value&gt;
                &lt;/xqx:stringConstantExpr&gt;
                &lt;xqx:stringConstantExpr&gt;
                  &lt;xqx:value&gt;canoe&lt;/xqx:value&gt;
                &lt;/xqx:stringConstantExpr&gt;
              &lt;/xqx:sequenceExpr&gt;
            &lt;/xqx:forExpr&gt;
          &lt;/xqx:forClauseItem&gt;
          &lt;xqx:forClauseItem&gt;
            &lt;xqx:typedVariableBinding&gt;
              &lt;xqx:varName&gt;parent&lt;/xqx:varName&gt;
            &lt;/xqx:typedVariableBinding&gt;
            &lt;xqx:forExpr&gt;
              &lt;xqx:pathExpr&gt;
                &lt;xqx:stepExpr&gt;
                  &lt;xqx:filterExpr&gt;
                    &lt;xqx:functionCallExpr&gt;
                      &lt;xqx:functionName
                        xqx:prefix="fn"&gt;doc&lt;/xqx:functionName&gt;
                      &lt;xqx:arguments&gt;
                        &lt;xqx:stringConstantExpr&gt;
                          &lt;xqx:value&gt;part-tree.xml&lt;/xqx:value&gt;
                        &lt;/xqx:stringConstantExpr&gt;
                      &lt;/xqx:arguments&gt;
                    &lt;/xqx:functionCallExpr&gt;
                  &lt;/xqx:filterExpr&gt;
                &lt;/xqx:stepExpr&gt;
                &lt;xqx:stepExpr&gt;
                  &lt;xqx:xpathAxis&gt;descendant-or-self&lt;/xqx:xpathAxis&gt;
                  &lt;xqx:nameTest&gt;part&lt;/xqx:nameTest&gt;
                  &lt;xqx:predicates&gt;
                    &lt;xqx:equalOp&gt;
                      &lt;xqx:firstOperand&gt;
                        &lt;xqx:pathExpr&gt;
                          &lt;xqx:stepExpr&gt;
                            &lt;xqx:xpathAxis&gt;attribute&lt;/xqx:xpathAxis&gt;
                            &lt;xqx:nameTest&gt;name&lt;/xqx:nameTest&gt;
                          &lt;/xqx:stepExpr&gt;
                        &lt;/xqx:pathExpr&gt;
                      &lt;/xqx:firstOperand&gt;
                      &lt;xqx:secondOperand&gt;
                        &lt;xqx:varRef&gt;
                          &lt;xqx:name&gt;keyword&lt;/xqx:name&gt;
                        &lt;/xqx:varRef&gt;
                      &lt;/xqx:secondOperand&gt;
                    &lt;/xqx:equalOp&gt;
                  &lt;/xqx:predicates&gt;
                &lt;/xqx:stepExpr&gt;
              &lt;/xqx:pathExpr&gt;
            &lt;/xqx:forExpr&gt;
          &lt;/xqx:forClauseItem&gt;
        &lt;/xqx:forClause&gt;
        &lt;xqx:letClause&gt;
          &lt;xqx:letClauseItem&gt;
            &lt;xqx:typedVariableBinding&gt;
              &lt;xqx:varName&gt;descendants&lt;/xqx:varName&gt;
            &lt;/xqx:typedVariableBinding&gt;
            &lt;xqx:letExpr&gt;
              &lt;xqx:pathExpr&gt;
                &lt;xqx:stepExpr&gt;
                  &lt;xqx:filterExpr&gt;
                    &lt;xqx:varRef&gt;
                      &lt;xqx:name&gt;parent&lt;/xqx:name&gt;
                    &lt;/xqx:varRef&gt;
                  &lt;/xqx:filterExpr&gt;
                &lt;/xqx:stepExpr&gt;
                &lt;xqx:stepExpr&gt;
                  &lt;xqx:xpathAxis&gt;descendant-or-self&lt;/xqx:xpathAxis&gt;
                  &lt;xqx:nameTest&gt;part&lt;/xqx:nameTest&gt;
                &lt;/xqx:stepExpr&gt;
              &lt;/xqx:pathExpr&gt;
            &lt;/xqx:letExpr&gt;
          &lt;/xqx:letClauseItem&gt;
        &lt;/xqx:letClause&gt;
        &lt;xqx:forClause&gt;
          &lt;xqx:forClauseItem&gt;
            &lt;xqx:typedVariableBinding&gt;
              &lt;xqx:varName&gt;p&lt;/xqx:varName&gt;
            &lt;/xqx:typedVariableBinding&gt;
            &lt;xqx:forExpr&gt;
              &lt;xqx:sequenceExpr&gt;
                &lt;xqx:varRef&gt;
                  &lt;xqx:name&gt;parent&lt;/xqx:name&gt;
                &lt;/xqx:varRef&gt;
                &lt;xqx:varRef&gt;
                  &lt;xqx:name&gt;descendants&lt;/xqx:name&gt;
                &lt;/xqx:varRef&gt;
              &lt;/xqx:sequenceExpr&gt;
            &lt;/xqx:forExpr&gt;
          &lt;/xqx:forClauseItem&gt;
        &lt;/xqx:forClause&gt;
        &lt;xqx:returnClause&gt;
          &lt;xqxuf:replaceExpr&gt;
            &lt;xqxuf:replaceValue/&gt;
            &lt;xqxuf:targetExpr&gt;
              &lt;xqx:pathExpr&gt;
                &lt;xqx:stepExpr&gt;
                  &lt;xqx:filterExpr&gt;
                    &lt;xqx:varRef&gt;
                      &lt;xqx:name&gt;p&lt;/xqx:name&gt;
                    &lt;/xqx:varRef&gt;
                  &lt;/xqx:filterExpr&gt;
                &lt;/xqx:stepExpr&gt;
                &lt;xqx:stepExpr&gt;
                  &lt;xqx:xpathAxis&gt;attribute&lt;/xqx:xpathAxis&gt;
                  &lt;xqx:nameTest&gt;partid&lt;/xqx:nameTest&gt;
                &lt;/xqx:stepExpr&gt;
              &lt;/xqx:pathExpr&gt;
            &lt;/xqxuf:targetExpr&gt;
            &lt;xqxuf:replacementExpr&gt;
              &lt;xqx:addOp&gt;
                &lt;xqx:firstOperand&gt;
                  &lt;xqx:multiplyOp&gt;
                    &lt;xqx:firstOperand&gt;
                      &lt;xqx:varRef&gt;
                        &lt;xqx:name&gt;i&lt;/xqx:name&gt;
                      &lt;/xqx:varRef&gt;
                    &lt;/xqx:firstOperand&gt;
                    &lt;xqx:secondOperand&gt;
                      &lt;xqx:integerConstantExpr&gt;
                        &lt;xqx:value&gt;1000&lt;/xqx:value&gt;
                      &lt;/xqx:integerConstantExpr&gt;
                    &lt;/xqx:secondOperand&gt;
                  &lt;/xqx:multiplyOp&gt;
                &lt;/xqx:firstOperand&gt;
                &lt;xqx:secondOperand&gt;
                  &lt;xqx:pathExpr&gt;
                    &lt;xqx:stepExpr&gt;
                      &lt;xqx:filterExpr&gt;
                        &lt;xqx:varRef&gt;
                          &lt;xqx:name&gt;p&lt;/xqx:name&gt;
                        &lt;/xqx:varRef&gt;
                      &lt;/xqx:filterExpr&gt;
                    &lt;/xqx:stepExpr&gt;
                    &lt;xqx:stepExpr&gt;
                      &lt;xqx:xpathAxis&gt;attribute&lt;/xqx:xpathAxis&gt;
                      &lt;xqx:nameTest&gt;partid&lt;/xqx:nameTest&gt;
                    &lt;/xqx:stepExpr&gt;
                  &lt;/xqx:pathExpr&gt;
                &lt;/xqx:secondOperand&gt;
              &lt;/xqx:addOp&gt;
            &lt;/xqxuf:replacementExpr&gt;
          &lt;/xqxuf:replaceExpr&gt;
        &lt;/xqx:returnClause&gt;
      &lt;/xqx:flworExpr&gt;
    &lt;/xqx:queryBody&gt;
  &lt;/xqx:mainModule&gt;
&lt;/xqx:module&gt;

</eg></div3><div3 id="id-transformed-rep"><head>Transformed XQuery Representation</head><p>Application of the stylesheet in <specref ref="id-xquf-update-stylesheet"/> to the
Update Facility XQueryX representation results in the following XQuery representation:</p><eg xml:space="preserve">
 xquery version "1.0";

( for $keyword at $i in ("car", "skateboard", "canoe"),
 $parent in
   fn:doc("part-tree.xml")/descendant-or-self::part
     [(attribute::name = $keyword)]
 let $descendants:=$parent/descendant-or-self::part
 for $p in ($parent, $descendants)
 return
   replace value of node $p/attribute::partid
     with (($i*1000)+$p/attribute::partid)
)

</eg></div3></div2></div1><inform-div1 id="id-glossary"><head>Glossary</head><!-- This processing instruction automatically generates the glossary. --><?glossary?></inform-div1><inform-div1 id="id-precedence-rationale"><head>Rationale for Precedence of Update Primitives</head><p>In <specref ref="id-upd-apply-updates"/>, semantic rules specify the order in which
  the <termref def="dt-update-primitive">update primitives</termref> on a
  <termref def="dt-pending-update-list">pending update list</termref> are applied. 
  The purpose of this ordering is to ensure that the result of applying the pending update list is deterministic. 
  The order of application of the update primitives was derived from the following reasoning:</p><ulist><item><p>
        <code>insertAttribute</code>, <code>replaceValue</code>, and <code>rename</code> primitives do not conflict with any 
        other primitives other than <code>put</code>.</p></item><item><p>
        <code>insertInto</code>primitives must be applied before <code>insertIntoAsFirst/Last</code> and
        <code>insertBefore/After</code>primitives. Reason: if  an unpositioned insert were applied after a 
        positioned insert, it  might interfere with the position established by the earlier positioned insert. 
        For example, suppose node A is inserted "before" node B. 
        A later unpositioned insert into the common parent of A and B might intervene between A and B,
        which is not allowed by the semantics of "insert before."</p></item><item><p>
        <code>insertBefore/After</code>primitives must be applied before <code>replaceNode</code> primitives. 
        Reason: After a node  has been replaced, it no longer has a parent, so "before" and "after" the replaced node
        are no longer defined.</p></item><item><p>
        <code>insertIntoAsFirst/Last</code>primitives must be applied before <code>replaceElementContent</code> primitives. 
        Reason: this was a decision of the working group. 
        The intent of this decision is that, if both of these primitives are applied to the same target node in a query,
        the effective result is determined by the <code>replaceElementContent</code> primitive.</p></item><item><p>
        <code>replaceNode</code>primitives must be applied before <code>replaceElementContent</code> primitives. 
        Reason: if element  content that includes a node N has been replaced, then N no longer has a parent. 
        In this case, "replace node N" is undefined.</p></item><item><p>
        <code>replaceNode</code>primitives must be applied before <code>delete</code> primitives. Reason: After a node has been 
        deleted, it no longer has a parent. Replacing a node that has no parent is undefined.</p></item><item><p>
        <code>put</code>primitives must be applied after all other primitives in order that
        documents stored by a snapshot will reflect all update operations applied by the snapshot.</p></item></ulist></inform-div1><inform-div1 id="id-revision-log"><head>Revision Log</head><p>This log records the substantive changes that have been made to this document since the XQuery Update 3.0 Working Draft of 13 December 2011. Minor editorial changes are not included in this log.</p><olist><item><p>Removed <code>require-feature()</code>/<code>prohibit-feature()</code> due to implementation experience.</p></item><item><p>Implemented Dynamic Updating Function Invocation, according to the 2013-09-23 proposal by Ghislain Fourny, accepted in meeting #551 on 2013-10-01.</p></item><item><p>Implemented serialization parameters for fn:put(), according to the 2013-01-30 proposal by Josh Spiegel, accepted in meeting #551 on 2013-10-01.</p></item><item><p>Update XQueryX schema and stylesheet to reflect new syntax in XQuery Update 3.0.</p></item><item><p>Added the %simple annotation, bug 14667, accepted in meeting #494</p></item><item><p>Changed transform expressions to say that they don't copy the document-uri, bug 13027, accepted in meeting #527</p></item><item><p>Clarified from which module the revalidation mode is used, bug 13300, accepted in meeting #527</p></item><item><p>Raise an error for an fn:put update primitive returned to the modify clause of a copy modify expression, bug 13970, accepted in meeting #527</p></item><item><p>Implemented the "XQuery with Multiple Results" conformance level, bug 9064, accepted in meeting #555</p></item><item><p>Implemented the ability for results to contain both non-empty XDM instances and non-empty PUL, accepted in meeting #579, clarified in the minutes of meeting #580</p></item><item><p>Added the %updating("allowed"), %updating("prohibited"), and %updating("required") function assertions, bug 14662, accepted in meeting #579</p></item><item><p>Implemented the simple transform expression, bug 23643, accepted in meeting #563</p></item><item><p>Renamed the transform expression to copy modify, and the simple transform expression to transform with, bug 23643, accepted in meeting #585</p></item><item><p>Changed all [err:TBD] to real error codes.</p></item><item><p>Raising upd:mergeUpdate related errors is required at the end of a try clause, accepted in meeting #591</p></item><item><p>The %updating annotation is not required to create an updating function as an inline function, accepted in meeting #591</p></item></olist></inform-div1></back></spec>